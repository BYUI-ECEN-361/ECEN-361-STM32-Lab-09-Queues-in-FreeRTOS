
ECEN-361-STM32-Lab-06-ADC-PWM-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800b238  0800b238  0001b238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b430  0800b430  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b430  0800b430  0001b430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b438  0800b438  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b438  0800b438  0001b438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b43c  0800b43c  0001b43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d4fc  20000074  0800b4b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d570  0800b4b4  0002d570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff4e  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fef  00000000  00000000  00040035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  00044028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001524  00000000  00000000  00045b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b950  00000000  00000000  00047084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e456  00000000  00000000  000729d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114305  00000000  00000000  00090e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007c48  00000000  00000000  001a5130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001acd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b220 	.word	0x0800b220

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800b220 	.word	0x0800b220

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2iz>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d215      	bcs.n	8000872 <__aeabi_d2iz+0x36>
 8000846:	d511      	bpl.n	800086c <__aeabi_d2iz+0x30>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d912      	bls.n	8000878 <__aeabi_d2iz+0x3c>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000862:	fa23 f002 	lsr.w	r0, r3, r2
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d105      	bne.n	8000884 <__aeabi_d2iz+0x48>
 8000878:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800087c:	bf08      	it	eq
 800087e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b970 	b.w	8000bc4 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9e08      	ldr	r6, [sp, #32]
 8000902:	460d      	mov	r5, r1
 8000904:	4604      	mov	r4, r0
 8000906:	460f      	mov	r7, r1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d14a      	bne.n	80009a2 <__udivmoddi4+0xa6>
 800090c:	428a      	cmp	r2, r1
 800090e:	4694      	mov	ip, r2
 8000910:	d965      	bls.n	80009de <__udivmoddi4+0xe2>
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	b143      	cbz	r3, 800092a <__udivmoddi4+0x2e>
 8000918:	fa02 fc03 	lsl.w	ip, r2, r3
 800091c:	f1c3 0220 	rsb	r2, r3, #32
 8000920:	409f      	lsls	r7, r3
 8000922:	fa20 f202 	lsr.w	r2, r0, r2
 8000926:	4317      	orrs	r7, r2
 8000928:	409c      	lsls	r4, r3
 800092a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800092e:	fa1f f58c 	uxth.w	r5, ip
 8000932:	fbb7 f1fe 	udiv	r1, r7, lr
 8000936:	0c22      	lsrs	r2, r4, #16
 8000938:	fb0e 7711 	mls	r7, lr, r1, r7
 800093c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000940:	fb01 f005 	mul.w	r0, r1, r5
 8000944:	4290      	cmp	r0, r2
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x62>
 8000948:	eb1c 0202 	adds.w	r2, ip, r2
 800094c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000950:	f080 811c 	bcs.w	8000b8c <__udivmoddi4+0x290>
 8000954:	4290      	cmp	r0, r2
 8000956:	f240 8119 	bls.w	8000b8c <__udivmoddi4+0x290>
 800095a:	3902      	subs	r1, #2
 800095c:	4462      	add	r2, ip
 800095e:	1a12      	subs	r2, r2, r0
 8000960:	b2a4      	uxth	r4, r4
 8000962:	fbb2 f0fe 	udiv	r0, r2, lr
 8000966:	fb0e 2210 	mls	r2, lr, r0, r2
 800096a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800096e:	fb00 f505 	mul.w	r5, r0, r5
 8000972:	42a5      	cmp	r5, r4
 8000974:	d90a      	bls.n	800098c <__udivmoddi4+0x90>
 8000976:	eb1c 0404 	adds.w	r4, ip, r4
 800097a:	f100 32ff 	add.w	r2, r0, #4294967295
 800097e:	f080 8107 	bcs.w	8000b90 <__udivmoddi4+0x294>
 8000982:	42a5      	cmp	r5, r4
 8000984:	f240 8104 	bls.w	8000b90 <__udivmoddi4+0x294>
 8000988:	4464      	add	r4, ip
 800098a:	3802      	subs	r0, #2
 800098c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	2100      	movs	r1, #0
 8000994:	b11e      	cbz	r6, 800099e <__udivmoddi4+0xa2>
 8000996:	40dc      	lsrs	r4, r3
 8000998:	2300      	movs	r3, #0
 800099a:	e9c6 4300 	strd	r4, r3, [r6]
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0xbc>
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	f000 80ed 	beq.w	8000b86 <__udivmoddi4+0x28a>
 80009ac:	2100      	movs	r1, #0
 80009ae:	e9c6 0500 	strd	r0, r5, [r6]
 80009b2:	4608      	mov	r0, r1
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	fab3 f183 	clz	r1, r3
 80009bc:	2900      	cmp	r1, #0
 80009be:	d149      	bne.n	8000a54 <__udivmoddi4+0x158>
 80009c0:	42ab      	cmp	r3, r5
 80009c2:	d302      	bcc.n	80009ca <__udivmoddi4+0xce>
 80009c4:	4282      	cmp	r2, r0
 80009c6:	f200 80f8 	bhi.w	8000bba <__udivmoddi4+0x2be>
 80009ca:	1a84      	subs	r4, r0, r2
 80009cc:	eb65 0203 	sbc.w	r2, r5, r3
 80009d0:	2001      	movs	r0, #1
 80009d2:	4617      	mov	r7, r2
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	d0e2      	beq.n	800099e <__udivmoddi4+0xa2>
 80009d8:	e9c6 4700 	strd	r4, r7, [r6]
 80009dc:	e7df      	b.n	800099e <__udivmoddi4+0xa2>
 80009de:	b902      	cbnz	r2, 80009e2 <__udivmoddi4+0xe6>
 80009e0:	deff      	udf	#255	; 0xff
 80009e2:	fab2 f382 	clz	r3, r2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8090 	bne.w	8000b0c <__udivmoddi4+0x210>
 80009ec:	1a8a      	subs	r2, r1, r2
 80009ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f2:	fa1f fe8c 	uxth.w	lr, ip
 80009f6:	2101      	movs	r1, #1
 80009f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000a00:	0c22      	lsrs	r2, r4, #16
 8000a02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a06:	fb0e f005 	mul.w	r0, lr, r5
 8000a0a:	4290      	cmp	r0, r2
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x124>
 8000a0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a16:	d202      	bcs.n	8000a1e <__udivmoddi4+0x122>
 8000a18:	4290      	cmp	r0, r2
 8000a1a:	f200 80cb 	bhi.w	8000bb4 <__udivmoddi4+0x2b8>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	1a12      	subs	r2, r2, r0
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a28:	fb07 2210 	mls	r2, r7, r0, r2
 8000a2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a30:	fb0e fe00 	mul.w	lr, lr, r0
 8000a34:	45a6      	cmp	lr, r4
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x14e>
 8000a38:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a40:	d202      	bcs.n	8000a48 <__udivmoddi4+0x14c>
 8000a42:	45a6      	cmp	lr, r4
 8000a44:	f200 80bb 	bhi.w	8000bbe <__udivmoddi4+0x2c2>
 8000a48:	4610      	mov	r0, r2
 8000a4a:	eba4 040e 	sub.w	r4, r4, lr
 8000a4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a52:	e79f      	b.n	8000994 <__udivmoddi4+0x98>
 8000a54:	f1c1 0720 	rsb	r7, r1, #32
 8000a58:	408b      	lsls	r3, r1
 8000a5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a62:	fa05 f401 	lsl.w	r4, r5, r1
 8000a66:	fa20 f307 	lsr.w	r3, r0, r7
 8000a6a:	40fd      	lsrs	r5, r7
 8000a6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a70:	4323      	orrs	r3, r4
 8000a72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a76:	fa1f fe8c 	uxth.w	lr, ip
 8000a7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a7e:	0c1c      	lsrs	r4, r3, #16
 8000a80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a84:	fb08 f50e 	mul.w	r5, r8, lr
 8000a88:	42a5      	cmp	r5, r4
 8000a8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a92:	d90b      	bls.n	8000aac <__udivmoddi4+0x1b0>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a9c:	f080 8088 	bcs.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa0:	42a5      	cmp	r5, r4
 8000aa2:	f240 8085 	bls.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aaa:	4464      	add	r4, ip
 8000aac:	1b64      	subs	r4, r4, r5
 8000aae:	b29d      	uxth	r5, r3
 8000ab0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ab4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ab8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000abc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ac0:	45a6      	cmp	lr, r4
 8000ac2:	d908      	bls.n	8000ad6 <__udivmoddi4+0x1da>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000acc:	d26c      	bcs.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ace:	45a6      	cmp	lr, r4
 8000ad0:	d96a      	bls.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ad2:	3b02      	subs	r3, #2
 8000ad4:	4464      	add	r4, ip
 8000ad6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ada:	fba3 9502 	umull	r9, r5, r3, r2
 8000ade:	eba4 040e 	sub.w	r4, r4, lr
 8000ae2:	42ac      	cmp	r4, r5
 8000ae4:	46c8      	mov	r8, r9
 8000ae6:	46ae      	mov	lr, r5
 8000ae8:	d356      	bcc.n	8000b98 <__udivmoddi4+0x29c>
 8000aea:	d053      	beq.n	8000b94 <__udivmoddi4+0x298>
 8000aec:	b156      	cbz	r6, 8000b04 <__udivmoddi4+0x208>
 8000aee:	ebb0 0208 	subs.w	r2, r0, r8
 8000af2:	eb64 040e 	sbc.w	r4, r4, lr
 8000af6:	fa04 f707 	lsl.w	r7, r4, r7
 8000afa:	40ca      	lsrs	r2, r1
 8000afc:	40cc      	lsrs	r4, r1
 8000afe:	4317      	orrs	r7, r2
 8000b00:	e9c6 7400 	strd	r7, r4, [r6]
 8000b04:	4618      	mov	r0, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	f1c3 0120 	rsb	r1, r3, #32
 8000b10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b14:	fa20 f201 	lsr.w	r2, r0, r1
 8000b18:	fa25 f101 	lsr.w	r1, r5, r1
 8000b1c:	409d      	lsls	r5, r3
 8000b1e:	432a      	orrs	r2, r5
 8000b20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b24:	fa1f fe8c 	uxth.w	lr, ip
 8000b28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b30:	0c11      	lsrs	r1, r2, #16
 8000b32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b36:	fb00 f50e 	mul.w	r5, r0, lr
 8000b3a:	428d      	cmp	r5, r1
 8000b3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x258>
 8000b42:	eb1c 0101 	adds.w	r1, ip, r1
 8000b46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b4a:	d22f      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b4c:	428d      	cmp	r5, r1
 8000b4e:	d92d      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b50:	3802      	subs	r0, #2
 8000b52:	4461      	add	r1, ip
 8000b54:	1b49      	subs	r1, r1, r5
 8000b56:	b292      	uxth	r2, r2
 8000b58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b64:	fb05 f10e 	mul.w	r1, r5, lr
 8000b68:	4291      	cmp	r1, r2
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x282>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b74:	d216      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b76:	4291      	cmp	r1, r2
 8000b78:	d914      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b7a:	3d02      	subs	r5, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a52      	subs	r2, r2, r1
 8000b80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b84:	e738      	b.n	80009f8 <__udivmoddi4+0xfc>
 8000b86:	4631      	mov	r1, r6
 8000b88:	4630      	mov	r0, r6
 8000b8a:	e708      	b.n	800099e <__udivmoddi4+0xa2>
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e6e6      	b.n	800095e <__udivmoddi4+0x62>
 8000b90:	4610      	mov	r0, r2
 8000b92:	e6fb      	b.n	800098c <__udivmoddi4+0x90>
 8000b94:	4548      	cmp	r0, r9
 8000b96:	d2a9      	bcs.n	8000aec <__udivmoddi4+0x1f0>
 8000b98:	ebb9 0802 	subs.w	r8, r9, r2
 8000b9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	e7a3      	b.n	8000aec <__udivmoddi4+0x1f0>
 8000ba4:	4645      	mov	r5, r8
 8000ba6:	e7ea      	b.n	8000b7e <__udivmoddi4+0x282>
 8000ba8:	462b      	mov	r3, r5
 8000baa:	e794      	b.n	8000ad6 <__udivmoddi4+0x1da>
 8000bac:	4640      	mov	r0, r8
 8000bae:	e7d1      	b.n	8000b54 <__udivmoddi4+0x258>
 8000bb0:	46d0      	mov	r8, sl
 8000bb2:	e77b      	b.n	8000aac <__udivmoddi4+0x1b0>
 8000bb4:	3d02      	subs	r5, #2
 8000bb6:	4462      	add	r2, ip
 8000bb8:	e732      	b.n	8000a20 <__udivmoddi4+0x124>
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e70a      	b.n	80009d4 <__udivmoddi4+0xd8>
 8000bbe:	4464      	add	r4, ip
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	e742      	b.n	8000a4a <__udivmoddi4+0x14e>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	817b      	strh	r3, [r7, #10]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	75fb      	strb	r3, [r7, #23]
 8000be0:	e038      	b.n	8000c54 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000be2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10f      	bne.n	8000c0a <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 8000bea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	897b      	ldrh	r3, [r7, #10]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f003 f9cf 	bl	8003f9c <HAL_GPIO_WritePin>
			val >>= 1;
 8000bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c02:	085b      	lsrs	r3, r3, #1
 8000c04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000c08:	e00f      	b.n	8000c2a <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 8000c0a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	09db      	lsrs	r3, r3, #7
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	897b      	ldrh	r3, [r7, #10]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	68f8      	ldr	r0, [r7, #12]
 8000c1c:	f003 f9be 	bl	8003f9c <HAL_GPIO_WritePin>
			val <<= 1;
 8000c20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 8000c2a:	893b      	ldrh	r3, [r7, #8]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f003 f9b3 	bl	8003f9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 8000c36:	893b      	ldrh	r3, [r7, #8]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f003 f9ad 	bl	8003f9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 8000c42:	893b      	ldrh	r3, [r7, #8]
 8000c44:	2200      	movs	r2, #0
 8000c46:	4619      	mov	r1, r3
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f003 f9a7 	bl	8003f9c <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 8000c4e:	7dfb      	ldrb	r3, [r7, #23]
 8000c50:	3301      	adds	r3, #1
 8000c52:	75fb      	strb	r3, [r7, #23]
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b07      	cmp	r3, #7
 8000c58:	d9c3      	bls.n	8000be2 <shiftOut+0x1a>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <set_Decimal_Point>:
	}



void set_Decimal_Point (int position)
	{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	/* Position should be between 1 and 4 */
    SEGMENT_VALUE[4 - position] &= 0x7F;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f1c3 0304 	rsb	r3, r3, #4
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <set_Decimal_Point+0x30>)
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f1c3 0304 	rsb	r3, r3, #4
 8000c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c82:	b2d1      	uxtb	r1, r2
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <set_Decimal_Point+0x30>)
 8000c86:	54d1      	strb	r1, [r2, r3]
	}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20000094 	.word	0x20000094

08000c98 <MultiFunctionShield_Display>:



void MultiFunctionShield_Display (int16_t value)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
  if ((value > 9999) || (value < -999))   // out of range
 8000ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000caa:	4293      	cmp	r3, r2
 8000cac:	dc04      	bgt.n	8000cb8 <MultiFunctionShield_Display+0x20>
 8000cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000cb6:	dc0c      	bgt.n	8000cd2 <MultiFunctionShield_Display+0x3a>
  {
    SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000cb8:	22bf      	movs	r2, #191	; 0xbf
 8000cba:	4b7f      	ldr	r3, [pc, #508]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000cbc:	701a      	strb	r2, [r3, #0]
    SEGMENT_VALUE[1] = SEGMENT_MINUS;
 8000cbe:	22bf      	movs	r2, #191	; 0xbf
 8000cc0:	4b7d      	ldr	r3, [pc, #500]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000cc2:	705a      	strb	r2, [r3, #1]
    SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000cc4:	22bf      	movs	r2, #191	; 0xbf
 8000cc6:	4b7c      	ldr	r3, [pc, #496]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000cc8:	709a      	strb	r2, [r3, #2]
    SEGMENT_VALUE[3] = SEGMENT_MINUS;
 8000cca:	22bf      	movs	r2, #191	; 0xbf
 8000ccc:	4b7a      	ldr	r3, [pc, #488]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000cce:	70da      	strb	r2, [r3, #3]
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;

      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
    }
  }
}
 8000cd0:	e0ec      	b.n	8000eac <MultiFunctionShield_Display+0x214>
    if (value > 0)   // positive values
 8000cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	dd72      	ble.n	8000dc0 <MultiFunctionShield_Display+0x128>
      if (value > 999)
 8000cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ce2:	db0f      	blt.n	8000d04 <MultiFunctionShield_Display+0x6c>
        SEGMENT_VALUE[0] = SEGMENT_MAP [(uint8_t) (value / 1000)];
 8000ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce8:	4a74      	ldr	r2, [pc, #464]	; (8000ebc <MultiFunctionShield_Display+0x224>)
 8000cea:	fb82 1203 	smull	r1, r2, r2, r3
 8000cee:	1192      	asrs	r2, r2, #6
 8000cf0:	17db      	asrs	r3, r3, #31
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b71      	ldr	r3, [pc, #452]	; (8000ec0 <MultiFunctionShield_Display+0x228>)
 8000cfc:	5c9a      	ldrb	r2, [r3, r2]
 8000cfe:	4b6e      	ldr	r3, [pc, #440]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e002      	b.n	8000d0a <MultiFunctionShield_Display+0x72>
        SEGMENT_VALUE[0] = BLANK_OR_ZERO_FILL;
 8000d04:	22c0      	movs	r2, #192	; 0xc0
 8000d06:	4b6c      	ldr	r3, [pc, #432]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000d08:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 8000d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0e:	2b63      	cmp	r3, #99	; 0x63
 8000d10:	dd1b      	ble.n	8000d4a <MultiFunctionShield_Display+0xb2>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d16:	4a6b      	ldr	r2, [pc, #428]	; (8000ec4 <MultiFunctionShield_Display+0x22c>)
 8000d18:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1c:	1152      	asrs	r2, r2, #5
 8000d1e:	17db      	asrs	r3, r3, #31
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b68      	ldr	r3, [pc, #416]	; (8000ec8 <MultiFunctionShield_Display+0x230>)
 8000d26:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2a:	1099      	asrs	r1, r3, #2
 8000d2c:	17d3      	asrs	r3, r2, #31
 8000d2e:	1ac9      	subs	r1, r1, r3
 8000d30:	460b      	mov	r3, r1
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <MultiFunctionShield_Display+0x228>)
 8000d42:	5c9a      	ldrb	r2, [r3, r2]
 8000d44:	4b5c      	ldr	r3, [pc, #368]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000d46:	705a      	strb	r2, [r3, #1]
 8000d48:	e002      	b.n	8000d50 <MultiFunctionShield_Display+0xb8>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 8000d4a:	22c0      	movs	r2, #192	; 0xc0
 8000d4c:	4b5a      	ldr	r3, [pc, #360]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000d4e:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 8000d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d54:	2b09      	cmp	r3, #9
 8000d56:	dd1b      	ble.n	8000d90 <MultiFunctionShield_Display+0xf8>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 8000d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5c:	4a5a      	ldr	r2, [pc, #360]	; (8000ec8 <MultiFunctionShield_Display+0x230>)
 8000d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d62:	1092      	asrs	r2, r2, #2
 8000d64:	17db      	asrs	r3, r3, #31
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	b21a      	sxth	r2, r3
 8000d6a:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <MultiFunctionShield_Display+0x230>)
 8000d6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d70:	1099      	asrs	r1, r3, #2
 8000d72:	17d3      	asrs	r3, r2, #31
 8000d74:	1ac9      	subs	r1, r1, r3
 8000d76:	460b      	mov	r3, r1
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <MultiFunctionShield_Display+0x228>)
 8000d88:	5c9a      	ldrb	r2, [r3, r2]
 8000d8a:	4b4b      	ldr	r3, [pc, #300]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000d8c:	709a      	strb	r2, [r3, #2]
 8000d8e:	e002      	b.n	8000d96 <MultiFunctionShield_Display+0xfe>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 8000d90:	22c0      	movs	r2, #192	; 0xc0
 8000d92:	4b49      	ldr	r3, [pc, #292]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000d94:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000d96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d9a:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <MultiFunctionShield_Display+0x230>)
 8000d9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000da0:	1099      	asrs	r1, r3, #2
 8000da2:	17d3      	asrs	r3, r2, #31
 8000da4:	1ac9      	subs	r1, r1, r3
 8000da6:	460b      	mov	r3, r1
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	440b      	add	r3, r1
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <MultiFunctionShield_Display+0x228>)
 8000db8:	5c9a      	ldrb	r2, [r3, r2]
 8000dba:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000dbc:	70da      	strb	r2, [r3, #3]
}
 8000dbe:	e075      	b.n	8000eac <MultiFunctionShield_Display+0x214>
    else if (value == 0)   // positive values
 8000dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10c      	bne.n	8000de2 <MultiFunctionShield_Display+0x14a>
		SEGMENT_VALUE[0] = SEGMENT_MAP[0];
 8000dc8:	22c0      	movs	r2, #192	; 0xc0
 8000dca:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000dcc:	701a      	strb	r2, [r3, #0]
		SEGMENT_VALUE[1] = SEGMENT_MAP[0];
 8000dce:	22c0      	movs	r2, #192	; 0xc0
 8000dd0:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000dd2:	705a      	strb	r2, [r3, #1]
		SEGMENT_VALUE[2] = SEGMENT_MAP[0];
 8000dd4:	22c0      	movs	r2, #192	; 0xc0
 8000dd6:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000dd8:	709a      	strb	r2, [r3, #2]
		SEGMENT_VALUE[3] = SEGMENT_MAP[0];
 8000dda:	22c0      	movs	r2, #192	; 0xc0
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000dde:	70da      	strb	r2, [r3, #3]
}
 8000de0:	e064      	b.n	8000eac <MultiFunctionShield_Display+0x214>
    else if (value < 0)      // negative values: "-" left
 8000de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da60      	bge.n	8000eac <MultiFunctionShield_Display+0x214>
      value *= -1;
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	425b      	negs	r3, r3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	80fb      	strh	r3, [r7, #6]
      SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000df2:	22bf      	movs	r2, #191	; 0xbf
 8000df4:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000df6:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 8000df8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfc:	2b63      	cmp	r3, #99	; 0x63
 8000dfe:	dd1b      	ble.n	8000e38 <MultiFunctionShield_Display+0x1a0>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e04:	4a2f      	ldr	r2, [pc, #188]	; (8000ec4 <MultiFunctionShield_Display+0x22c>)
 8000e06:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0a:	1152      	asrs	r2, r2, #5
 8000e0c:	17db      	asrs	r3, r3, #31
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <MultiFunctionShield_Display+0x230>)
 8000e14:	fb83 1302 	smull	r1, r3, r3, r2
 8000e18:	1099      	asrs	r1, r3, #2
 8000e1a:	17d3      	asrs	r3, r2, #31
 8000e1c:	1ac9      	subs	r1, r1, r3
 8000e1e:	460b      	mov	r3, r1
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MultiFunctionShield_Display+0x228>)
 8000e30:	5c9a      	ldrb	r2, [r3, r2]
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000e34:	705a      	strb	r2, [r3, #1]
 8000e36:	e002      	b.n	8000e3e <MultiFunctionShield_Display+0x1a6>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 8000e38:	22c0      	movs	r2, #192	; 0xc0
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000e3c:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 8000e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e42:	2b09      	cmp	r3, #9
 8000e44:	dd1b      	ble.n	8000e7e <MultiFunctionShield_Display+0x1e6>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 8000e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4a:	4a1f      	ldr	r2, [pc, #124]	; (8000ec8 <MultiFunctionShield_Display+0x230>)
 8000e4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e50:	1092      	asrs	r2, r2, #2
 8000e52:	17db      	asrs	r3, r3, #31
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MultiFunctionShield_Display+0x230>)
 8000e5a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e5e:	1099      	asrs	r1, r3, #2
 8000e60:	17d3      	asrs	r3, r2, #31
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	460b      	mov	r3, r1
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	440b      	add	r3, r1
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MultiFunctionShield_Display+0x228>)
 8000e76:	5c9a      	ldrb	r2, [r3, r2]
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000e7a:	709a      	strb	r2, [r3, #2]
 8000e7c:	e002      	b.n	8000e84 <MultiFunctionShield_Display+0x1ec>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 8000e7e:	22c0      	movs	r2, #192	; 0xc0
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000e82:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000e84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MultiFunctionShield_Display+0x230>)
 8000e8a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e8e:	1099      	asrs	r1, r3, #2
 8000e90:	17d3      	asrs	r3, r2, #31
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	460b      	mov	r3, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MultiFunctionShield_Display+0x228>)
 8000ea6:	5c9a      	ldrb	r2, [r3, r2]
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <MultiFunctionShield_Display+0x220>)
 8000eaa:	70da      	strb	r2, [r3, #3]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	20000094 	.word	0x20000094
 8000ebc:	10624dd3 	.word	0x10624dd3
 8000ec0:	0800b35c 	.word	0x0800b35c
 8000ec4:	51eb851f 	.word	0x51eb851f
 8000ec8:	66666667 	.word	0x66666667

08000ecc <MultiFunctionShield_Display_PWM>:
void MultiFunctionShield_Display_PWM(int16_t duty_cycle_percent)
	{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
	/* Just display the whole number then blank the top two
	 * If it's 100% add the 1 back on
	 */
	MultiFunctionShield_Display(duty_cycle_percent);
 8000ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fedc 	bl	8000c98 <MultiFunctionShield_Display>
	SEGMENT_VALUE[0] = 0x8C;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MultiFunctionShield_Display_PWM+0x38>)
 8000ee2:	228c      	movs	r2, #140	; 0x8c
 8000ee4:	701a      	strb	r2, [r3, #0]
	SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000ee6:	22ff      	movs	r2, #255	; 0xff
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MultiFunctionShield_Display_PWM+0x38>)
 8000eea:	705a      	strb	r2, [r3, #1]
	if (duty_cycle_percent == 100){
 8000eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef0:	2b64      	cmp	r3, #100	; 0x64
 8000ef2:	d102      	bne.n	8000efa <MultiFunctionShield_Display_PWM+0x2e>
		SEGMENT_VALUE[1] = SEGMENT_MAP [1];
 8000ef4:	22f9      	movs	r2, #249	; 0xf9
 8000ef6:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <MultiFunctionShield_Display_PWM+0x38>)
 8000ef8:	705a      	strb	r2, [r3, #1]
		}
	}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000094 	.word	0x20000094

08000f08 <Clear_LEDs>:

void Clear_LEDs(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	  // Clear the LED lights


// LAB-04 needs D1 and D3 for SPI
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f003 f842 	bl	8003f9c <HAL_GPIO_WritePin>
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2140      	movs	r1, #64	; 0x40
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f003 f83c 	bl	8003f9c <HAL_GPIO_WritePin>

#ifndef          LAB_06
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
#endif
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000f2c:	22ff      	movs	r2, #255	; 0xff
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MultiFunctionShield_Clear+0x28>)
 8000f30:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MultiFunctionShield_Clear+0x28>)
 8000f36:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000f38:	22ff      	movs	r2, #255	; 0xff
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <MultiFunctionShield_Clear+0x28>)
 8000f3c:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000f3e:	22ff      	movs	r2, #255	; 0xff
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <MultiFunctionShield_Clear+0x28>)
 8000f42:	70da      	strb	r2, [r3, #3]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000094 	.word	0x20000094

08000f54 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2120      	movs	r1, #32
 8000f62:	4816      	ldr	r0, [pc, #88]	; (8000fbc <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000f64:	f003 f81a 	bl	8003f9c <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000f68:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 8000f6a:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	2301      	movs	r3, #1
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f7ff fe1f 	bl	8000bc8 <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000f8e:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f7ff fe0f 	bl	8000bc8 <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2120      	movs	r1, #32
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000fb0:	f002 fff4 	bl	8003f9c <HAL_GPIO_WritePin>
	}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	48000400 	.word	0x48000400
 8000fc0:	20000094 	.word	0x20000094
 8000fc4:	0800b368 	.word	0x0800b368

08000fc8 <disp_adc_on_7seg>:
	{
	MultiFunctionShield_Display(8888);
	}

void disp_adc_on_7seg(float inValue)
	{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	ed87 0a01 	vstr	s0, [r7, #4]
	float tmpVal = (inValue < 0) ? -inValue : inValue;
 8000fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fde:	d504      	bpl.n	8000fea <disp_adc_on_7seg+0x22>
 8000fe0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe4:	eef1 7a67 	vneg.f32	s15, s15
 8000fe8:	e001      	b.n	8000fee <disp_adc_on_7seg+0x26>
 8000fea:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fee:	edc7 7a07 	vstr	s15, [r7, #28]
	int tmpInt1 = tmpVal;                  // Get the integer (678).
 8000ff2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffa:	ee17 3a90 	vmov	r3, s15
 8000ffe:	61bb      	str	r3, [r7, #24]
	float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100a:	ed97 7a07 	vldr	s14, [r7, #28]
 800100e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001012:	edc7 7a05 	vstr	s15, [r7, #20]

	uint8_t tenth = trunc(tmpFrac * 10.0);
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff fbb8 	bl	800078c <__aeabi_f2d>
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	4b40      	ldr	r3, [pc, #256]	; (8001124 <disp_adc_on_7seg+0x15c>)
 8001022:	f7ff f925 	bl	8000270 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	ec43 2b17 	vmov	d7, r2, r3
 800102e:	eeb0 0a47 	vmov.f32	s0, s14
 8001032:	eef0 0a67 	vmov.f32	s1, s15
 8001036:	f00a f8b9 	bl	800b1ac <trunc>
 800103a:	ec53 2b10 	vmov	r2, r3, d0
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f7ff fc23 	bl	800088c <__aeabi_d2uiz>
 8001046:	4603      	mov	r3, r0
 8001048:	74fb      	strb	r3, [r7, #19]
	tmpFrac = tmpFrac * 10 - tenth;
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001052:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001056:	7cfb      	ldrb	r3, [r7, #19]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001064:	edc7 7a05 	vstr	s15, [r7, #20]
	uint8_t hundredth = ((int) trunc(tmpFrac * 10)) ;
 8001068:	edd7 7a05 	vldr	s15, [r7, #20]
 800106c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001074:	ee17 0a90 	vmov	r0, s15
 8001078:	f7ff fb88 	bl	800078c <__aeabi_f2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	ec43 2b10 	vmov	d0, r2, r3
 8001084:	f00a f892 	bl	800b1ac <trunc>
 8001088:	ec53 2b10 	vmov	r2, r3, d0
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fbd4 	bl	800083c <__aeabi_d2iz>
 8001094:	4603      	mov	r3, r0
 8001096:	74bb      	strb	r3, [r7, #18]
	tmpFrac = tmpFrac * 10 - hundredth;
 8001098:	edd7 7a05 	vldr	s15, [r7, #20]
 800109c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010a4:	7cbb      	ldrb	r3, [r7, #18]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b2:	edc7 7a05 	vstr	s15, [r7, #20]
	uint8_t thousandth = ((int) trunc(tmpFrac * 10)) ;
 80010b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c2:	ee17 0a90 	vmov	r0, s15
 80010c6:	f7ff fb61 	bl	800078c <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	ec43 2b10 	vmov	d0, r2, r3
 80010d2:	f00a f86b 	bl	800b1ac <trunc>
 80010d6:	ec53 2b10 	vmov	r2, r3, d0
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fbad 	bl	800083c <__aeabi_d2iz>
 80010e2:	4603      	mov	r3, r0
 80010e4:	747b      	strb	r3, [r7, #17]
	 * The format will always be
	 * x.yyy  always positive
	 * always a single digit
	 *
	 */
	int to_disp = (tmpInt1 * 1000) + (tenth *100) + (hundredth * 10) + thousandth;
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ec:	fb03 f202 	mul.w	r2, r3, r2
 80010f0:	7cfb      	ldrb	r3, [r7, #19]
 80010f2:	2164      	movs	r1, #100	; 0x64
 80010f4:	fb01 f303 	mul.w	r3, r1, r3
 80010f8:	18d1      	adds	r1, r2, r3
 80010fa:	7cba      	ldrb	r2, [r7, #18]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	18ca      	adds	r2, r1, r3
 8001106:	7c7b      	ldrb	r3, [r7, #17]
 8001108:	4413      	add	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
	MultiFunctionShield_Display(to_disp);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	b21b      	sxth	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fdc1 	bl	8000c98 <MultiFunctionShield_Display>
	set_Decimal_Point(4);
 8001116:	2004      	movs	r0, #4
 8001118:	f7ff fda4 	bl	8000c64 <set_Decimal_Point>

	}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40240000 	.word	0x40240000

08001128 <MultiFunctionShield__ISRFunc>:



void MultiFunctionShield__ISRFunc(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MultiFunctionShield__ISRFunc+0x60>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	3301      	adds	r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MultiFunctionShield__ISRFunc+0x60>)
 8001138:	4611      	mov	r1, r2
 800113a:	7019      	strb	r1, [r3, #0]
 800113c:	4613      	mov	r3, r2
 800113e:	3b01      	subs	r3, #1
 8001140:	2b03      	cmp	r3, #3
 8001142:	d81e      	bhi.n	8001182 <MultiFunctionShield__ISRFunc+0x5a>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <MultiFunctionShield__ISRFunc+0x24>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	0800115d 	.word	0x0800115d
 8001150:	08001165 	.word	0x08001165
 8001154:	0800116d 	.word	0x0800116d
 8001158:	08001175 	.word	0x08001175
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fef9 	bl	8000f54 <MultiFunctionShield_WriteNumberToSegment>
 8001162:	e00e      	b.n	8001182 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8001164:	2001      	movs	r0, #1
 8001166:	f7ff fef5 	bl	8000f54 <MultiFunctionShield_WriteNumberToSegment>
 800116a:	e00a      	b.n	8001182 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 800116c:	2002      	movs	r0, #2
 800116e:	f7ff fef1 	bl	8000f54 <MultiFunctionShield_WriteNumberToSegment>
 8001172:	e006      	b.n	8001182 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8001174:	2003      	movs	r0, #3
 8001176:	f7ff feed 	bl	8000f54 <MultiFunctionShield_WriteNumberToSegment>
 800117a:	4b03      	ldr	r3, [pc, #12]	; (8001188 <MultiFunctionShield__ISRFunc+0x60>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	bf00      	nop
  }
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000090 	.word	0x20000090

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f001 f90c 	bl	80023ac <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f878 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 fabc 	bl	8001714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800119c:	f000 fa8a 	bl	80016b4 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80011a0:	f000 fa62 	bl	8001668 <MX_TIM17_Init>
  MX_TIM1_Init();
 80011a4:	f000 f958 	bl	8001458 <MX_TIM1_Init>
  MX_TIM4_Init();
 80011a8:	f000 f9e6 	bl	8001578 <MX_TIM4_Init>
  MX_ADC2_Init();
 80011ac:	f000 f8be 	bl	800132c <MX_ADC2_Init>
  MX_DAC1_Init();
 80011b0:	f000 f920 	bl	80013f4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 80011b4:	481f      	ldr	r0, [pc, #124]	; (8001234 <main+0xa8>)
 80011b6:	f004 fae5 	bl	8005784 <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 80011ba:	f7ff feb5 	bl	8000f28 <MultiFunctionShield_Clear>
  Clear_LEDs();												// Clear the lights
 80011be:	f7ff fea3 	bl	8000f08 <Clear_LEDs>
  printf("\033\143");
 80011c2:	481d      	ldr	r0, [pc, #116]	; (8001238 <main+0xac>)
 80011c4:	f009 f91a 	bl	800a3fc <iprintf>
  printf("Welcome to ECEN-361 Lab-06\n\r\n\r");
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <main+0xb0>)
 80011ca:	f009 f917 	bl	800a3fc <iprintf>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);		// Start the Timer with the PWM Assigned.
 80011ce:	2100      	movs	r1, #0
 80011d0:	481b      	ldr	r0, [pc, #108]	; (8001240 <main+0xb4>)
 80011d2:	f004 fb9f 	bl	8005914 <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011d6:	f006 fae9 	bl	80077ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011da:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <main+0xb8>)
 80011dc:	2100      	movs	r1, #0
 80011de:	481a      	ldr	r0, [pc, #104]	; (8001248 <main+0xbc>)
 80011e0:	f006 fb2e 	bl	8007840 <osThreadNew>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a19      	ldr	r2, [pc, #100]	; (800124c <main+0xc0>)
 80011e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadNew(D2_Task, "D2_Task", &defaultTask_attributes);
 80011ea:	4a16      	ldr	r2, [pc, #88]	; (8001244 <main+0xb8>)
 80011ec:	4918      	ldr	r1, [pc, #96]	; (8001250 <main+0xc4>)
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <main+0xc8>)
 80011f0:	f006 fb26 	bl	8007840 <osThreadNew>
  PWM_Task_Handle = osThreadNew(PWM_Brightness_Task, "PWM_Task", &defaultTask_attributes);
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <main+0xb8>)
 80011f6:	4918      	ldr	r1, [pc, #96]	; (8001258 <main+0xcc>)
 80011f8:	4818      	ldr	r0, [pc, #96]	; (800125c <main+0xd0>)
 80011fa:	f006 fb21 	bl	8007840 <osThreadNew>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <main+0xd4>)
 8001202:	6013      	str	r3, [r2, #0]
  ADC_Task_Handle = osThreadNew(Sample_Print_POT_ADC_Task, "ADC_Task", &bigStackTask_attributes);
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <main+0xd8>)
 8001206:	4918      	ldr	r1, [pc, #96]	; (8001268 <main+0xdc>)
 8001208:	4818      	ldr	r0, [pc, #96]	; (800126c <main+0xe0>)
 800120a:	f006 fb19 	bl	8007840 <osThreadNew>
 800120e:	4603      	mov	r3, r0
 8001210:	4a17      	ldr	r2, [pc, #92]	; (8001270 <main+0xe4>)
 8001212:	6013      	str	r3, [r2, #0]
  DAC_Task_Handle = osThreadNew(DAC_Cycle_Task, "DAC_Task", &defaultTask_attributes);
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <main+0xb8>)
 8001216:	4917      	ldr	r1, [pc, #92]	; (8001274 <main+0xe8>)
 8001218:	4817      	ldr	r0, [pc, #92]	; (8001278 <main+0xec>)
 800121a:	f006 fb11 	bl	8007840 <osThreadNew>
 800121e:	4603      	mov	r3, r0
 8001220:	4a16      	ldr	r2, [pc, #88]	; (800127c <main+0xf0>)
 8001222:	6013      	str	r3, [r2, #0]
  osThreadNew(Do_SevenSeg_Display, "Display_Task", &defaultTask_attributes);
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <main+0xb8>)
 8001226:	4916      	ldr	r1, [pc, #88]	; (8001280 <main+0xf4>)
 8001228:	4816      	ldr	r0, [pc, #88]	; (8001284 <main+0xf8>)
 800122a:	f006 fb09 	bl	8007840 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800122e:	f006 fae1 	bl	80077f4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8001232:	e7fe      	b.n	8001232 <main+0xa6>
 8001234:	200001a8 	.word	0x200001a8
 8001238:	0800b254 	.word	0x0800b254
 800123c:	0800b258 	.word	0x0800b258
 8001240:	2000015c 	.word	0x2000015c
 8001244:	0800b36c 	.word	0x0800b36c
 8001248:	08001c09 	.word	0x08001c09
 800124c:	2000027c 	.word	0x2000027c
 8001250:	0800b278 	.word	0x0800b278
 8001254:	080018c5 	.word	0x080018c5
 8001258:	0800b280 	.word	0x0800b280
 800125c:	080019fd 	.word	0x080019fd
 8001260:	20000288 	.word	0x20000288
 8001264:	0800b390 	.word	0x0800b390
 8001268:	0800b28c 	.word	0x0800b28c
 800126c:	08001989 	.word	0x08001989
 8001270:	20000280 	.word	0x20000280
 8001274:	0800b298 	.word	0x0800b298
 8001278:	08001909 	.word	0x08001909
 800127c:	20000284 	.word	0x20000284
 8001280:	0800b2a4 	.word	0x0800b2a4
 8001284:	08001ab9 	.word	0x08001ab9

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b096      	sub	sp, #88	; 0x58
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	2244      	movs	r2, #68	; 0x44
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f009 f905 	bl	800a4a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ae:	f002 fecd 	bl	800404c <HAL_PWREx_ControlVoltageScaling>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012b8:	f000 fce8 	bl	8001c8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012bc:	2302      	movs	r3, #2
 80012be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c6:	2310      	movs	r3, #16
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ca:	2302      	movs	r3, #2
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ce:	2302      	movs	r3, #2
 80012d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012d6:	230a      	movs	r3, #10
 80012d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012da:	2307      	movs	r3, #7
 80012dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012de:	2302      	movs	r3, #2
 80012e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 ff04 	bl	80040f8 <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012f6:	f000 fcc9 	bl	8001c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fe:	2303      	movs	r3, #3
 8001300:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800130e:	463b      	mov	r3, r7
 8001310:	2104      	movs	r1, #4
 8001312:	4618      	mov	r0, r3
 8001314:	f003 facc 	bl	80048b0 <HAL_RCC_ClockConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800131e:	f000 fcb5 	bl	8001c8c <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3758      	adds	r7, #88	; 0x58
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001332:	463b      	mov	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001342:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <MX_ADC2_Init+0xbc>)
 8001344:	4a29      	ldr	r2, [pc, #164]	; (80013ec <MX_ADC2_Init+0xc0>)
 8001346:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <MX_ADC2_Init+0xbc>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_6B;
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <MX_ADC2_Init+0xbc>)
 8001350:	2218      	movs	r2, #24
 8001352:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <MX_ADC2_Init+0xbc>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <MX_ADC2_Init+0xbc>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <MX_ADC2_Init+0xbc>)
 8001362:	2204      	movs	r2, #4
 8001364:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_ADC2_Init+0xbc>)
 8001368:	2200      	movs	r2, #0
 800136a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_ADC2_Init+0xbc>)
 800136e:	2200      	movs	r2, #0
 8001370:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_ADC2_Init+0xbc>)
 8001374:	2201      	movs	r2, #1
 8001376:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_ADC2_Init+0xbc>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_ADC2_Init+0xbc>)
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_ADC2_Init+0xbc>)
 8001388:	2200      	movs	r2, #0
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_ADC2_Init+0xbc>)
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_ADC2_Init+0xbc>)
 8001396:	2200      	movs	r2, #0
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_ADC2_Init+0xbc>)
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013a2:	4811      	ldr	r0, [pc, #68]	; (80013e8 <MX_ADC2_Init+0xbc>)
 80013a4:	f001 fa4a 	bl	800283c <HAL_ADC_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80013ae:	f000 fc6d 	bl	8001c8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_ADC2_Init+0xc4>)
 80013b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b6:	2306      	movs	r3, #6
 80013b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013be:	237f      	movs	r3, #127	; 0x7f
 80013c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013c2:	2304      	movs	r3, #4
 80013c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_ADC2_Init+0xbc>)
 80013d0:	f001 fd24 	bl	8002e1c <HAL_ADC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80013da:	f000 fc57 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000098 	.word	0x20000098
 80013ec:	50040100 	.word	0x50040100
 80013f0:	14f00020 	.word	0x14f00020

080013f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2224      	movs	r2, #36	; 0x24
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f009 f850 	bl	800a4a6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_DAC1_Init+0x5c>)
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <MX_DAC1_Init+0x60>)
 800140a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800140c:	4810      	ldr	r0, [pc, #64]	; (8001450 <MX_DAC1_Init+0x5c>)
 800140e:	f002 fa5f 	bl	80038d0 <HAL_DAC_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001418:	f000 fc38 	bl	8001c8c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2210      	movs	r2, #16
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <MX_DAC1_Init+0x5c>)
 8001438:	f002 fade 	bl	80039f8 <HAL_DAC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001442:	f000 fc23 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	; 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200000fc 	.word	0x200000fc
 8001454:	40007400 	.word	0x40007400

08001458 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b096      	sub	sp, #88	; 0x58
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	222c      	movs	r2, #44	; 0x2c
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f009 f80e 	bl	800a4a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800148a:	4b39      	ldr	r3, [pc, #228]	; (8001570 <MX_TIM1_Init+0x118>)
 800148c:	4a39      	ldr	r2, [pc, #228]	; (8001574 <MX_TIM1_Init+0x11c>)
 800148e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001490:	4b37      	ldr	r3, [pc, #220]	; (8001570 <MX_TIM1_Init+0x118>)
 8001492:	2208      	movs	r2, #8
 8001494:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <MX_TIM1_Init+0x118>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <MX_TIM1_Init+0x118>)
 800149e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b32      	ldr	r3, [pc, #200]	; (8001570 <MX_TIM1_Init+0x118>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <MX_TIM1_Init+0x118>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <MX_TIM1_Init+0x118>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014b6:	482e      	ldr	r0, [pc, #184]	; (8001570 <MX_TIM1_Init+0x118>)
 80014b8:	f004 f9d4 	bl	8005864 <HAL_TIM_PWM_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014c2:	f000 fbe3 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d6:	4619      	mov	r1, r3
 80014d8:	4825      	ldr	r0, [pc, #148]	; (8001570 <MX_TIM1_Init+0x118>)
 80014da:	f005 fa59 	bl	8006990 <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014e4:	f000 fbd2 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e8:	2360      	movs	r3, #96	; 0x60
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 16000;
 80014ec:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f2:	2300      	movs	r3, #0
 80014f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150a:	2200      	movs	r2, #0
 800150c:	4619      	mov	r1, r3
 800150e:	4818      	ldr	r0, [pc, #96]	; (8001570 <MX_TIM1_Init+0x118>)
 8001510:	f004 fc08 	bl	8005d24 <HAL_TIM_PWM_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800151a:	f000 fbb7 	bl	8001c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001536:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4807      	ldr	r0, [pc, #28]	; (8001570 <MX_TIM1_Init+0x118>)
 8001554:	f005 faa4 	bl	8006aa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800155e:	f000 fb95 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <MX_TIM1_Init+0x118>)
 8001564:	f000 fcc6 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 8001568:	bf00      	nop
 800156a:	3758      	adds	r7, #88	; 0x58
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000110 	.word	0x20000110
 8001574:	40012c00 	.word	0x40012c00

08001578 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <MX_TIM4_Init+0xe8>)
 80015ac:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <MX_TIM4_Init+0xec>)
 80015ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <MX_TIM4_Init+0xe8>)
 80015b2:	2208      	movs	r2, #8
 80015b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <MX_TIM4_Init+0xe8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <MX_TIM4_Init+0xe8>)
 80015be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <MX_TIM4_Init+0xe8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b25      	ldr	r3, [pc, #148]	; (8001660 <MX_TIM4_Init+0xe8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015d0:	4823      	ldr	r0, [pc, #140]	; (8001660 <MX_TIM4_Init+0xe8>)
 80015d2:	f004 f87f 	bl	80056d4 <HAL_TIM_Base_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80015dc:	f000 fb56 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ea:	4619      	mov	r1, r3
 80015ec:	481c      	ldr	r0, [pc, #112]	; (8001660 <MX_TIM4_Init+0xe8>)
 80015ee:	f004 fcad 	bl	8005f4c <HAL_TIM_ConfigClockSource>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80015f8:	f000 fb48 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015fc:	4818      	ldr	r0, [pc, #96]	; (8001660 <MX_TIM4_Init+0xe8>)
 80015fe:	f004 f931 	bl	8005864 <HAL_TIM_PWM_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001608:	f000 fb40 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <MX_TIM4_Init+0xe8>)
 800161c:	f005 f9b8 	bl	8006990 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001626:	f000 fb31 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162a:	2360      	movs	r3, #96	; 0x60
 800162c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000;
 800162e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001632:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001634:	2302      	movs	r3, #2
 8001636:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	4619      	mov	r1, r3
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <MX_TIM4_Init+0xe8>)
 8001644:	f004 fb6e 	bl	8005d24 <HAL_TIM_PWM_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800164e:	f000 fb1d 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <MX_TIM4_Init+0xe8>)
 8001654:	f000 fc4e 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 8001658:	bf00      	nop
 800165a:	3738      	adds	r7, #56	; 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000015c 	.word	0x2000015c
 8001664:	40000800 	.word	0x40000800

08001668 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_TIM17_Init+0x44>)
 800166e:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <MX_TIM17_Init+0x48>)
 8001670:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_TIM17_Init+0x44>)
 8001674:	f240 321f 	movw	r2, #799	; 0x31f
 8001678:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_TIM17_Init+0x44>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_TIM17_Init+0x44>)
 8001682:	2264      	movs	r2, #100	; 0x64
 8001684:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_TIM17_Init+0x44>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <MX_TIM17_Init+0x44>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_TIM17_Init+0x44>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_TIM17_Init+0x44>)
 800169a:	f004 f81b 	bl	80056d4 <HAL_TIM_Base_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80016a4:	f000 faf2 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200001a8 	.word	0x200001a8
 80016b0:	40014800 	.word	0x40014800

080016b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_USART2_UART_Init+0x58>)
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <MX_USART2_UART_Init+0x5c>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <MX_USART2_UART_Init+0x58>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART2_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_USART2_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART2_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART2_UART_Init+0x58>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART2_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART2_UART_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART2_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART2_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART2_UART_Init+0x58>)
 80016f8:	f005 fa6e 	bl	8006bd8 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001702:	f000 fac3 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200001f4 	.word	0x200001f4
 8001710:	40004400 	.word	0x40004400

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a62      	ldr	r2, [pc, #392]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b60      	ldr	r3, [pc, #384]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	4a5c      	ldr	r2, [pc, #368]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174e:	4b5a      	ldr	r3, [pc, #360]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a56      	ldr	r2, [pc, #344]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a50      	ldr	r2, [pc, #320]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <MX_GPIO_Init+0x1a4>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D2_Pin|SevenSeg_CLK_Pin|SevenSeg_DATA_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001794:	f002 fc02 	bl	8003f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2120      	movs	r1, #32
 800179c:	4847      	ldr	r0, [pc, #284]	; (80018bc <MX_GPIO_Init+0x1a8>)
 800179e:	f002 fbfd 	bl	8003f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4841      	ldr	r0, [pc, #260]	; (80018c0 <MX_GPIO_Init+0x1ac>)
 80017ba:	f002 fa45 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 80017be:	2302      	movs	r3, #2
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017c2:	230b      	movs	r3, #11
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	483b      	ldr	r0, [pc, #236]	; (80018c0 <MX_GPIO_Init+0x1ac>)
 80017d2:	f002 fa39 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_1_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin;
 80017d6:	2302      	movs	r3, #2
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_1_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ee:	f002 fa2b 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 80017f2:	2310      	movs	r3, #16
 80017f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180a:	f002 fa1d 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 800180e:	2340      	movs	r3, #64	; 0x40
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001812:	2311      	movs	r3, #17
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	2301      	movs	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001828:	f002 fa0e 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 800182c:	2301      	movs	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	481f      	ldr	r0, [pc, #124]	; (80018bc <MX_GPIO_Init+0x1a8>)
 8001840:	f002 fa02 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin;
 8001844:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f002 f9f2 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8001864:	2320      	movs	r3, #32
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4810      	ldr	r0, [pc, #64]	; (80018bc <MX_GPIO_Init+0x1a8>)
 800187c:	f002 f9e4 	bl	8003c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2105      	movs	r1, #5
 8001884:	2007      	movs	r0, #7
 8001886:	f001 fff9 	bl	800387c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800188a:	2007      	movs	r0, #7
 800188c:	f002 f812 	bl	80038b4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2105      	movs	r1, #5
 8001894:	200a      	movs	r0, #10
 8001896:	f001 fff1 	bl	800387c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800189a:	200a      	movs	r0, #10
 800189c:	f002 f80a 	bl	80038b4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2105      	movs	r1, #5
 80018a4:	2028      	movs	r0, #40	; 0x28
 80018a6:	f001 ffe9 	bl	800387c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018aa:	2028      	movs	r0, #40	; 0x28
 80018ac:	f002 f802 	bl	80038b4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	; 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	48000400 	.word	0x48000400
 80018c0:	48000800 	.word	0x48000800

080018c4 <D2_Task>:



/************  Task-Creation-Part-B *****************/
void D2_Task(void *argument)
	{ while(true)
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
		{
		  while(!Tasks_Running)
 80018cc:	e008      	b.n	80018e0 <D2_Task+0x1c>
			  {
			  HAL_GPIO_TogglePin(LED_D2_GPIO_Port,LED_D2_Pin);
 80018ce:	2140      	movs	r1, #64	; 0x40
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d4:	f002 fb7a 	bl	8003fcc <HAL_GPIO_TogglePin>
			  osDelay(500);
 80018d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018dc:	f006 f842 	bl	8007964 <osDelay>
		  while(!Tasks_Running)
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <D2_Task+0x40>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f083 0301 	eor.w	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1ef      	bne.n	80018ce <D2_Task+0xa>
			  }
			  HAL_GPIO_WritePin(LED_D2_GPIO_Port,LED_D2_Pin,1);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2140      	movs	r1, #64	; 0x40
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f6:	f002 fb51 	bl	8003f9c <HAL_GPIO_WritePin>
			  osDelay(5);
 80018fa:	2005      	movs	r0, #5
 80018fc:	f006 f832 	bl	8007964 <osDelay>
		  while(!Tasks_Running)
 8001900:	e7ee      	b.n	80018e0 <D2_Task+0x1c>
 8001902:	bf00      	nop
 8001904:	20000004 	.word	0x20000004

08001908 <DAC_Cycle_Task>:
		}
	}

void DAC_Cycle_Task()
	{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
	int increment =  100;
 800190e:	2364      	movs	r3, #100	; 0x64
 8001910:	60bb      	str	r3, [r7, #8]
	int  up = increment;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	607b      	str	r3, [r7, #4]
	int  down = -1 * increment;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	425b      	negs	r3, r3
 800191a:	603b      	str	r3, [r7, #0]
	int  inc = down;  //Start by going down
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	60fb      	str	r3, [r7, #12]
	 * Remember the light is negative true output, so a DAC_value of 0: brightest value
	 * */

	while (true)
		{
		while (Tasks_Running)
 8001920:	e026      	b.n	8001970 <DAC_Cycle_Task+0x68>
			{
			DAC_value = DAC_value + inc;
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <DAC_Cycle_Task+0x74>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <DAC_Cycle_Task+0x74>)
 800192c:	6013      	str	r3, [r2, #0]
			if (DAC_value <= 0 )
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <DAC_Cycle_Task+0x74>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	dc04      	bgt.n	8001940 <DAC_Cycle_Task+0x38>
				{
				DAC_value = 0;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <DAC_Cycle_Task+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
				inc = up;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60fb      	str	r3, [r7, #12]
				}
			if (DAC_value >= 4096)
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <DAC_Cycle_Task+0x74>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001948:	db05      	blt.n	8001956 <DAC_Cycle_Task+0x4e>
				{
				DAC_value = 4000;
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <DAC_Cycle_Task+0x74>)
 800194c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001950:	601a      	str	r2, [r3, #0]
				inc = down;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	60fb      	str	r3, [r7, #12]
				}
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (DAC_value & 0xfff));
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <DAC_Cycle_Task+0x74>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195e:	2200      	movs	r2, #0
 8001960:	2110      	movs	r1, #16
 8001962:	4807      	ldr	r0, [pc, #28]	; (8001980 <DAC_Cycle_Task+0x78>)
 8001964:	f002 f823 	bl	80039ae <HAL_DAC_SetValue>
			// printf("DAC Value is: %i \n\r",DAC_value);
			osDelay(300);
 8001968:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800196c:	f005 fffa 	bl	8007964 <osDelay>
		while (Tasks_Running)
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <DAC_Cycle_Task+0x7c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1d4      	bne.n	8001922 <DAC_Cycle_Task+0x1a>
 8001978:	e7fa      	b.n	8001970 <DAC_Cycle_Task+0x68>
 800197a:	bf00      	nop
 800197c:	20000000 	.word	0x20000000
 8001980:	200000fc 	.word	0x200000fc
 8001984:	20000004 	.word	0x20000004

08001988 <Sample_Print_POT_ADC_Task>:
			}
		}
	}

void Sample_Print_POT_ADC_Task()
	{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
	uint16_t current_sample = 1000;
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	81fb      	strh	r3, [r7, #14]
	float max_reference_voltage = 5.0;
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <Sample_Print_POT_ADC_Task+0x68>)
 8001996:	60bb      	str	r3, [r7, #8]
	// read this from the configuration of the ADC
	int bits_per_sample = (((ADC2->CFGR && 0xc)>>2) * 2) + 6;	// ADC config register [3:2] defines 6,8,10, or 12-bit resolution
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <Sample_Print_POT_ADC_Task+0x6c>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <Sample_Print_POT_ADC_Task+0x1c>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <Sample_Print_POT_ADC_Task+0x1e>
 80019a4:	2300      	movs	r3, #0
 80019a6:	109b      	asrs	r3, r3, #2
 80019a8:	3303      	adds	r3, #3
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	607b      	str	r3, [r7, #4]
	int samples = 1 << bits_per_sample;		//power of 2
 80019ae:	2201      	movs	r2, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	603b      	str	r3, [r7, #0]

	while(true)
		{
		current_sample = Poll_POT_ADC_Value();
 80019b8:	f000 f946 	bl	8001c48 <Poll_POT_ADC_Value>
 80019bc:	4603      	mov	r3, r0
 80019be:	81fb      	strh	r3, [r7, #14]
		ADC_voltage = ((float)current_sample/(float)samples * max_reference_voltage);
 80019c0:	89fb      	ldrh	r3, [r7, #14]
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <Sample_Print_POT_ADC_Task+0x70>)
 80019e2:	edc3 7a00 	vstr	s15, [r3]
		osDelay(1000);
 80019e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ea:	f005 ffbb 	bl	8007964 <osDelay>
		current_sample = Poll_POT_ADC_Value();
 80019ee:	e7e3      	b.n	80019b8 <Sample_Print_POT_ADC_Task+0x30>
 80019f0:	40a00000 	.word	0x40a00000
 80019f4:	50040100 	.word	0x50040100
 80019f8:	20000290 	.word	0x20000290

080019fc <PWM_Brightness_Task>:
		}
	}

void PWM_Brightness_Task(void *arguments)
	{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
		int percent_per_step = 5;
 8001a04:	2305      	movs	r3, #5
 8001a06:	613b      	str	r3, [r7, #16]
		// int full_count =  TIM15->ARR;		//Get the top range from what's set in the init.
		int full_count =  TIM4->ARR;		//Get the top range from what's set in the init.
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <PWM_Brightness_Task+0x88>)
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	60fb      	str	r3, [r7, #12]
		bool count_up = true;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
		uint16_t ccr1 = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	817b      	strh	r3, [r7, #10]
		while(true)
		{
			while (Tasks_Running)
 8001a16:	e02f      	b.n	8001a78 <PWM_Brightness_Task+0x7c>
				{
				ccr1 = (uint16_t) duty_cycle_percent * full_count / 100;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <PWM_Brightness_Task+0x8c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a19      	ldr	r2, [pc, #100]	; (8001a8c <PWM_Brightness_Task+0x90>)
 8001a28:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2c:	1152      	asrs	r2, r2, #5
 8001a2e:	17db      	asrs	r3, r3, #31
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	817b      	strh	r3, [r7, #10]
				//TIM15->CCR1 = ccr1;		// This is the limit that turns on the PWM
				TIM4->CCR1 = ccr1;		// This is the limit that turns on the PWM
 8001a34:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <PWM_Brightness_Task+0x88>)
 8001a36:	897b      	ldrh	r3, [r7, #10]
 8001a38:	6353      	str	r3, [r2, #52]	; 0x34
				if (count_up)
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00c      	beq.n	8001a5a <PWM_Brightness_Task+0x5e>
					{
					duty_cycle_percent += percent_per_step;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <PWM_Brightness_Task+0x8c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a0f      	ldr	r2, [pc, #60]	; (8001a88 <PWM_Brightness_Task+0x8c>)
 8001a4a:	6013      	str	r3, [r2, #0]
					if (duty_cycle_percent >=100) count_up = false;
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <PWM_Brightness_Task+0x8c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b63      	cmp	r3, #99	; 0x63
 8001a52:	dd0e      	ble.n	8001a72 <PWM_Brightness_Task+0x76>
 8001a54:	2300      	movs	r3, #0
 8001a56:	75fb      	strb	r3, [r7, #23]
 8001a58:	e00b      	b.n	8001a72 <PWM_Brightness_Task+0x76>
					} else
					{
					duty_cycle_percent -= percent_per_step;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <PWM_Brightness_Task+0x8c>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <PWM_Brightness_Task+0x8c>)
 8001a64:	6013      	str	r3, [r2, #0]
					if (duty_cycle_percent <=0) count_up = true;
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <PWM_Brightness_Task+0x8c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	dc01      	bgt.n	8001a72 <PWM_Brightness_Task+0x76>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	75fb      	strb	r3, [r7, #23]
					}
				osDelay(100);
 8001a72:	2064      	movs	r0, #100	; 0x64
 8001a74:	f005 ff76 	bl	8007964 <osDelay>
			while (Tasks_Running)
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <PWM_Brightness_Task+0x94>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1cb      	bne.n	8001a18 <PWM_Brightness_Task+0x1c>
 8001a80:	e7fa      	b.n	8001a78 <PWM_Brightness_Task+0x7c>
 8001a82:	bf00      	nop
 8001a84:	40000800 	.word	0x40000800
 8001a88:	20000294 	.word	0x20000294
 8001a8c:	51eb851f 	.word	0x51eb851f
 8001a90:	20000004 	.word	0x20000004

08001a94 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001a9c:	1d39      	adds	r1, r7, #4
 8001a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <__io_putchar+0x20>)
 8001aa6:	f005 f8e5 	bl	8006c74 <HAL_UART_Transmit>

  return ch;
 8001aaa:	687b      	ldr	r3, [r7, #4]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200001f4 	.word	0x200001f4

08001ab8 <Do_SevenSeg_Display>:

void Do_SevenSeg_Display()
	{ /* Just cycle thru the modes when there's a button push */
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	while (true)
		{
		switch (display_mode)
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <Do_SevenSeg_Display+0x50>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d015      	beq.n	8001af0 <Do_SevenSeg_Display+0x38>
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	dc1a      	bgt.n	8001afe <Do_SevenSeg_Display+0x46>
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <Do_SevenSeg_Display+0x1a>
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d008      	beq.n	8001ae2 <Do_SevenSeg_Display+0x2a>
 8001ad0:	e015      	b.n	8001afe <Do_SevenSeg_Display+0x46>
			{
			case ADC_mode:
				disp_adc_on_7seg(ADC_voltage);
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <Do_SevenSeg_Display+0x54>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	f7ff fa74 	bl	8000fc8 <disp_adc_on_7seg>
				break;
 8001ae0:	e00d      	b.n	8001afe <Do_SevenSeg_Display+0x46>
			case PWM_mode:
				// Show the duty cycle percentage
			    MultiFunctionShield_Display_PWM(duty_cycle_percent);
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <Do_SevenSeg_Display+0x58>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f9ef 	bl	8000ecc <MultiFunctionShield_Display_PWM>
				break;
 8001aee:	e006      	b.n	8001afe <Do_SevenSeg_Display+0x46>
			case DAC_mode:
			    MultiFunctionShield_Display(DAC_value);
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <Do_SevenSeg_Display+0x5c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f8ce 	bl	8000c98 <MultiFunctionShield_Display>
				break;
 8001afc:	bf00      	nop
			}
		osDelay(20);
 8001afe:	2014      	movs	r0, #20
 8001b00:	f005 ff30 	bl	8007964 <osDelay>
		switch (display_mode)
 8001b04:	e7da      	b.n	8001abc <Do_SevenSeg_Display+0x4>
 8001b06:	bf00      	nop
 8001b08:	2000028c 	.word	0x2000028c
 8001b0c:	20000290 	.word	0x20000290
 8001b10:	20000294 	.word	0x20000294
 8001b14:	20000000 	.word	0x20000000

08001b18 <HAL_GPIO_EXTI_Callback>:
		}
	}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
	// All three buttons generate GPIO  interrupts
	switch(GPIO_Pin)
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d01f      	beq.n	8001b68 <HAL_GPIO_EXTI_Callback+0x50>
 8001b28:	2b10      	cmp	r3, #16
 8001b2a:	dc51      	bgt.n	8001bd0 <HAL_GPIO_EXTI_Callback+0xb8>
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d054      	beq.n	8001bda <HAL_GPIO_EXTI_Callback+0xc2>
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d14d      	bne.n	8001bd0 <HAL_GPIO_EXTI_Callback+0xb8>
	{
	case Button_1_Pin:
		/* Button_1 is the Display Mode switcher.  See the lab description */
		switch (display_mode)
 8001b34:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d00e      	beq.n	8001b5a <HAL_GPIO_EXTI_Callback+0x42>
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	dc10      	bgt.n	8001b62 <HAL_GPIO_EXTI_Callback+0x4a>
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_GPIO_EXTI_Callback+0x32>
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d004      	beq.n	8001b52 <HAL_GPIO_EXTI_Callback+0x3a>
 8001b48:	e00b      	b.n	8001b62 <HAL_GPIO_EXTI_Callback+0x4a>
		{
		case ADC_mode:
			display_mode = PWM_mode;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
			break;
 8001b50:	e009      	b.n	8001b66 <HAL_GPIO_EXTI_Callback+0x4e>
		case PWM_mode:
			display_mode = DAC_mode;
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001b54:	2202      	movs	r2, #2
 8001b56:	701a      	strb	r2, [r3, #0]
			break;
 8001b58:	e005      	b.n	8001b66 <HAL_GPIO_EXTI_Callback+0x4e>
		case DAC_mode:
			display_mode = ADC_mode;
 8001b5a:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
			break;
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_EXTI_Callback+0x4e>
		default: __NOP();
 8001b62:	bf00      	nop
		}
		break;
 8001b64:	e03a      	b.n	8001bdc <HAL_GPIO_EXTI_Callback+0xc4>
 8001b66:	e039      	b.n	8001bdc <HAL_GPIO_EXTI_Callback+0xc4>
	case Button_2_Pin:
		/* Button_2 is the Start/Stop Button. */
			Tasks_Running = !Tasks_Running;
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf14      	ite	ne
 8001b70:	2301      	movne	r3, #1
 8001b72:	2300      	moveq	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f083 0301 	eor.w	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001b84:	701a      	strb	r2, [r3, #0]
		/* If we just went into stop mode, then display some info */
		if (!Tasks_Running)
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	f083 0301 	eor.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d019      	beq.n	8001bc8 <HAL_GPIO_EXTI_Callback+0xb0>
			{
			printf("STOPPED  D2 Blinking\n\r   PWM  Value: %%%d\n\r   CCRL Value: %d\n\r",
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_GPIO_EXTI_Callback+0xd4>)
 8001b96:	6819      	ldr	r1, [r3, #0]
				duty_cycle_percent,
				((uint16_t) TIM4->ARR / 100 * duty_cycle_percent ));
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	095b      	lsrs	r3, r3, #5
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
			printf("STOPPED  D2 Blinking\n\r   PWM  Value: %%%d\n\r   CCRL Value: %d\n\r",
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_GPIO_EXTI_Callback+0xd4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4810      	ldr	r0, [pc, #64]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001bb6:	f008 fc21 	bl	800a3fc <iprintf>
				// ccr1 = (uint16_t) duty_cycle_percent * full_count / 100;
			printf("   DAC 12-bit :0x%x\n\r",DAC_value);
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480f      	ldr	r0, [pc, #60]	; (8001c00 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001bc2:	f008 fc1b 	bl	800a3fc <iprintf>
			} else
			printf("RE-STARTING\n\r\r");
		break;
 8001bc6:	e009      	b.n	8001bdc <HAL_GPIO_EXTI_Callback+0xc4>
			printf("RE-STARTING\n\r\r");
 8001bc8:	480e      	ldr	r0, [pc, #56]	; (8001c04 <HAL_GPIO_EXTI_Callback+0xec>)
 8001bca:	f008 fc17 	bl	800a3fc <iprintf>
		break;
 8001bce:	e005      	b.n	8001bdc <HAL_GPIO_EXTI_Callback+0xc4>
	case Button_3_Pin:
		break;
	default: __NOP();
 8001bd0:	bf00      	nop
	HAL_Delay(70);  //* Time to make sure the switch is debounced
 8001bd2:	2046      	movs	r0, #70	; 0x46
 8001bd4:	f000 fc2a 	bl	800242c <HAL_Delay>
	}
}
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_EXTI_Callback+0xc4>
		break;
 8001bda:	bf00      	nop
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000028c 	.word	0x2000028c
 8001be8:	20000004 	.word	0x20000004
 8001bec:	20000294 	.word	0x20000294
 8001bf0:	40000800 	.word	0x40000800
 8001bf4:	51eb851f 	.word	0x51eb851f
 8001bf8:	0800b2dc 	.word	0x0800b2dc
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	0800b31c 	.word	0x0800b31c
 8001c04:	0800b334 	.word	0x0800b334

08001c08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f005 fea7 	bl	8007964 <osDelay>
 8001c16:	e7fb      	b.n	8001c10 <StartDefaultTask+0x8>

08001c18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d101      	bne.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x14>
 8001c28:	f7ff fa7e 	bl	8001128 <MultiFunctionShield__ISRFunc>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d101      	bne.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8001c36:	f000 fbd9 	bl	80023ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200001a8 	.word	0x200001a8

08001c48 <Poll_POT_ADC_Value>:

uint16_t Poll_POT_ADC_Value(void)
	{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
	uint16_t  ADC_Result;
	// Start ADC Conversion of the 10K potentiometer
	MX_ADC2_Init();
 8001c4e:	f7ff fb6d 	bl	800132c <MX_ADC2_Init>
	HAL_ADC_Start(&hadc2);
 8001c52:	480c      	ldr	r0, [pc, #48]	; (8001c84 <Poll_POT_ADC_Value+0x3c>)
 8001c54:	f000 ff42 	bl	8002adc <HAL_ADC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001c58:	2110      	movs	r1, #16
 8001c5a:	480b      	ldr	r0, [pc, #44]	; (8001c88 <Poll_POT_ADC_Value+0x40>)
 8001c5c:	f001 fe5a 	bl	8003914 <HAL_DAC_Start>

	// The conversion should be less than a millisec
	// so it'll be done while we're waiting for the next number to show
	osDelay(10);
 8001c60:	200a      	movs	r0, #10
 8001c62:	f005 fe7f 	bl	8007964 <osDelay>

   // Poll ADC2 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001c66:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <Poll_POT_ADC_Value+0x3c>)
 8001c6c:	f000 fff0 	bl	8002c50 <HAL_ADC_PollForConversion>
   // Read The ADC Conversion Result & Map It To PWM DutyCycle
	ADC_Result = HAL_ADC_GetValue(&hadc2);
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <Poll_POT_ADC_Value+0x3c>)
 8001c72:	f001 f8c5 	bl	8002e00 <HAL_ADC_GetValue>
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
	return ADC_Result;
 8001c7a:	88fb      	ldrh	r3, [r7, #6]

  /* USER CODE END Callback 1 */
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000098 	.word	0x20000098
 8001c88:	200000fc 	.word	0x200000fc

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>
	...

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	210f      	movs	r1, #15
 8001cd2:	f06f 0001 	mvn.w	r0, #1
 8001cd6:	f001 fdd1 	bl	800387c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b0ac      	sub	sp, #176	; 0xb0
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2288      	movs	r2, #136	; 0x88
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f008 fbcc 	bl	800a4a6 <memset>
  if(hadc->Instance==ADC2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <HAL_ADC_MspInit+0xc8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d147      	bne.n	8001da8 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d1c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001d2e:	2308      	movs	r3, #8
 8001d30:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d32:	2307      	movs	r3, #7
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d36:	2302      	movs	r3, #2
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001d3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 f807 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001d54:	f7ff ff9a 	bl	8001c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_ADC_MspInit+0xcc>)
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <HAL_ADC_MspInit+0xcc>)
 8001d5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_ADC_MspInit+0xcc>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_ADC_MspInit+0xcc>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <HAL_ADC_MspInit+0xcc>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_ADC_MspInit+0xcc>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d8e:	230b      	movs	r3, #11
 8001d90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da4:	f001 ff50 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	37b0      	adds	r7, #176	; 0xb0
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	50040100 	.word	0x50040100
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <HAL_DAC_MspInit+0x74>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d124      	bne.n	8001e24 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_DAC_MspInit+0x78>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_DAC_MspInit+0x78>)
 8001de0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001de4:	6593      	str	r3, [r2, #88]	; 0x58
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_DAC_MspInit+0x78>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_DAC_MspInit+0x78>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_DAC_MspInit+0x78>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_DAC_MspInit+0x78>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC2_LED_D1_Pin;
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC2_LED_D1_GPIO_Port, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e20:	f001 ff12 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40007400 	.word	0x40007400
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_TIM_PWM_MspInit+0x44>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d113      	bne.n	8001e6e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_TIM_PWM_MspInit+0x48>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <HAL_TIM_PWM_MspInit+0x48>)
 8001e4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e50:	6613      	str	r3, [r2, #96]	; 0x60
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_TIM_PWM_MspInit+0x48>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2105      	movs	r1, #5
 8001e62:	201a      	movs	r0, #26
 8001e64:	f001 fd0a 	bl	800387c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e68:	201a      	movs	r0, #26
 8001e6a:	f001 fd23 	bl	80038b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40012c00 	.word	0x40012c00
 8001e7c:	40021000 	.word	0x40021000

08001e80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a16      	ldr	r2, [pc, #88]	; (8001ee8 <HAL_TIM_Base_MspInit+0x68>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10c      	bne.n	8001eac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_TIM_Base_MspInit+0x6c>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <HAL_TIM_Base_MspInit+0x6c>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_TIM_Base_MspInit+0x6c>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001eaa:	e018      	b.n	8001ede <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <HAL_TIM_Base_MspInit+0x70>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d113      	bne.n	8001ede <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_TIM_Base_MspInit+0x6c>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <HAL_TIM_Base_MspInit+0x6c>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_TIM_Base_MspInit+0x6c>)
 8001ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2105      	movs	r1, #5
 8001ed2:	201a      	movs	r0, #26
 8001ed4:	f001 fcd2 	bl	800387c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001ed8:	201a      	movs	r0, #26
 8001eda:	f001 fceb 	bl	80038b4 <HAL_NVIC_EnableIRQ>
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40000800 	.word	0x40000800
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40014800 	.word	0x40014800

08001ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <HAL_TIM_MspPostInit+0xb4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d11d      	bne.n	8001f52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_TIM_MspPostInit+0xb8>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	4a24      	ldr	r2, [pc, #144]	; (8001fac <HAL_TIM_MspPostInit+0xb8>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <HAL_TIM_MspPostInit+0xb8>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = LED_D3_Pin;
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f32:	2312      	movs	r3, #18
 8001f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_D3_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4c:	f001 fe7c 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f50:	e026      	b.n	8001fa0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM4)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <HAL_TIM_MspPostInit+0xbc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d121      	bne.n	8001fa0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_TIM_MspPostInit+0xb8>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <HAL_TIM_MspPostInit+0xb8>)
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_TIM_MspPostInit+0xb8>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_D4_PWM_Pin;
 8001f74:	2340      	movs	r3, #64	; 0x40
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f78:	2312      	movs	r3, #18
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f84:	2302      	movs	r3, #2
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_D4_PWM_GPIO_Port, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <HAL_TIM_MspPostInit+0xc0>)
 8001f90:	f001 fe5a 	bl	8003c48 <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_TIM_MspPostInit+0xc4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_TIM_MspPostInit+0xc4>)
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9e:	6053      	str	r3, [r2, #4]
}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40000800 	.word	0x40000800
 8001fb4:	48000400 	.word	0x48000400
 8001fb8:	40010000 	.word	0x40010000

08001fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0ac      	sub	sp, #176	; 0xb0
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2288      	movs	r2, #136	; 0x88
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f008 fa62 	bl	800a4a6 <memset>
  if(huart->Instance==USART2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a21      	ldr	r2, [pc, #132]	; (800206c <HAL_UART_MspInit+0xb0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d13b      	bne.n	8002064 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 feaf 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002004:	f7ff fe42 	bl	8001c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_UART_MspInit+0xb4>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a18      	ldr	r2, [pc, #96]	; (8002070 <HAL_UART_MspInit+0xb4>)
 800200e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_UART_MspInit+0xb4>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_UART_MspInit+0xb4>)
 8002022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002024:	4a12      	ldr	r2, [pc, #72]	; (8002070 <HAL_UART_MspInit+0xb4>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_UART_MspInit+0xb4>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002038:	230c      	movs	r3, #12
 800203a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002050:	2307      	movs	r3, #7
 8002052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800205a:	4619      	mov	r1, r3
 800205c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002060:	f001 fdf2 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	37b0      	adds	r7, #176	; 0xb0
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40004400 	.word	0x40004400
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	; 0x38
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002082:	4b34      	ldr	r3, [pc, #208]	; (8002154 <HAL_InitTick+0xe0>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	4a33      	ldr	r2, [pc, #204]	; (8002154 <HAL_InitTick+0xe0>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
 800208e:	4b31      	ldr	r3, [pc, #196]	; (8002154 <HAL_InitTick+0xe0>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800209a:	f107 0210 	add.w	r2, r7, #16
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 fdc7 	bl	8004c38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d103      	bne.n	80020bc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020b4:	f002 fd94 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 80020b8:	6378      	str	r0, [r7, #52]	; 0x34
 80020ba:	e004      	b.n	80020c6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020bc:	f002 fd90 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 80020c0:	4603      	mov	r3, r0
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c8:	4a23      	ldr	r2, [pc, #140]	; (8002158 <HAL_InitTick+0xe4>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0c9b      	lsrs	r3, r3, #18
 80020d0:	3b01      	subs	r3, #1
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_InitTick+0xe8>)
 80020d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <HAL_InitTick+0xe8>)
 80020de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020e2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_InitTick+0xe8>)
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_InitTick+0xe8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_InitTick+0xe8>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_InitTick+0xe8>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80020fc:	4817      	ldr	r0, [pc, #92]	; (800215c <HAL_InitTick+0xe8>)
 80020fe:	f003 fae9 	bl	80056d4 <HAL_TIM_Base_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002108:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800210c:	2b00      	cmp	r3, #0
 800210e:	d11b      	bne.n	8002148 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002110:	4812      	ldr	r0, [pc, #72]	; (800215c <HAL_InitTick+0xe8>)
 8002112:	f003 fb37 	bl	8005784 <HAL_TIM_Base_Start_IT>
 8002116:	4603      	mov	r3, r0
 8002118:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800211c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002120:	2b00      	cmp	r3, #0
 8002122:	d111      	bne.n	8002148 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002124:	201c      	movs	r0, #28
 8002126:	f001 fbc5 	bl	80038b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b0f      	cmp	r3, #15
 800212e:	d808      	bhi.n	8002142 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002130:	2200      	movs	r2, #0
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	201c      	movs	r0, #28
 8002136:	f001 fba1 	bl	800387c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800213a:	4a09      	ldr	r2, [pc, #36]	; (8002160 <HAL_InitTick+0xec>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e002      	b.n	8002148 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002148:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800214c:	4618      	mov	r0, r3
 800214e:	3738      	adds	r7, #56	; 0x38
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	431bde83 	.word	0x431bde83
 800215c:	20000298 	.word	0x20000298
 8002160:	2000000c 	.word	0x2000000c

08002164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <NMI_Handler+0x4>

0800216a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <HardFault_Handler+0x4>

08002170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <MemManage_Handler+0x4>

08002176 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <BusFault_Handler+0x4>

0800217c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <UsageFault_Handler+0x4>

08002182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8002194:	2002      	movs	r0, #2
 8002196:	f001 ff33 	bl	8004000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}

0800219e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 80021a2:	2010      	movs	r0, #16
 80021a4:	f001 ff2c 	bl	8004000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}

080021ac <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80021b2:	f003 fcb5 	bl	8005b20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80021b6:	4803      	ldr	r0, [pc, #12]	; (80021c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80021b8:	f003 fcb2 	bl	8005b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000110 	.word	0x20000110
 80021c4:	200001a8 	.word	0x200001a8

080021c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <TIM2_IRQHandler+0x10>)
 80021ce:	f003 fca7 	bl	8005b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000298 	.word	0x20000298

080021dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80021e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021e4:	f001 ff0c 	bl	8004000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e00a      	b.n	8002214 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021fe:	f3af 8000 	nop.w
 8002202:	4601      	mov	r1, r0
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	b2ca      	uxtb	r2, r1
 800220c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	dbf0      	blt.n	80021fe <_read+0x12>
  }

  return len;
 800221c:	687b      	ldr	r3, [r7, #4]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e009      	b.n	800224c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	60ba      	str	r2, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fc27 	bl	8001a94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	dbf1      	blt.n	8002238 <_write+0x12>
  }
  return len;
 8002254:	687b      	ldr	r3, [r7, #4]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_close>:

int _close(int file)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002286:	605a      	str	r2, [r3, #4]
  return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_isatty>:

int _isatty(int file)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d0:	4a14      	ldr	r2, [pc, #80]	; (8002324 <_sbrk+0x5c>)
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <_sbrk+0x60>)
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <_sbrk+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <_sbrk+0x64>)
 80022e6:	4a12      	ldr	r2, [pc, #72]	; (8002330 <_sbrk+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d207      	bcs.n	8002308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f8:	f008 f97a 	bl	800a5f0 <__errno>
 80022fc:	4603      	mov	r3, r0
 80022fe:	220c      	movs	r2, #12
 8002300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	e009      	b.n	800231c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <_sbrk+0x64>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <_sbrk+0x64>)
 8002318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20018000 	.word	0x20018000
 8002328:	00000400 	.word	0x00000400
 800232c:	200002e4 	.word	0x200002e4
 8002330:	2000d570 	.word	0x2000d570

08002334 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <SystemInit+0x20>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <SystemInit+0x20>)
 8002340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002390 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800235c:	f7ff ffea 	bl	8002334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <LoopForever+0x6>)
  ldr r1, =_edata
 8002362:	490d      	ldr	r1, [pc, #52]	; (8002398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <LoopForever+0xe>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002378:	4c0a      	ldr	r4, [pc, #40]	; (80023a4 <LoopForever+0x16>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002386:	f008 f939 	bl	800a5fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800238a:	f7fe feff 	bl	800118c <main>

0800238e <LoopForever>:

LoopForever:
    b LoopForever
 800238e:	e7fe      	b.n	800238e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002390:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800239c:	0800b440 	.word	0x0800b440
  ldr r2, =_sbss
 80023a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80023a4:	2000d570 	.word	0x2000d570

080023a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC1_2_IRQHandler>
	...

080023ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_Init+0x3c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <HAL_Init+0x3c>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c2:	2003      	movs	r0, #3
 80023c4:	f001 fa4f 	bl	8003866 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023c8:	200f      	movs	r0, #15
 80023ca:	f7ff fe53 	bl	8002074 <HAL_InitTick>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	71fb      	strb	r3, [r7, #7]
 80023d8:	e001      	b.n	80023de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023da:	f7ff fc5d 	bl	8001c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023de:	79fb      	ldrb	r3, [r7, #7]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_IncTick+0x20>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x24>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_IncTick+0x24>)
 80023fe:	6013      	str	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000010 	.word	0x20000010
 8002410:	200002e8 	.word	0x200002e8

08002414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return uwTick;
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_GetTick+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	200002e8 	.word	0x200002e8

0800242c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff ffee 	bl	8002414 <HAL_GetTick>
 8002438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d005      	beq.n	8002452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_Delay+0x44>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002452:	bf00      	nop
 8002454:	f7ff ffde 	bl	8002414 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	429a      	cmp	r2, r3
 8002462:	d8f7      	bhi.n	8002454 <HAL_Delay+0x28>
  {
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000010 	.word	0x20000010

08002474 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3360      	adds	r3, #96	; 0x60
 80024ee:	461a      	mov	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <LL_ADC_SetOffset+0x44>)
 80024fe:	4013      	ands	r3, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	4313      	orrs	r3, r2
 800250c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002514:	bf00      	nop
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	03fff000 	.word	0x03fff000

08002524 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3360      	adds	r3, #96	; 0x60
 8002532:	461a      	mov	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3360      	adds	r3, #96	; 0x60
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	431a      	orrs	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3330      	adds	r3, #48	; 0x30
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	4413      	add	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	211f      	movs	r1, #31
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0e9b      	lsrs	r3, r3, #26
 80025e4:	f003 011f 	and.w	r1, r3, #31
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	431a      	orrs	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3314      	adds	r3, #20
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	0e5b      	lsrs	r3, r3, #25
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	4413      	add	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	0d1b      	lsrs	r3, r3, #20
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2107      	movs	r1, #7
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	401a      	ands	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	0d1b      	lsrs	r3, r3, #20
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	431a      	orrs	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	43db      	mvns	r3, r3
 8002676:	401a      	ands	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 0318 	and.w	r3, r3, #24
 800267e:	4908      	ldr	r1, [pc, #32]	; (80026a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002680:	40d9      	lsrs	r1, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	400b      	ands	r3, r1
 8002686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268a:	431a      	orrs	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	0007ffff 	.word	0x0007ffff

080026a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 031f 	and.w	r3, r3, #31
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6093      	str	r3, [r2, #8]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002714:	d101      	bne.n	800271a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800273c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002764:	d101      	bne.n	800276a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002788:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <LL_ADC_IsEnabled+0x18>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <LL_ADC_IsEnabled+0x1a>
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027da:	f043 0204 	orr.w	r2, r3, #4
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d101      	bne.n	8002806 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b08      	cmp	r3, #8
 8002826:	d101      	bne.n	800282c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e130      	b.n	8002ab8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff fa3f 	bl	8001ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff3f 	bl	8002700 <LL_ADC_IsDeepPowerDownEnabled>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff25 	bl	80026dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff5a 	bl	8002750 <LL_ADC_IsInternalRegulatorEnabled>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d115      	bne.n	80028ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff3e 	bl	8002728 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028ac:	4b84      	ldr	r3, [pc, #528]	; (8002ac0 <HAL_ADC_Init+0x284>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	099b      	lsrs	r3, r3, #6
 80028b2:	4a84      	ldr	r2, [pc, #528]	; (8002ac4 <HAL_ADC_Init+0x288>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	3301      	adds	r3, #1
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f9      	bne.n	80028c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff3c 	bl	8002750 <LL_ADC_IsInternalRegulatorEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10d      	bne.n	80028fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	f043 0210 	orr.w	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff75 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 8002904:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 80c9 	bne.w	8002aa6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 80c5 	bne.w	8002aa6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002924:	f043 0202 	orr.w	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff35 	bl	80027a0 <LL_ADC_IsEnabled>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d115      	bne.n	8002968 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800293c:	4862      	ldr	r0, [pc, #392]	; (8002ac8 <HAL_ADC_Init+0x28c>)
 800293e:	f7ff ff2f 	bl	80027a0 <LL_ADC_IsEnabled>
 8002942:	4604      	mov	r4, r0
 8002944:	4861      	ldr	r0, [pc, #388]	; (8002acc <HAL_ADC_Init+0x290>)
 8002946:	f7ff ff2b 	bl	80027a0 <LL_ADC_IsEnabled>
 800294a:	4603      	mov	r3, r0
 800294c:	431c      	orrs	r4, r3
 800294e:	4860      	ldr	r0, [pc, #384]	; (8002ad0 <HAL_ADC_Init+0x294>)
 8002950:	f7ff ff26 	bl	80027a0 <LL_ADC_IsEnabled>
 8002954:	4603      	mov	r3, r0
 8002956:	4323      	orrs	r3, r4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4619      	mov	r1, r3
 8002962:	485c      	ldr	r0, [pc, #368]	; (8002ad4 <HAL_ADC_Init+0x298>)
 8002964:	f7ff fd86 	bl	8002474 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7e5b      	ldrb	r3, [r3, #25]
 800296c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002972:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002978:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800297e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002986:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d106      	bne.n	80029a4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	3b01      	subs	r3, #1
 800299c:	045b      	lsls	r3, r3, #17
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <HAL_ADC_Init+0x29c>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	69b9      	ldr	r1, [r7, #24]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff1b 	bl	8002814 <LL_ADC_INJ_IsConversionOngoing>
 80029de:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d13d      	bne.n	8002a62 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d13a      	bne.n	8002a62 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029f0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029f8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a08:	f023 0302 	bic.w	r3, r3, #2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	69b9      	ldr	r1, [r7, #24]
 8002a12:	430b      	orrs	r3, r1
 8002a14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d118      	bne.n	8002a52 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a2a:	f023 0304 	bic.w	r3, r3, #4
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a36:	4311      	orrs	r1, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a3c:	4311      	orrs	r1, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a42:	430a      	orrs	r2, r1
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	611a      	str	r2, [r3, #16]
 8002a50:	e007      	b.n	8002a62 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0201 	bic.w	r2, r2, #1
 8002a60:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d10c      	bne.n	8002a84 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	f023 010f 	bic.w	r1, r3, #15
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
 8002a82:	e007      	b.n	8002a94 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 020f 	bic.w	r2, r2, #15
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	f023 0303 	bic.w	r3, r3, #3
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
 8002aa4:	e007      	b.n	8002ab6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0210 	orr.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3724      	adds	r7, #36	; 0x24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}
 8002ac0:	20000008 	.word	0x20000008
 8002ac4:	053e2d63 	.word	0x053e2d63
 8002ac8:	50040000 	.word	0x50040000
 8002acc:	50040100 	.word	0x50040100
 8002ad0:	50040200 	.word	0x50040200
 8002ad4:	50040300 	.word	0x50040300
 8002ad8:	fff0c007 	.word	0xfff0c007

08002adc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ae4:	4857      	ldr	r0, [pc, #348]	; (8002c44 <HAL_ADC_Start+0x168>)
 8002ae6:	f7ff fddd 	bl	80026a4 <LL_ADC_GetMultimode>
 8002aea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fe7c 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 809c 	bne.w	8002c36 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_Start+0x30>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e097      	b.n	8002c3c <HAL_ADC_Start+0x160>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fd73 	bl	8003600 <ADC_Enable>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 8083 	bne.w	8002c2c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_ADC_Start+0x16c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d002      	beq.n	8002b4a <HAL_ADC_Start+0x6e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	e000      	b.n	8002b4c <HAL_ADC_Start+0x70>
 8002b4a:	4b40      	ldr	r3, [pc, #256]	; (8002c4c <HAL_ADC_Start+0x170>)
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d002      	beq.n	8002b5a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d105      	bne.n	8002b66 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b72:	d106      	bne.n	8002b82 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	f023 0206 	bic.w	r2, r3, #6
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b80:	e002      	b.n	8002b88 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	221c      	movs	r2, #28
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	; (8002c48 <HAL_ADC_Start+0x16c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d002      	beq.n	8002ba8 <HAL_ADC_Start+0xcc>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	e000      	b.n	8002baa <HAL_ADC_Start+0xce>
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_ADC_Start+0x170>)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d008      	beq.n	8002bc4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d002      	beq.n	8002bc4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b09      	cmp	r3, #9
 8002bc2:	d114      	bne.n	8002bee <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fded 	bl	80027c6 <LL_ADC_REG_StartConversion>
 8002bec:	e025      	b.n	8002c3a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_ADC_Start+0x16c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d002      	beq.n	8002c0a <HAL_ADC_Start+0x12e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	e000      	b.n	8002c0c <HAL_ADC_Start+0x130>
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_ADC_Start+0x170>)
 8002c0c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00f      	beq.n	8002c3a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
 8002c2a:	e006      	b.n	8002c3a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c34:	e001      	b.n	8002c3a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
 8002c38:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	50040300 	.word	0x50040300
 8002c48:	50040100 	.word	0x50040100
 8002c4c:	50040000 	.word	0x50040000

08002c50 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c5a:	4866      	ldr	r0, [pc, #408]	; (8002df4 <HAL_ADC_PollForConversion+0x1a4>)
 8002c5c:	f7ff fd22 	bl	80026a4 <LL_ADC_GetMultimode>
 8002c60:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d102      	bne.n	8002c70 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e02a      	b.n	8002cc6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d002      	beq.n	8002c82 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	d111      	bne.n	8002ca6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0a4      	b.n	8002dea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ca4:	e00f      	b.n	8002cc6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ca6:	4853      	ldr	r0, [pc, #332]	; (8002df4 <HAL_ADC_PollForConversion+0x1a4>)
 8002ca8:	f7ff fd0a 	bl	80026c0 <LL_ADC_GetMultiDMATransfer>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e093      	b.n	8002dea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002cc6:	f7ff fba5 	bl	8002414 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ccc:	e021      	b.n	8002d12 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d01d      	beq.n	8002d12 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002cd6:	f7ff fb9d 	bl	8002414 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <HAL_ADC_PollForConversion+0x9c>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d112      	bne.n	8002d12 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e06b      	b.n	8002dea <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0d6      	beq.n	8002cce <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fc28 	bl	8002586 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01c      	beq.n	8002d76 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7e5b      	ldrb	r3, [r3, #25]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d118      	bne.n	8002d76 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d111      	bne.n	8002d76 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1f      	ldr	r2, [pc, #124]	; (8002df8 <HAL_ADC_PollForConversion+0x1a8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d002      	beq.n	8002d86 <HAL_ADC_PollForConversion+0x136>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e000      	b.n	8002d88 <HAL_ADC_PollForConversion+0x138>
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_ADC_PollForConversion+0x1ac>)
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d008      	beq.n	8002da2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d002      	beq.n	8002da2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b09      	cmp	r3, #9
 8002da0:	d104      	bne.n	8002dac <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	e00c      	b.n	8002dc6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <HAL_ADC_PollForConversion+0x1a8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d002      	beq.n	8002dbc <HAL_ADC_PollForConversion+0x16c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	e000      	b.n	8002dbe <HAL_ADC_PollForConversion+0x16e>
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_ADC_PollForConversion+0x1ac>)
 8002dbe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d104      	bne.n	8002dd6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e008      	b.n	8002de8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	220c      	movs	r2, #12
 8002de6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	50040300 	.word	0x50040300
 8002df8:	50040100 	.word	0x50040100
 8002dfc:	50040000 	.word	0x50040000

08002e00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b0b6      	sub	sp, #216	; 0xd8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x22>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e3c9      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x7b6>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fccf 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 83aa 	bne.w	80035ac <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d824      	bhi.n	8002eb2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	3b02      	subs	r3, #2
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d81b      	bhi.n	8002eaa <HAL_ADC_ConfigChannel+0x8e>
 8002e72:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <HAL_ADC_ConfigChannel+0x5c>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	08002e89 	.word	0x08002e89
 8002e7c:	08002e91 	.word	0x08002e91
 8002e80:	08002e99 	.word	0x08002e99
 8002e84:	08002ea1 	.word	0x08002ea1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002e88:	230c      	movs	r3, #12
 8002e8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e8e:	e010      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e90:	2312      	movs	r3, #18
 8002e92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e96:	e00c      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002e98:	2318      	movs	r3, #24
 8002e9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e9e:	e008      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ea8:	e003      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002eaa:	2306      	movs	r3, #6
 8002eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002eb0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002ec0:	f7ff fb74 	bl	80025ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fc90 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 8002ece:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fc9c 	bl	8002814 <LL_ADC_INJ_IsConversionOngoing>
 8002edc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f040 81a4 	bne.w	8003232 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 819f 	bne.w	8003232 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6819      	ldr	r1, [r3, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	461a      	mov	r2, r3
 8002f02:	f7ff fb7f 	bl	8002604 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	08db      	lsrs	r3, r3, #3
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d00a      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6919      	ldr	r1, [r3, #16]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f38:	f7ff fad0 	bl	80024dc <LL_ADC_SetOffset>
 8002f3c:	e179      	b.n	8003232 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff faed 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x14e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fae2 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	e01e      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x18c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fad7 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e004      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002f9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x1a4>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0e9b      	lsrs	r3, r3, #26
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	e018      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x1d6>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002fdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	e004      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002fe8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d106      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff faa6 	bl	8002550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fa8a 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8003010:	4603      	mov	r3, r0
 8003012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x214>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2101      	movs	r1, #1
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fa7f 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	0e9b      	lsrs	r3, r3, #26
 800302a:	f003 021f 	and.w	r2, r3, #31
 800302e:	e01e      	b.n	800306e <HAL_ADC_ConfigChannel+0x252>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fa74 	bl	8002524 <LL_ADC_GetOffsetChannel>
 800303c:	4603      	mov	r3, r0
 800303e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800304e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003056:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800305e:	2320      	movs	r3, #32
 8003060:	e004      	b.n	800306c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x26a>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0e9b      	lsrs	r3, r3, #26
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	e018      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x29c>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800309a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800309e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80030a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e004      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80030ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d106      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2101      	movs	r1, #1
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fa43 	bl	8002550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2102      	movs	r1, #2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fa27 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x2da>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2102      	movs	r1, #2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fa1c 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	0e9b      	lsrs	r3, r3, #26
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	e01e      	b.n	8003134 <HAL_ADC_ConfigChannel+0x318>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2102      	movs	r1, #2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fa11 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800311c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003124:	2320      	movs	r3, #32
 8003126:	e004      	b.n	8003132 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003128:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_ADC_ConfigChannel+0x330>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	e014      	b.n	8003176 <HAL_ADC_ConfigChannel+0x35a>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800315a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	e004      	b.n	8003176 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800316c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003176:	429a      	cmp	r2, r3
 8003178:	d106      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff f9e4 	bl	8002550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2103      	movs	r1, #3
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f9c8 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x398>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2103      	movs	r1, #3
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff f9bd 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	0e9b      	lsrs	r3, r3, #26
 80031ae:	f003 021f 	and.w	r2, r3, #31
 80031b2:	e017      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x3c8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2103      	movs	r1, #3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f9b2 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80031c0:	4603      	mov	r3, r0
 80031c2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ce:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80031d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80031d6:	2320      	movs	r3, #32
 80031d8:	e003      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80031da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x3e0>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0e9b      	lsrs	r3, r3, #26
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	e011      	b.n	8003220 <HAL_ADC_ConfigChannel+0x404>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800320a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800320c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800320e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003214:	2320      	movs	r3, #32
 8003216:	e003      	b.n	8003220 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003220:	429a      	cmp	r2, r3
 8003222:	d106      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	2103      	movs	r1, #3
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff f98f 	bl	8002550 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fab2 	bl	80027a0 <LL_ADC_IsEnabled>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 8140 	bne.w	80034c4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6819      	ldr	r1, [r3, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	461a      	mov	r2, r3
 8003252:	f7ff fa03 	bl	800265c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4a8f      	ldr	r2, [pc, #572]	; (8003498 <HAL_ADC_ConfigChannel+0x67c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	f040 8131 	bne.w	80034c4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10b      	bne.n	800328a <HAL_ADC_ConfigChannel+0x46e>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	0e9b      	lsrs	r3, r3, #26
 8003278:	3301      	adds	r3, #1
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	2b09      	cmp	r3, #9
 8003280:	bf94      	ite	ls
 8003282:	2301      	movls	r3, #1
 8003284:	2300      	movhi	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e019      	b.n	80032be <HAL_ADC_ConfigChannel+0x4a2>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800329c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80032a2:	2320      	movs	r3, #32
 80032a4:	e003      	b.n	80032ae <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80032a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	2b09      	cmp	r3, #9
 80032b6:	bf94      	ite	ls
 80032b8:	2301      	movls	r3, #1
 80032ba:	2300      	movhi	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d079      	beq.n	80033b6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d107      	bne.n	80032de <HAL_ADC_ConfigChannel+0x4c2>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0e9b      	lsrs	r3, r3, #26
 80032d4:	3301      	adds	r3, #1
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032dc:	e015      	b.n	800330a <HAL_ADC_ConfigChannel+0x4ee>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ee:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80032f6:	2320      	movs	r3, #32
 80032f8:	e003      	b.n	8003302 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80032fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	3301      	adds	r3, #1
 8003304:	069b      	lsls	r3, r3, #26
 8003306:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_ADC_ConfigChannel+0x50e>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	0e9b      	lsrs	r3, r3, #26
 800331c:	3301      	adds	r3, #1
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	e017      	b.n	800335a <HAL_ADC_ConfigChannel+0x53e>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800333a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800333c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003342:	2320      	movs	r3, #32
 8003344:	e003      	b.n	800334e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	3301      	adds	r3, #1
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	2101      	movs	r1, #1
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	ea42 0103 	orr.w	r1, r2, r3
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x564>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	0e9b      	lsrs	r3, r3, #26
 8003370:	3301      	adds	r3, #1
 8003372:	f003 021f 	and.w	r2, r3, #31
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	051b      	lsls	r3, r3, #20
 800337e:	e018      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x596>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003398:	2320      	movs	r3, #32
 800339a:	e003      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	f003 021f 	and.w	r2, r3, #31
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b2:	430b      	orrs	r3, r1
 80033b4:	e081      	b.n	80034ba <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d107      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x5b6>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	0e9b      	lsrs	r3, r3, #26
 80033c8:	3301      	adds	r3, #1
 80033ca:	069b      	lsls	r3, r3, #26
 80033cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033d0:	e015      	b.n	80033fe <HAL_ADC_ConfigChannel+0x5e2>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80033ea:	2320      	movs	r3, #32
 80033ec:	e003      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	069b      	lsls	r3, r3, #26
 80033fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_ADC_ConfigChannel+0x602>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0e9b      	lsrs	r3, r3, #26
 8003410:	3301      	adds	r3, #1
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2101      	movs	r1, #1
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	e017      	b.n	800344e <HAL_ADC_ConfigChannel+0x632>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	61bb      	str	r3, [r7, #24]
  return result;
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e003      	b.n	8003442 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	3301      	adds	r3, #1
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	ea42 0103 	orr.w	r1, r2, r3
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <HAL_ADC_ConfigChannel+0x65e>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	0e9b      	lsrs	r3, r3, #26
 8003464:	3301      	adds	r3, #1
 8003466:	f003 021f 	and.w	r2, r3, #31
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	3b1e      	subs	r3, #30
 8003472:	051b      	lsls	r3, r3, #20
 8003474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003478:	e01e      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x69c>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	60fb      	str	r3, [r7, #12]
  return result;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e006      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x688>
 8003496:	bf00      	nop
 8003498:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f003 021f 	and.w	r2, r3, #31
 80034aa:	4613      	mov	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	3b1e      	subs	r3, #30
 80034b2:	051b      	lsls	r3, r3, #20
 80034b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034be:	4619      	mov	r1, r3
 80034c0:	f7ff f8a0 	bl	8002604 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b44      	ldr	r3, [pc, #272]	; (80035dc <HAL_ADC_ConfigChannel+0x7c0>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d07a      	beq.n	80035c6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034d0:	4843      	ldr	r0, [pc, #268]	; (80035e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80034d2:	f7fe fff5 	bl	80024c0 <LL_ADC_GetCommonPathInternalCh>
 80034d6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a41      	ldr	r2, [pc, #260]	; (80035e4 <HAL_ADC_ConfigChannel+0x7c8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d12c      	bne.n	800353e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d126      	bne.n	800353e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a3c      	ldr	r2, [pc, #240]	; (80035e8 <HAL_ADC_ConfigChannel+0x7cc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d004      	beq.n	8003504 <HAL_ADC_ConfigChannel+0x6e8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a3b      	ldr	r2, [pc, #236]	; (80035ec <HAL_ADC_ConfigChannel+0x7d0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d15d      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800350c:	4619      	mov	r1, r3
 800350e:	4834      	ldr	r0, [pc, #208]	; (80035e0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003510:	f7fe ffc3 	bl	800249a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	4a36      	ldr	r2, [pc, #216]	; (80035f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	099b      	lsrs	r3, r3, #6
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800352e:	e002      	b.n	8003536 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	3b01      	subs	r3, #1
 8003534:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f9      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800353c:	e040      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2d      	ldr	r2, [pc, #180]	; (80035f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d118      	bne.n	800357a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800354c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d112      	bne.n	800357a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a23      	ldr	r2, [pc, #140]	; (80035e8 <HAL_ADC_ConfigChannel+0x7cc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x74c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a22      	ldr	r2, [pc, #136]	; (80035ec <HAL_ADC_ConfigChannel+0x7d0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d12d      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800356c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003570:	4619      	mov	r1, r3
 8003572:	481b      	ldr	r0, [pc, #108]	; (80035e0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003574:	f7fe ff91 	bl	800249a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003578:	e024      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1f      	ldr	r2, [pc, #124]	; (80035fc <HAL_ADC_ConfigChannel+0x7e0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d120      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d11a      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d115      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800359a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800359e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035a2:	4619      	mov	r1, r3
 80035a4:	480e      	ldr	r0, [pc, #56]	; (80035e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80035a6:	f7fe ff78 	bl	800249a <LL_ADC_SetCommonPathInternalCh>
 80035aa:	e00c      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80035be:	e002      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035c0:	bf00      	nop
 80035c2:	e000      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	37d8      	adds	r7, #216	; 0xd8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	80080000 	.word	0x80080000
 80035e0:	50040300 	.word	0x50040300
 80035e4:	c7520000 	.word	0xc7520000
 80035e8:	50040000 	.word	0x50040000
 80035ec:	50040200 	.word	0x50040200
 80035f0:	20000008 	.word	0x20000008
 80035f4:	053e2d63 	.word	0x053e2d63
 80035f8:	cb840000 	.word	0xcb840000
 80035fc:	80000001 	.word	0x80000001

08003600 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003608:	2300      	movs	r3, #0
 800360a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff f8c5 	bl	80027a0 <LL_ADC_IsEnabled>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d169      	bne.n	80036f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	4b36      	ldr	r3, [pc, #216]	; (80036fc <ADC_Enable+0xfc>)
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362e:	f043 0210 	orr.w	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e055      	b.n	80036f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff f894 	bl	8002778 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003650:	482b      	ldr	r0, [pc, #172]	; (8003700 <ADC_Enable+0x100>)
 8003652:	f7fe ff35 	bl	80024c0 <LL_ADC_GetCommonPathInternalCh>
 8003656:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003660:	4b28      	ldr	r3, [pc, #160]	; (8003704 <ADC_Enable+0x104>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	4a28      	ldr	r2, [pc, #160]	; (8003708 <ADC_Enable+0x108>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	099b      	lsrs	r3, r3, #6
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800367a:	e002      	b.n	8003682 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3b01      	subs	r3, #1
 8003680:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f9      	bne.n	800367c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003688:	f7fe fec4 	bl	8002414 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800368e:	e028      	b.n	80036e2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff f883 	bl	80027a0 <LL_ADC_IsEnabled>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d104      	bne.n	80036aa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff f867 	bl	8002778 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036aa:	f7fe feb3 	bl	8002414 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d914      	bls.n	80036e2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d00d      	beq.n	80036e2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	f043 0210 	orr.w	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d6:	f043 0201 	orr.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e007      	b.n	80036f2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d1cf      	bne.n	8003690 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	8000003f 	.word	0x8000003f
 8003700:	50040300 	.word	0x50040300
 8003704:	20000008 	.word	0x20000008
 8003708:	053e2d63 	.word	0x053e2d63

0800370c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <__NVIC_SetPriorityGrouping+0x44>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003728:	4013      	ands	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373e:	4a04      	ldr	r2, [pc, #16]	; (8003750 <__NVIC_SetPriorityGrouping+0x44>)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	60d3      	str	r3, [r2, #12]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <__NVIC_GetPriorityGrouping+0x18>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	f003 0307 	and.w	r3, r3, #7
}
 8003762:	4618      	mov	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	2b00      	cmp	r3, #0
 8003780:	db0b      	blt.n	800379a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	f003 021f 	and.w	r2, r3, #31
 8003788:	4907      	ldr	r1, [pc, #28]	; (80037a8 <__NVIC_EnableIRQ+0x38>)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2001      	movs	r0, #1
 8003792:	fa00 f202 	lsl.w	r2, r0, r2
 8003796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	e000e100 	.word	0xe000e100

080037ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	db0a      	blt.n	80037d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	490c      	ldr	r1, [pc, #48]	; (80037f8 <__NVIC_SetPriority+0x4c>)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	0112      	lsls	r2, r2, #4
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	440b      	add	r3, r1
 80037d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d4:	e00a      	b.n	80037ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	4908      	ldr	r1, [pc, #32]	; (80037fc <__NVIC_SetPriority+0x50>)
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	3b04      	subs	r3, #4
 80037e4:	0112      	lsls	r2, r2, #4
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	440b      	add	r3, r1
 80037ea:	761a      	strb	r2, [r3, #24]
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000e100 	.word	0xe000e100
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f1c3 0307 	rsb	r3, r3, #7
 800381a:	2b04      	cmp	r3, #4
 800381c:	bf28      	it	cs
 800381e:	2304      	movcs	r3, #4
 8003820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3304      	adds	r3, #4
 8003826:	2b06      	cmp	r3, #6
 8003828:	d902      	bls.n	8003830 <NVIC_EncodePriority+0x30>
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3b03      	subs	r3, #3
 800382e:	e000      	b.n	8003832 <NVIC_EncodePriority+0x32>
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	f04f 32ff 	mov.w	r2, #4294967295
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43da      	mvns	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	401a      	ands	r2, r3
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003848:	f04f 31ff 	mov.w	r1, #4294967295
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	43d9      	mvns	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003858:	4313      	orrs	r3, r2
         );
}
 800385a:	4618      	mov	r0, r3
 800385c:	3724      	adds	r7, #36	; 0x24
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff ff4c 	bl	800370c <__NVIC_SetPriorityGrouping>
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800388e:	f7ff ff61 	bl	8003754 <__NVIC_GetPriorityGrouping>
 8003892:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	6978      	ldr	r0, [r7, #20]
 800389a:	f7ff ffb1 	bl	8003800 <NVIC_EncodePriority>
 800389e:	4602      	mov	r2, r0
 80038a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff ff80 	bl	80037ac <__NVIC_SetPriority>
}
 80038ac:	bf00      	nop
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ff54 	bl	8003770 <__NVIC_EnableIRQ>
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e014      	b.n	800390c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	791b      	ldrb	r3, [r3, #4]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fe fa60 	bl	8001db8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	795b      	ldrb	r3, [r3, #5]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_DAC_Start+0x16>
 8003926:	2302      	movs	r3, #2
 8003928:	e03b      	b.n	80039a2 <HAL_DAC_Start+0x8e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6819      	ldr	r1, [r3, #0]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2201      	movs	r2, #1
 8003944:	409a      	lsls	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10f      	bne.n	8003974 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800395e:	2b04      	cmp	r3, #4
 8003960:	d118      	bne.n	8003994 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	e00f      	b.n	8003994 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800397e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003982:	d107      	bne.n	8003994 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0202 	orr.w	r2, r2, #2
 8003992:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b087      	sub	sp, #28
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	3308      	adds	r3, #8
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	e004      	b.n	80039e2 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	3314      	adds	r3, #20
 80039e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	461a      	mov	r2, r3
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	795b      	ldrb	r3, [r3, #5]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_DAC_ConfigChannel+0x1c>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e114      	b.n	8003c3e <HAL_DAC_ConfigChannel+0x246>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	f040 8081 	bne.w	8003b2c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003a2a:	f7fe fcf3 	bl	8002414 <HAL_GetTick>
 8003a2e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d140      	bne.n	8003ab8 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a36:	e018      	b.n	8003a6a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a38:	f7fe fcec 	bl	8002414 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d911      	bls.n	8003a6a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f043 0208 	orr.w	r2, r3, #8
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2203      	movs	r2, #3
 8003a64:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e0e9      	b.n	8003c3e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1df      	bne.n	8003a38 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7fe fcd7 	bl	800242c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	6992      	ldr	r2, [r2, #24]
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
 8003a88:	e023      	b.n	8003ad2 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a8a:	f7fe fcc3 	bl	8002414 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d90f      	bls.n	8003ab8 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	da0a      	bge.n	8003ab8 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f043 0208 	orr.w	r2, r3, #8
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e0c2      	b.n	8003c3e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	dbe3      	blt.n	8003a8a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f7fe fcb2 	bl	800242c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	6992      	ldr	r2, [r2, #24]
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	ea02 0103 	and.w	r1, r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	409a      	lsls	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	21ff      	movs	r1, #255	; 0xff
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	ea02 0103 	and.w	r1, r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	6a1a      	ldr	r2, [r3, #32]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	409a      	lsls	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d11d      	bne.n	8003b70 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	221f      	movs	r2, #31
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2207      	movs	r2, #7
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6819      	ldr	r1, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43da      	mvns	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	400a      	ands	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	22c0      	movs	r2, #192	; 0xc0
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43da      	mvns	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	400a      	ands	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c56:	e17f      	b.n	8003f58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	4013      	ands	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8171 	beq.w	8003f52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d005      	beq.n	8003c88 <HAL_GPIO_Init+0x40>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d130      	bne.n	8003cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2203      	movs	r2, #3
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0201 	and.w	r2, r3, #1
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d118      	bne.n	8003d28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	08db      	lsrs	r3, r3, #3
 8003d12:	f003 0201 	and.w	r2, r3, #1
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d017      	beq.n	8003d64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d123      	bne.n	8003db8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	08da      	lsrs	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3208      	adds	r2, #8
 8003d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	220f      	movs	r2, #15
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	08da      	lsrs	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3208      	adds	r2, #8
 8003db2:	6939      	ldr	r1, [r7, #16]
 8003db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0203 	and.w	r2, r3, #3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80ac 	beq.w	8003f52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dfa:	4b5f      	ldr	r3, [pc, #380]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfe:	4a5e      	ldr	r2, [pc, #376]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6613      	str	r3, [r2, #96]	; 0x60
 8003e06:	4b5c      	ldr	r3, [pc, #368]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e12:	4a5a      	ldr	r2, [pc, #360]	; (8003f7c <HAL_GPIO_Init+0x334>)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	089b      	lsrs	r3, r3, #2
 8003e18:	3302      	adds	r3, #2
 8003e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	220f      	movs	r2, #15
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e3c:	d025      	beq.n	8003e8a <HAL_GPIO_Init+0x242>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4f      	ldr	r2, [pc, #316]	; (8003f80 <HAL_GPIO_Init+0x338>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01f      	beq.n	8003e86 <HAL_GPIO_Init+0x23e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4e      	ldr	r2, [pc, #312]	; (8003f84 <HAL_GPIO_Init+0x33c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d019      	beq.n	8003e82 <HAL_GPIO_Init+0x23a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4d      	ldr	r2, [pc, #308]	; (8003f88 <HAL_GPIO_Init+0x340>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <HAL_GPIO_Init+0x236>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4c      	ldr	r2, [pc, #304]	; (8003f8c <HAL_GPIO_Init+0x344>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00d      	beq.n	8003e7a <HAL_GPIO_Init+0x232>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a4b      	ldr	r2, [pc, #300]	; (8003f90 <HAL_GPIO_Init+0x348>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d007      	beq.n	8003e76 <HAL_GPIO_Init+0x22e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a4a      	ldr	r2, [pc, #296]	; (8003f94 <HAL_GPIO_Init+0x34c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <HAL_GPIO_Init+0x22a>
 8003e6e:	2306      	movs	r3, #6
 8003e70:	e00c      	b.n	8003e8c <HAL_GPIO_Init+0x244>
 8003e72:	2307      	movs	r3, #7
 8003e74:	e00a      	b.n	8003e8c <HAL_GPIO_Init+0x244>
 8003e76:	2305      	movs	r3, #5
 8003e78:	e008      	b.n	8003e8c <HAL_GPIO_Init+0x244>
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	e006      	b.n	8003e8c <HAL_GPIO_Init+0x244>
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e004      	b.n	8003e8c <HAL_GPIO_Init+0x244>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e002      	b.n	8003e8c <HAL_GPIO_Init+0x244>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <HAL_GPIO_Init+0x244>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	f002 0203 	and.w	r2, r2, #3
 8003e92:	0092      	lsls	r2, r2, #2
 8003e94:	4093      	lsls	r3, r2
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e9c:	4937      	ldr	r1, [pc, #220]	; (8003f7c <HAL_GPIO_Init+0x334>)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <HAL_GPIO_Init+0x350>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ece:	4a32      	ldr	r2, [pc, #200]	; (8003f98 <HAL_GPIO_Init+0x350>)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ed4:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <HAL_GPIO_Init+0x350>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <HAL_GPIO_Init+0x350>)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003efe:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <HAL_GPIO_Init+0x350>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f22:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <HAL_GPIO_Init+0x350>)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_GPIO_Init+0x350>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f4c:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <HAL_GPIO_Init+0x350>)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	3301      	adds	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f47f ae78 	bne.w	8003c58 <HAL_GPIO_Init+0x10>
  }
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	48000400 	.word	0x48000400
 8003f84:	48000800 	.word	0x48000800
 8003f88:	48000c00 	.word	0x48000c00
 8003f8c:	48001000 	.word	0x48001000
 8003f90:	48001400 	.word	0x48001400
 8003f94:	48001800 	.word	0x48001800
 8003f98:	40010400 	.word	0x40010400

08003f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fac:	787b      	ldrb	r3, [r7, #1]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fb2:	887a      	ldrh	r2, [r7, #2]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fb8:	e002      	b.n	8003fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	041a      	lsls	r2, r3, #16
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	43d9      	mvns	r1, r3
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	400b      	ands	r3, r1
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	619a      	str	r2, [r3, #24]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800400a:	4b08      	ldr	r3, [pc, #32]	; (800402c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d006      	beq.n	8004024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004016:	4a05      	ldr	r2, [pc, #20]	; (800402c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd fd7a 	bl	8001b18 <HAL_GPIO_EXTI_Callback>
  }
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40010400 	.word	0x40010400

08004030 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <HAL_PWREx_GetVoltageRange+0x18>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40007000 	.word	0x40007000

0800404c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405a:	d130      	bne.n	80040be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800405c:	4b23      	ldr	r3, [pc, #140]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004068:	d038      	beq.n	80040dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004072:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004074:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004078:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2232      	movs	r2, #50	; 0x32
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	0c9b      	lsrs	r3, r3, #18
 800408c:	3301      	adds	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004090:	e002      	b.n	8004098 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b01      	subs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004098:	4b14      	ldr	r3, [pc, #80]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a4:	d102      	bne.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f2      	bne.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040ac:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b8:	d110      	bne.n	80040dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e00f      	b.n	80040de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ca:	d007      	beq.n	80040dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040d4:	4a05      	ldr	r2, [pc, #20]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40007000 	.word	0x40007000
 80040f0:	20000008 	.word	0x20000008
 80040f4:	431bde83 	.word	0x431bde83

080040f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e3ca      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800410a:	4b97      	ldr	r3, [pc, #604]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004114:	4b94      	ldr	r3, [pc, #592]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80e4 	beq.w	80042f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <HAL_RCC_OscConfig+0x4a>
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b0c      	cmp	r3, #12
 8004136:	f040 808b 	bne.w	8004250 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b01      	cmp	r3, #1
 800413e:	f040 8087 	bne.w	8004250 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004142:	4b89      	ldr	r3, [pc, #548]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_RCC_OscConfig+0x62>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e3a2      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1a      	ldr	r2, [r3, #32]
 800415e:	4b82      	ldr	r3, [pc, #520]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_RCC_OscConfig+0x7c>
 800416a:	4b7f      	ldr	r3, [pc, #508]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004172:	e005      	b.n	8004180 <HAL_RCC_OscConfig+0x88>
 8004174:	4b7c      	ldr	r3, [pc, #496]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 8004176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004180:	4293      	cmp	r3, r2
 8004182:	d223      	bcs.n	80041cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fd87 	bl	8004c9c <RCC_SetFlashLatencyFromMSIRange>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e383      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004198:	4b73      	ldr	r3, [pc, #460]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a72      	ldr	r2, [pc, #456]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800419e:	f043 0308 	orr.w	r3, r3, #8
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b70      	ldr	r3, [pc, #448]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	496d      	ldr	r1, [pc, #436]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041b6:	4b6c      	ldr	r3, [pc, #432]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	4968      	ldr	r1, [pc, #416]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
 80041ca:	e025      	b.n	8004218 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041cc:	4b66      	ldr	r3, [pc, #408]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a65      	ldr	r2, [pc, #404]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80041d2:	f043 0308 	orr.w	r3, r3, #8
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b63      	ldr	r3, [pc, #396]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	4960      	ldr	r1, [pc, #384]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ea:	4b5f      	ldr	r3, [pc, #380]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	495b      	ldr	r1, [pc, #364]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fd47 	bl	8004c9c <RCC_SetFlashLatencyFromMSIRange>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e343      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004218:	f000 fc4a 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b52      	ldr	r3, [pc, #328]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	091b      	lsrs	r3, r3, #4
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	4950      	ldr	r1, [pc, #320]	; (800436c <HAL_RCC_OscConfig+0x274>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
 8004234:	4a4e      	ldr	r2, [pc, #312]	; (8004370 <HAL_RCC_OscConfig+0x278>)
 8004236:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004238:	4b4e      	ldr	r3, [pc, #312]	; (8004374 <HAL_RCC_OscConfig+0x27c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7fd ff19 	bl	8002074 <HAL_InitTick>
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d052      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	e327      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d032      	beq.n	80042be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004258:	4b43      	ldr	r3, [pc, #268]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a42      	ldr	r2, [pc, #264]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004264:	f7fe f8d6 	bl	8002414 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800426c:	f7fe f8d2 	bl	8002414 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e310      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800427e:	4b3a      	ldr	r3, [pc, #232]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800428a:	4b37      	ldr	r3, [pc, #220]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a36      	ldr	r2, [pc, #216]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 8004290:	f043 0308 	orr.w	r3, r3, #8
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b34      	ldr	r3, [pc, #208]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4931      	ldr	r1, [pc, #196]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042a8:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	492c      	ldr	r1, [pc, #176]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]
 80042bc:	e01a      	b.n	80042f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042be:	4b2a      	ldr	r3, [pc, #168]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a29      	ldr	r2, [pc, #164]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042ca:	f7fe f8a3 	bl	8002414 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042d2:	f7fe f89f 	bl	8002414 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e2dd      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042e4:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCC_OscConfig+0x1da>
 80042f0:	e000      	b.n	80042f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d074      	beq.n	80043ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b08      	cmp	r3, #8
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x21a>
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b0c      	cmp	r3, #12
 800430a:	d10e      	bne.n	800432a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b03      	cmp	r3, #3
 8004310:	d10b      	bne.n	800432a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d064      	beq.n	80043e8 <HAL_RCC_OscConfig+0x2f0>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d160      	bne.n	80043e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e2ba      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004332:	d106      	bne.n	8004342 <HAL_RCC_OscConfig+0x24a>
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a0b      	ldr	r2, [pc, #44]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800433a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	e026      	b.n	8004390 <HAL_RCC_OscConfig+0x298>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800434a:	d115      	bne.n	8004378 <HAL_RCC_OscConfig+0x280>
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a05      	ldr	r2, [pc, #20]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 8004352:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a02      	ldr	r2, [pc, #8]	; (8004368 <HAL_RCC_OscConfig+0x270>)
 800435e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	e014      	b.n	8004390 <HAL_RCC_OscConfig+0x298>
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000
 800436c:	0800b3b4 	.word	0x0800b3b4
 8004370:	20000008 	.word	0x20000008
 8004374:	2000000c 	.word	0x2000000c
 8004378:	4ba0      	ldr	r3, [pc, #640]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a9f      	ldr	r2, [pc, #636]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 800437e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b9d      	ldr	r3, [pc, #628]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a9c      	ldr	r2, [pc, #624]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 800438a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe f83c 	bl	8002414 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fe f838 	bl	8002414 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e276      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043b2:	4b92      	ldr	r3, [pc, #584]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x2a8>
 80043be:	e014      	b.n	80043ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe f828 	bl	8002414 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fe f824 	bl	8002414 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e262      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043da:	4b88      	ldr	r3, [pc, #544]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x2d0>
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d060      	beq.n	80044b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_OscConfig+0x310>
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b0c      	cmp	r3, #12
 8004400:	d119      	bne.n	8004436 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d116      	bne.n	8004436 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004408:	4b7c      	ldr	r3, [pc, #496]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_OscConfig+0x328>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e23f      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004420:	4b76      	ldr	r3, [pc, #472]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	4973      	ldr	r1, [pc, #460]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004434:	e040      	b.n	80044b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d023      	beq.n	8004486 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800443e:	4b6f      	ldr	r3, [pc, #444]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a6e      	ldr	r2, [pc, #440]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fd ffe3 	bl	8002414 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004452:	f7fd ffdf 	bl	8002414 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e21d      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004464:	4b65      	ldr	r3, [pc, #404]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004470:	4b62      	ldr	r3, [pc, #392]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	061b      	lsls	r3, r3, #24
 800447e:	495f      	ldr	r1, [pc, #380]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
 8004484:	e018      	b.n	80044b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004486:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a5c      	ldr	r2, [pc, #368]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 800448c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fd ffbf 	bl	8002414 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449a:	f7fd ffbb 	bl	8002414 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e1f9      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044ac:	4b53      	ldr	r3, [pc, #332]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f0      	bne.n	800449a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d03c      	beq.n	800453e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01c      	beq.n	8004506 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044cc:	4b4b      	ldr	r3, [pc, #300]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80044ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d2:	4a4a      	ldr	r2, [pc, #296]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fd ff9a 	bl	8002414 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e4:	f7fd ff96 	bl	8002414 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1d4      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044f6:	4b41      	ldr	r3, [pc, #260]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80044f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ef      	beq.n	80044e4 <HAL_RCC_OscConfig+0x3ec>
 8004504:	e01b      	b.n	800453e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004506:	4b3d      	ldr	r3, [pc, #244]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450c:	4a3b      	ldr	r2, [pc, #236]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004516:	f7fd ff7d 	bl	8002414 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451e:	f7fd ff79 	bl	8002414 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e1b7      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004530:	4b32      	ldr	r3, [pc, #200]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1ef      	bne.n	800451e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80a6 	beq.w	8004698 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454c:	2300      	movs	r3, #0
 800454e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004550:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10d      	bne.n	8004578 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455c:	4b27      	ldr	r3, [pc, #156]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 800455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004560:	4a26      	ldr	r2, [pc, #152]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 8004562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004566:	6593      	str	r3, [r2, #88]	; 0x58
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004574:	2301      	movs	r3, #1
 8004576:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004578:	4b21      	ldr	r3, [pc, #132]	; (8004600 <HAL_RCC_OscConfig+0x508>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d118      	bne.n	80045b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004584:	4b1e      	ldr	r3, [pc, #120]	; (8004600 <HAL_RCC_OscConfig+0x508>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <HAL_RCC_OscConfig+0x508>)
 800458a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004590:	f7fd ff40 	bl	8002414 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004598:	f7fd ff3c 	bl	8002414 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e17a      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <HAL_RCC_OscConfig+0x508>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d108      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4d8>
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045ce:	e029      	b.n	8004624 <HAL_RCC_OscConfig+0x52c>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d115      	bne.n	8004604 <HAL_RCC_OscConfig+0x50c>
 80045d8:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	4a07      	ldr	r2, [pc, #28]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80045e0:	f043 0304 	orr.w	r3, r3, #4
 80045e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	4a03      	ldr	r2, [pc, #12]	; (80045fc <HAL_RCC_OscConfig+0x504>)
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045f8:	e014      	b.n	8004624 <HAL_RCC_OscConfig+0x52c>
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	40007000 	.word	0x40007000
 8004604:	4b9c      	ldr	r3, [pc, #624]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	4a9b      	ldr	r2, [pc, #620]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004614:	4b98      	ldr	r3, [pc, #608]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	4a97      	ldr	r2, [pc, #604]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d016      	beq.n	800465a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fd fef2 	bl	8002414 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004632:	e00a      	b.n	800464a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004634:	f7fd feee 	bl	8002414 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e12a      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464a:	4b8b      	ldr	r3, [pc, #556]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ed      	beq.n	8004634 <HAL_RCC_OscConfig+0x53c>
 8004658:	e015      	b.n	8004686 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fd fedb 	bl	8002414 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fd fed7 	bl	8002414 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e113      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004678:	4b7f      	ldr	r3, [pc, #508]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1ed      	bne.n	8004662 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004686:	7ffb      	ldrb	r3, [r7, #31]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468c:	4b7a      	ldr	r3, [pc, #488]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	4a79      	ldr	r2, [pc, #484]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 8004692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004696:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80fe 	beq.w	800489e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	f040 80d0 	bne.w	800484c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046ac:	4b72      	ldr	r3, [pc, #456]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 0203 	and.w	r2, r3, #3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	429a      	cmp	r2, r3
 80046be:	d130      	bne.n	8004722 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	3b01      	subs	r3, #1
 80046cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d127      	bne.n	8004722 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d11f      	bne.n	8004722 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046ec:	2a07      	cmp	r2, #7
 80046ee:	bf14      	ite	ne
 80046f0:	2201      	movne	r2, #1
 80046f2:	2200      	moveq	r2, #0
 80046f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d113      	bne.n	8004722 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	085b      	lsrs	r3, r3, #1
 8004706:	3b01      	subs	r3, #1
 8004708:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d109      	bne.n	8004722 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	3b01      	subs	r3, #1
 800471c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d06e      	beq.n	8004800 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d069      	beq.n	80047fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004728:	4b53      	ldr	r3, [pc, #332]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d105      	bne.n	8004740 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004734:	4b50      	ldr	r3, [pc, #320]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0ad      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004744:	4b4c      	ldr	r3, [pc, #304]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a4b      	ldr	r2, [pc, #300]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 800474a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800474e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004750:	f7fd fe60 	bl	8002414 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fd fe5c 	bl	8002414 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e09a      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800476a:	4b43      	ldr	r3, [pc, #268]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004776:	4b40      	ldr	r3, [pc, #256]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	4b40      	ldr	r3, [pc, #256]	; (800487c <HAL_RCC_OscConfig+0x784>)
 800477c:	4013      	ands	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004786:	3a01      	subs	r2, #1
 8004788:	0112      	lsls	r2, r2, #4
 800478a:	4311      	orrs	r1, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004790:	0212      	lsls	r2, r2, #8
 8004792:	4311      	orrs	r1, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004798:	0852      	lsrs	r2, r2, #1
 800479a:	3a01      	subs	r2, #1
 800479c:	0552      	lsls	r2, r2, #21
 800479e:	4311      	orrs	r1, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047a4:	0852      	lsrs	r2, r2, #1
 80047a6:	3a01      	subs	r2, #1
 80047a8:	0652      	lsls	r2, r2, #25
 80047aa:	4311      	orrs	r1, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047b0:	0912      	lsrs	r2, r2, #4
 80047b2:	0452      	lsls	r2, r2, #17
 80047b4:	430a      	orrs	r2, r1
 80047b6:	4930      	ldr	r1, [pc, #192]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047bc:	4b2e      	ldr	r3, [pc, #184]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a2d      	ldr	r2, [pc, #180]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 80047c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047c8:	4b2b      	ldr	r3, [pc, #172]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a2a      	ldr	r2, [pc, #168]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 80047ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047d4:	f7fd fe1e 	bl	8002414 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fd fe1a 	bl	8002414 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e058      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047fa:	e050      	b.n	800489e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e04f      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004800:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d148      	bne.n	800489e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800480c:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 8004812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004816:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a16      	ldr	r2, [pc, #88]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 800481e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004822:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004824:	f7fd fdf6 	bl	8002414 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482c:	f7fd fdf2 	bl	8002414 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e030      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483e:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x734>
 800484a:	e028      	b.n	800489e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b0c      	cmp	r3, #12
 8004850:	d023      	beq.n	800489a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004852:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a08      	ldr	r2, [pc, #32]	; (8004878 <HAL_RCC_OscConfig+0x780>)
 8004858:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fd fdd9 	bl	8002414 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004864:	e00c      	b.n	8004880 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004866:	f7fd fdd5 	bl	8002414 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d905      	bls.n	8004880 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e013      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
 8004878:	40021000 	.word	0x40021000
 800487c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCC_OscConfig+0x7b0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1ec      	bne.n	8004866 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_OscConfig+0x7b0>)
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	4905      	ldr	r1, [pc, #20]	; (80048a8 <HAL_RCC_OscConfig+0x7b0>)
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_RCC_OscConfig+0x7b4>)
 8004894:	4013      	ands	r3, r2
 8004896:	60cb      	str	r3, [r1, #12]
 8004898:	e001      	b.n	800489e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40021000 	.word	0x40021000
 80048ac:	feeefffc 	.word	0xfeeefffc

080048b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0e7      	b.n	8004a94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048c4:	4b75      	ldr	r3, [pc, #468]	; (8004a9c <HAL_RCC_ClockConfig+0x1ec>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d910      	bls.n	80048f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b72      	ldr	r3, [pc, #456]	; (8004a9c <HAL_RCC_ClockConfig+0x1ec>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 0207 	bic.w	r2, r3, #7
 80048da:	4970      	ldr	r1, [pc, #448]	; (8004a9c <HAL_RCC_ClockConfig+0x1ec>)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b6e      	ldr	r3, [pc, #440]	; (8004a9c <HAL_RCC_ClockConfig+0x1ec>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0cf      	b.n	8004a94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	4b66      	ldr	r3, [pc, #408]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800490c:	429a      	cmp	r2, r3
 800490e:	d908      	bls.n	8004922 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b63      	ldr	r3, [pc, #396]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	4960      	ldr	r1, [pc, #384]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04c      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b03      	cmp	r3, #3
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004936:	4b5a      	ldr	r3, [pc, #360]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d121      	bne.n	8004986 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e0a6      	b.n	8004a94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d107      	bne.n	800495e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800494e:	4b54      	ldr	r3, [pc, #336]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d115      	bne.n	8004986 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e09a      	b.n	8004a94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004966:	4b4e      	ldr	r3, [pc, #312]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e08e      	b.n	8004a94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004976:	4b4a      	ldr	r3, [pc, #296]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e086      	b.n	8004a94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004986:	4b46      	ldr	r3, [pc, #280]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f023 0203 	bic.w	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4943      	ldr	r1, [pc, #268]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004994:	4313      	orrs	r3, r2
 8004996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004998:	f7fd fd3c 	bl	8002414 <HAL_GetTick>
 800499c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a0:	f7fd fd38 	bl	8002414 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e06e      	b.n	8004a94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	4b3a      	ldr	r3, [pc, #232]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 020c 	and.w	r2, r3, #12
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1eb      	bne.n	80049a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d010      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	4b31      	ldr	r3, [pc, #196]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d208      	bcs.n	80049f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e4:	4b2e      	ldr	r3, [pc, #184]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	492b      	ldr	r1, [pc, #172]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f6:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <HAL_RCC_ClockConfig+0x1ec>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d210      	bcs.n	8004a26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <HAL_RCC_ClockConfig+0x1ec>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 0207 	bic.w	r2, r3, #7
 8004a0c:	4923      	ldr	r1, [pc, #140]	; (8004a9c <HAL_RCC_ClockConfig+0x1ec>)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a14:	4b21      	ldr	r3, [pc, #132]	; (8004a9c <HAL_RCC_ClockConfig+0x1ec>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d001      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e036      	b.n	8004a94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a32:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	4918      	ldr	r1, [pc, #96]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d009      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4910      	ldr	r1, [pc, #64]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a64:	f000 f824 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	490b      	ldr	r1, [pc, #44]	; (8004aa4 <HAL_RCC_ClockConfig+0x1f4>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8004a82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_ClockConfig+0x1fc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fd faf3 	bl	8002074 <HAL_InitTick>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a92:	7afb      	ldrb	r3, [r7, #11]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40022000 	.word	0x40022000
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	0800b3b4 	.word	0x0800b3b4
 8004aa8:	20000008 	.word	0x20000008
 8004aac:	2000000c 	.word	0x2000000c

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b089      	sub	sp, #36	; 0x24
 8004ab4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004abe:	4b3e      	ldr	r3, [pc, #248]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ac8:	4b3b      	ldr	r3, [pc, #236]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b0c      	cmp	r3, #12
 8004adc:	d121      	bne.n	8004b22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d11e      	bne.n	8004b22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ae4:	4b34      	ldr	r3, [pc, #208]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d107      	bne.n	8004b00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004af0:	4b31      	ldr	r3, [pc, #196]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	e005      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b00:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b0c:	4a2b      	ldr	r2, [pc, #172]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10d      	bne.n	8004b38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b20:	e00a      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d102      	bne.n	8004b2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b28:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	e004      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b34:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	d134      	bne.n	8004ba8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b3e:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d003      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0xac>
 8004b54:	e005      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b58:	617b      	str	r3, [r7, #20]
      break;
 8004b5a:	e005      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b5c:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b5e:	617b      	str	r3, [r7, #20]
      break;
 8004b60:	e002      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	617b      	str	r3, [r7, #20]
      break;
 8004b66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b68:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	091b      	lsrs	r3, r3, #4
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	3301      	adds	r3, #1
 8004b74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b76:	4b10      	ldr	r3, [pc, #64]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	fb03 f202 	mul.w	r2, r3, r2
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	0e5b      	lsrs	r3, r3, #25
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	3301      	adds	r3, #1
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	0800b3cc 	.word	0x0800b3cc
 8004bc0:	00f42400 	.word	0x00f42400
 8004bc4:	007a1200 	.word	0x007a1200

08004bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bcc:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bce:	681b      	ldr	r3, [r3, #0]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000008 	.word	0x20000008

08004be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004be4:	f7ff fff0 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4904      	ldr	r1, [pc, #16]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40021000 	.word	0x40021000
 8004c08:	0800b3c4 	.word	0x0800b3c4

08004c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c10:	f7ff ffda 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	0adb      	lsrs	r3, r3, #11
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	4904      	ldr	r1, [pc, #16]	; (8004c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c22:	5ccb      	ldrb	r3, [r1, r3]
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000
 8004c34:	0800b3c4 	.word	0x0800b3c4

08004c38 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	220f      	movs	r2, #15
 8004c46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c48:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <HAL_RCC_GetClockConfig+0x5c>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0203 	and.w	r2, r3, #3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <HAL_RCC_GetClockConfig+0x5c>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <HAL_RCC_GetClockConfig+0x5c>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c6c:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <HAL_RCC_GetClockConfig+0x5c>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	08db      	lsrs	r3, r3, #3
 8004c72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <HAL_RCC_GetClockConfig+0x60>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0207 	and.w	r2, r3, #7
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	601a      	str	r2, [r3, #0]
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40022000 	.word	0x40022000

08004c9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ca8:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cb4:	f7ff f9bc 	bl	8004030 <HAL_PWREx_GetVoltageRange>
 8004cb8:	6178      	str	r0, [r7, #20]
 8004cba:	e014      	b.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cbc:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	4a24      	ldr	r2, [pc, #144]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc8:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cd4:	f7ff f9ac 	bl	8004030 <HAL_PWREx_GetVoltageRange>
 8004cd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cda:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cec:	d10b      	bne.n	8004d06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b80      	cmp	r3, #128	; 0x80
 8004cf2:	d919      	bls.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2ba0      	cmp	r3, #160	; 0xa0
 8004cf8:	d902      	bls.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	e013      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d00:	2301      	movs	r3, #1
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	e010      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d902      	bls.n	8004d12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	e00a      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b80      	cmp	r3, #128	; 0x80
 8004d16:	d102      	bne.n	8004d1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d18:	2302      	movs	r3, #2
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	e004      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b70      	cmp	r3, #112	; 0x70
 8004d22:	d101      	bne.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d24:	2301      	movs	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f023 0207 	bic.w	r2, r3, #7
 8004d30:	4909      	ldr	r1, [pc, #36]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d001      	beq.n	8004d4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40022000 	.word	0x40022000

08004d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d64:	2300      	movs	r3, #0
 8004d66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d68:	2300      	movs	r3, #0
 8004d6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d041      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d80:	d02a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d86:	d824      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d8c:	d008      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d92:	d81e      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9c:	d010      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d9e:	e018      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004da0:	4b86      	ldr	r3, [pc, #536]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	4a85      	ldr	r2, [pc, #532]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004daa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dac:	e015      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3304      	adds	r3, #4
 8004db2:	2100      	movs	r1, #0
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fabb 	bl	8005330 <RCCEx_PLLSAI1_Config>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dbe:	e00c      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3320      	adds	r3, #32
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fba6 	bl	8005518 <RCCEx_PLLSAI2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dd0:	e003      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	74fb      	strb	r3, [r7, #19]
      break;
 8004dd6:	e000      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dda:	7cfb      	ldrb	r3, [r7, #19]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004de0:	4b76      	ldr	r3, [pc, #472]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dee:	4973      	ldr	r1, [pc, #460]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004df6:	e001      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d041      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e10:	d02a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004e12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e16:	d824      	bhi.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e1c:	d008      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e22:	d81e      	bhi.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e2c:	d010      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e2e:	e018      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e30:	4b62      	ldr	r3, [pc, #392]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4a61      	ldr	r2, [pc, #388]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e3c:	e015      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2100      	movs	r1, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fa73 	bl	8005330 <RCCEx_PLLSAI1_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e4e:	e00c      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3320      	adds	r3, #32
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fb5e 	bl	8005518 <RCCEx_PLLSAI2_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e60:	e003      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	74fb      	strb	r3, [r7, #19]
      break;
 8004e66:	e000      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e6a:	7cfb      	ldrb	r3, [r7, #19]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e70:	4b52      	ldr	r3, [pc, #328]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e7e:	494f      	ldr	r1, [pc, #316]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e86:	e001      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	7cfb      	ldrb	r3, [r7, #19]
 8004e8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80a0 	beq.w	8004fda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e9e:	4b47      	ldr	r3, [pc, #284]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb4:	4b41      	ldr	r3, [pc, #260]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	4a40      	ldr	r2, [pc, #256]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec0:	4b3e      	ldr	r3, [pc, #248]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ed0:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004edc:	f7fd fa9a 	bl	8002414 <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ee2:	e009      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee4:	f7fd fa96 	bl	8002414 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d902      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	74fb      	strb	r3, [r7, #19]
        break;
 8004ef6:	e005      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ef8:	4b31      	ldr	r3, [pc, #196]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ef      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d15c      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f0a:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01f      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d019      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f28:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f54:	4a19      	ldr	r2, [pc, #100]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7fd fa55 	bl	8002414 <HAL_GetTick>
 8004f6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f6c:	e00b      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6e:	f7fd fa51 	bl	8002414 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d902      	bls.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	74fb      	strb	r3, [r7, #19]
            break;
 8004f84:	e006      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ec      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f9a:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004faa:	4904      	ldr	r1, [pc, #16]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fb2:	e009      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	74bb      	strb	r3, [r7, #18]
 8004fb8:	e006      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc4:	7cfb      	ldrb	r3, [r7, #19]
 8004fc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fc8:	7c7b      	ldrb	r3, [r7, #17]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d105      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fce:	4b9e      	ldr	r3, [pc, #632]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	4a9d      	ldr	r2, [pc, #628]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fe6:	4b98      	ldr	r3, [pc, #608]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f023 0203 	bic.w	r2, r3, #3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	4994      	ldr	r1, [pc, #592]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005008:	4b8f      	ldr	r3, [pc, #572]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f023 020c 	bic.w	r2, r3, #12
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	498c      	ldr	r1, [pc, #560]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800502a:	4b87      	ldr	r3, [pc, #540]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005030:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	4983      	ldr	r1, [pc, #524]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800504c:	4b7e      	ldr	r3, [pc, #504]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	497b      	ldr	r1, [pc, #492]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800506e:	4b76      	ldr	r3, [pc, #472]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507c:	4972      	ldr	r1, [pc, #456]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005090:	4b6d      	ldr	r3, [pc, #436]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	496a      	ldr	r1, [pc, #424]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050b2:	4b65      	ldr	r3, [pc, #404]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c0:	4961      	ldr	r1, [pc, #388]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050d4:	4b5c      	ldr	r3, [pc, #368]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e2:	4959      	ldr	r1, [pc, #356]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050f6:	4b54      	ldr	r3, [pc, #336]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005104:	4950      	ldr	r1, [pc, #320]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005118:	4b4b      	ldr	r3, [pc, #300]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	4948      	ldr	r1, [pc, #288]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800513a:	4b43      	ldr	r3, [pc, #268]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005148:	493f      	ldr	r1, [pc, #252]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d028      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800515c:	4b3a      	ldr	r3, [pc, #232]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516a:	4937      	ldr	r1, [pc, #220]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800517a:	d106      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800517c:	4b32      	ldr	r3, [pc, #200]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4a31      	ldr	r2, [pc, #196]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005186:	60d3      	str	r3, [r2, #12]
 8005188:	e011      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005192:	d10c      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	2101      	movs	r1, #1
 800519a:	4618      	mov	r0, r3
 800519c:	f000 f8c8 	bl	8005330 <RCCEx_PLLSAI1_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80051aa:	7cfb      	ldrb	r3, [r7, #19]
 80051ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d028      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051ba:	4b23      	ldr	r3, [pc, #140]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	491f      	ldr	r1, [pc, #124]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051d8:	d106      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051da:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051e4:	60d3      	str	r3, [r2, #12]
 80051e6:	e011      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051f0:	d10c      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	2101      	movs	r1, #1
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 f899 	bl	8005330 <RCCEx_PLLSAI1_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005202:	7cfb      	ldrb	r3, [r7, #19]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005208:	7cfb      	ldrb	r3, [r7, #19]
 800520a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02b      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005226:	4908      	ldr	r1, [pc, #32]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005236:	d109      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4a02      	ldr	r2, [pc, #8]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005242:	60d3      	str	r3, [r2, #12]
 8005244:	e014      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005254:	d10c      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	2101      	movs	r1, #1
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f867 	bl	8005330 <RCCEx_PLLSAI1_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005266:	7cfb      	ldrb	r3, [r7, #19]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800526c:	7cfb      	ldrb	r3, [r7, #19]
 800526e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d02f      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800527c:	4b2b      	ldr	r3, [pc, #172]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800528a:	4928      	ldr	r1, [pc, #160]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800529a:	d10d      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	2102      	movs	r1, #2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f844 	bl	8005330 <RCCEx_PLLSAI1_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d014      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052b2:	7cfb      	ldrb	r3, [r7, #19]
 80052b4:	74bb      	strb	r3, [r7, #18]
 80052b6:	e011      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c0:	d10c      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3320      	adds	r3, #32
 80052c6:	2102      	movs	r1, #2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 f925 	bl	8005518 <RCCEx_PLLSAI2_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052d2:	7cfb      	ldrb	r3, [r7, #19]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052d8:	7cfb      	ldrb	r3, [r7, #19]
 80052da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052e8:	4b10      	ldr	r3, [pc, #64]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f6:	490d      	ldr	r1, [pc, #52]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800530a:	4b08      	ldr	r3, [pc, #32]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531a:	4904      	ldr	r1, [pc, #16]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005322:	7cbb      	ldrb	r3, [r7, #18]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40021000 	.word	0x40021000

08005330 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800533e:	4b75      	ldr	r3, [pc, #468]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d018      	beq.n	800537c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800534a:	4b72      	ldr	r3, [pc, #456]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0203 	and.w	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d10d      	bne.n	8005376 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
       ||
 800535e:	2b00      	cmp	r3, #0
 8005360:	d009      	beq.n	8005376 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005362:	4b6c      	ldr	r3, [pc, #432]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	091b      	lsrs	r3, r3, #4
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
       ||
 8005372:	429a      	cmp	r2, r3
 8005374:	d047      	beq.n	8005406 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
 800537a:	e044      	b.n	8005406 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b03      	cmp	r3, #3
 8005382:	d018      	beq.n	80053b6 <RCCEx_PLLSAI1_Config+0x86>
 8005384:	2b03      	cmp	r3, #3
 8005386:	d825      	bhi.n	80053d4 <RCCEx_PLLSAI1_Config+0xa4>
 8005388:	2b01      	cmp	r3, #1
 800538a:	d002      	beq.n	8005392 <RCCEx_PLLSAI1_Config+0x62>
 800538c:	2b02      	cmp	r3, #2
 800538e:	d009      	beq.n	80053a4 <RCCEx_PLLSAI1_Config+0x74>
 8005390:	e020      	b.n	80053d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005392:	4b60      	ldr	r3, [pc, #384]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d11d      	bne.n	80053da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a2:	e01a      	b.n	80053da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053a4:	4b5b      	ldr	r3, [pc, #364]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d116      	bne.n	80053de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053b4:	e013      	b.n	80053de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053b6:	4b57      	ldr	r3, [pc, #348]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10f      	bne.n	80053e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053c2:	4b54      	ldr	r3, [pc, #336]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053d2:	e006      	b.n	80053e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
      break;
 80053d8:	e004      	b.n	80053e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053da:	bf00      	nop
 80053dc:	e002      	b.n	80053e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053de:	bf00      	nop
 80053e0:	e000      	b.n	80053e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10d      	bne.n	8005406 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053ea:	4b4a      	ldr	r3, [pc, #296]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6819      	ldr	r1, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	430b      	orrs	r3, r1
 8005400:	4944      	ldr	r1, [pc, #272]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005402:	4313      	orrs	r3, r2
 8005404:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d17d      	bne.n	8005508 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800540c:	4b41      	ldr	r3, [pc, #260]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a40      	ldr	r2, [pc, #256]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005412:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005418:	f7fc fffc 	bl	8002414 <HAL_GetTick>
 800541c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800541e:	e009      	b.n	8005434 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005420:	f7fc fff8 	bl	8002414 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d902      	bls.n	8005434 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	73fb      	strb	r3, [r7, #15]
        break;
 8005432:	e005      	b.n	8005440 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005434:	4b37      	ldr	r3, [pc, #220]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1ef      	bne.n	8005420 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005440:	7bfb      	ldrb	r3, [r7, #15]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d160      	bne.n	8005508 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d111      	bne.n	8005470 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800544c:	4b31      	ldr	r3, [pc, #196]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6892      	ldr	r2, [r2, #8]
 800545c:	0211      	lsls	r1, r2, #8
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	68d2      	ldr	r2, [r2, #12]
 8005462:	0912      	lsrs	r2, r2, #4
 8005464:	0452      	lsls	r2, r2, #17
 8005466:	430a      	orrs	r2, r1
 8005468:	492a      	ldr	r1, [pc, #168]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546a:	4313      	orrs	r3, r2
 800546c:	610b      	str	r3, [r1, #16]
 800546e:	e027      	b.n	80054c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d112      	bne.n	800549c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005476:	4b27      	ldr	r3, [pc, #156]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800547e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6892      	ldr	r2, [r2, #8]
 8005486:	0211      	lsls	r1, r2, #8
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6912      	ldr	r2, [r2, #16]
 800548c:	0852      	lsrs	r2, r2, #1
 800548e:	3a01      	subs	r2, #1
 8005490:	0552      	lsls	r2, r2, #21
 8005492:	430a      	orrs	r2, r1
 8005494:	491f      	ldr	r1, [pc, #124]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005496:	4313      	orrs	r3, r2
 8005498:	610b      	str	r3, [r1, #16]
 800549a:	e011      	b.n	80054c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800549c:	4b1d      	ldr	r3, [pc, #116]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6892      	ldr	r2, [r2, #8]
 80054ac:	0211      	lsls	r1, r2, #8
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6952      	ldr	r2, [r2, #20]
 80054b2:	0852      	lsrs	r2, r2, #1
 80054b4:	3a01      	subs	r2, #1
 80054b6:	0652      	lsls	r2, r2, #25
 80054b8:	430a      	orrs	r2, r1
 80054ba:	4916      	ldr	r1, [pc, #88]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054c0:	4b14      	ldr	r3, [pc, #80]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a13      	ldr	r2, [pc, #76]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054cc:	f7fc ffa2 	bl	8002414 <HAL_GetTick>
 80054d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054d2:	e009      	b.n	80054e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054d4:	f7fc ff9e 	bl	8002414 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d902      	bls.n	80054e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	73fb      	strb	r3, [r7, #15]
          break;
 80054e6:	e005      	b.n	80054f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054e8:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ef      	beq.n	80054d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054fa:	4b06      	ldr	r3, [pc, #24]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	4904      	ldr	r1, [pc, #16]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005504:	4313      	orrs	r3, r2
 8005506:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40021000 	.word	0x40021000

08005518 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005526:	4b6a      	ldr	r3, [pc, #424]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d018      	beq.n	8005564 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005532:	4b67      	ldr	r3, [pc, #412]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0203 	and.w	r2, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d10d      	bne.n	800555e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
       ||
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800554a:	4b61      	ldr	r3, [pc, #388]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
       ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d047      	beq.n	80055ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
 8005562:	e044      	b.n	80055ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d018      	beq.n	800559e <RCCEx_PLLSAI2_Config+0x86>
 800556c:	2b03      	cmp	r3, #3
 800556e:	d825      	bhi.n	80055bc <RCCEx_PLLSAI2_Config+0xa4>
 8005570:	2b01      	cmp	r3, #1
 8005572:	d002      	beq.n	800557a <RCCEx_PLLSAI2_Config+0x62>
 8005574:	2b02      	cmp	r3, #2
 8005576:	d009      	beq.n	800558c <RCCEx_PLLSAI2_Config+0x74>
 8005578:	e020      	b.n	80055bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800557a:	4b55      	ldr	r3, [pc, #340]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d11d      	bne.n	80055c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800558a:	e01a      	b.n	80055c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800558c:	4b50      	ldr	r3, [pc, #320]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005594:	2b00      	cmp	r3, #0
 8005596:	d116      	bne.n	80055c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800559c:	e013      	b.n	80055c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800559e:	4b4c      	ldr	r3, [pc, #304]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10f      	bne.n	80055ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055aa:	4b49      	ldr	r3, [pc, #292]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055ba:	e006      	b.n	80055ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
      break;
 80055c0:	e004      	b.n	80055cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055c2:	bf00      	nop
 80055c4:	e002      	b.n	80055cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055c6:	bf00      	nop
 80055c8:	e000      	b.n	80055cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10d      	bne.n	80055ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055d2:	4b3f      	ldr	r3, [pc, #252]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6819      	ldr	r1, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	430b      	orrs	r3, r1
 80055e8:	4939      	ldr	r1, [pc, #228]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d167      	bne.n	80056c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055f4:	4b36      	ldr	r3, [pc, #216]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a35      	ldr	r2, [pc, #212]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005600:	f7fc ff08 	bl	8002414 <HAL_GetTick>
 8005604:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005606:	e009      	b.n	800561c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005608:	f7fc ff04 	bl	8002414 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d902      	bls.n	800561c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	73fb      	strb	r3, [r7, #15]
        break;
 800561a:	e005      	b.n	8005628 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800561c:	4b2c      	ldr	r3, [pc, #176]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1ef      	bne.n	8005608 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d14a      	bne.n	80056c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d111      	bne.n	8005658 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005634:	4b26      	ldr	r3, [pc, #152]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800563c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6892      	ldr	r2, [r2, #8]
 8005644:	0211      	lsls	r1, r2, #8
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	68d2      	ldr	r2, [r2, #12]
 800564a:	0912      	lsrs	r2, r2, #4
 800564c:	0452      	lsls	r2, r2, #17
 800564e:	430a      	orrs	r2, r1
 8005650:	491f      	ldr	r1, [pc, #124]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005652:	4313      	orrs	r3, r2
 8005654:	614b      	str	r3, [r1, #20]
 8005656:	e011      	b.n	800567c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005658:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005660:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6892      	ldr	r2, [r2, #8]
 8005668:	0211      	lsls	r1, r2, #8
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6912      	ldr	r2, [r2, #16]
 800566e:	0852      	lsrs	r2, r2, #1
 8005670:	3a01      	subs	r2, #1
 8005672:	0652      	lsls	r2, r2, #25
 8005674:	430a      	orrs	r2, r1
 8005676:	4916      	ldr	r1, [pc, #88]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005678:	4313      	orrs	r3, r2
 800567a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800567c:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005686:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005688:	f7fc fec4 	bl	8002414 <HAL_GetTick>
 800568c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800568e:	e009      	b.n	80056a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005690:	f7fc fec0 	bl	8002414 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d902      	bls.n	80056a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	73fb      	strb	r3, [r7, #15]
          break;
 80056a2:	e005      	b.n	80056b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056a4:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0ef      	beq.n	8005690 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b8:	695a      	ldr	r2, [r3, #20]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	4904      	ldr	r1, [pc, #16]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40021000 	.word	0x40021000

080056d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e049      	b.n	800577a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fc fbc0 	bl	8001e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3304      	adds	r3, #4
 8005710:	4619      	mov	r1, r3
 8005712:	4610      	mov	r0, r2
 8005714:	f000 fd0c 	bl	8006130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b01      	cmp	r3, #1
 8005796:	d001      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e04f      	b.n	800583c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a23      	ldr	r2, [pc, #140]	; (8005848 <HAL_TIM_Base_Start_IT+0xc4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01d      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c6:	d018      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1f      	ldr	r2, [pc, #124]	; (800584c <HAL_TIM_Base_Start_IT+0xc8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d013      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1e      	ldr	r2, [pc, #120]	; (8005850 <HAL_TIM_Base_Start_IT+0xcc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00e      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <HAL_TIM_Base_Start_IT+0xd0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d009      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1b      	ldr	r2, [pc, #108]	; (8005858 <HAL_TIM_Base_Start_IT+0xd4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a19      	ldr	r2, [pc, #100]	; (800585c <HAL_TIM_Base_Start_IT+0xd8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d115      	bne.n	8005826 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	4b17      	ldr	r3, [pc, #92]	; (8005860 <HAL_TIM_Base_Start_IT+0xdc>)
 8005802:	4013      	ands	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b06      	cmp	r3, #6
 800580a:	d015      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0xb4>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005812:	d011      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005824:	e008      	b.n	8005838 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0201 	orr.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e000      	b.n	800583a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005838:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40013400 	.word	0x40013400
 800585c:	40014000 	.word	0x40014000
 8005860:	00010007 	.word	0x00010007

08005864 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e049      	b.n	800590a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fc fad2 	bl	8001e34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3304      	adds	r3, #4
 80058a0:	4619      	mov	r1, r3
 80058a2:	4610      	mov	r0, r2
 80058a4:	f000 fc44 	bl	8006130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <HAL_TIM_PWM_Start+0x24>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e03c      	b.n	80059b2 <HAL_TIM_PWM_Start+0x9e>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b04      	cmp	r3, #4
 800593c:	d109      	bne.n	8005952 <HAL_TIM_PWM_Start+0x3e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b01      	cmp	r3, #1
 8005948:	bf14      	ite	ne
 800594a:	2301      	movne	r3, #1
 800594c:	2300      	moveq	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	e02f      	b.n	80059b2 <HAL_TIM_PWM_Start+0x9e>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b08      	cmp	r3, #8
 8005956:	d109      	bne.n	800596c <HAL_TIM_PWM_Start+0x58>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b01      	cmp	r3, #1
 8005962:	bf14      	ite	ne
 8005964:	2301      	movne	r3, #1
 8005966:	2300      	moveq	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	e022      	b.n	80059b2 <HAL_TIM_PWM_Start+0x9e>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b0c      	cmp	r3, #12
 8005970:	d109      	bne.n	8005986 <HAL_TIM_PWM_Start+0x72>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b01      	cmp	r3, #1
 800597c:	bf14      	ite	ne
 800597e:	2301      	movne	r3, #1
 8005980:	2300      	moveq	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	e015      	b.n	80059b2 <HAL_TIM_PWM_Start+0x9e>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b10      	cmp	r3, #16
 800598a:	d109      	bne.n	80059a0 <HAL_TIM_PWM_Start+0x8c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e008      	b.n	80059b2 <HAL_TIM_PWM_Start+0x9e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	bf14      	ite	ne
 80059ac:	2301      	movne	r3, #1
 80059ae:	2300      	moveq	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e09c      	b.n	8005af4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <HAL_TIM_PWM_Start+0xb6>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c8:	e023      	b.n	8005a12 <HAL_TIM_PWM_Start+0xfe>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d104      	bne.n	80059da <HAL_TIM_PWM_Start+0xc6>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d8:	e01b      	b.n	8005a12 <HAL_TIM_PWM_Start+0xfe>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d104      	bne.n	80059ea <HAL_TIM_PWM_Start+0xd6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e8:	e013      	b.n	8005a12 <HAL_TIM_PWM_Start+0xfe>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Start+0xe6>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059f8:	e00b      	b.n	8005a12 <HAL_TIM_PWM_Start+0xfe>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b10      	cmp	r3, #16
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Start+0xf6>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a08:	e003      	b.n	8005a12 <HAL_TIM_PWM_Start+0xfe>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2201      	movs	r2, #1
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 ff92 	bl	8006944 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a35      	ldr	r2, [pc, #212]	; (8005afc <HAL_TIM_PWM_Start+0x1e8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x13e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a34      	ldr	r2, [pc, #208]	; (8005b00 <HAL_TIM_PWM_Start+0x1ec>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x13e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a32      	ldr	r2, [pc, #200]	; (8005b04 <HAL_TIM_PWM_Start+0x1f0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x13e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a31      	ldr	r2, [pc, #196]	; (8005b08 <HAL_TIM_PWM_Start+0x1f4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x13e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a2f      	ldr	r2, [pc, #188]	; (8005b0c <HAL_TIM_PWM_Start+0x1f8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d101      	bne.n	8005a56 <HAL_TIM_PWM_Start+0x142>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <HAL_TIM_PWM_Start+0x144>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a22      	ldr	r2, [pc, #136]	; (8005afc <HAL_TIM_PWM_Start+0x1e8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d01d      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x19e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7e:	d018      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x19e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a22      	ldr	r2, [pc, #136]	; (8005b10 <HAL_TIM_PWM_Start+0x1fc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x19e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <HAL_TIM_PWM_Start+0x200>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x19e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1f      	ldr	r2, [pc, #124]	; (8005b18 <HAL_TIM_PWM_Start+0x204>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x19e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a17      	ldr	r2, [pc, #92]	; (8005b00 <HAL_TIM_PWM_Start+0x1ec>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x19e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <HAL_TIM_PWM_Start+0x1f0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d115      	bne.n	8005ade <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	4b18      	ldr	r3, [pc, #96]	; (8005b1c <HAL_TIM_PWM_Start+0x208>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b06      	cmp	r3, #6
 8005ac2:	d015      	beq.n	8005af0 <HAL_TIM_PWM_Start+0x1dc>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aca:	d011      	beq.n	8005af0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0201 	orr.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005adc:	e008      	b.n	8005af0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e000      	b.n	8005af2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40013400 	.word	0x40013400
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40014400 	.word	0x40014400
 8005b0c:	40014800 	.word	0x40014800
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40000c00 	.word	0x40000c00
 8005b1c:	00010007 	.word	0x00010007

08005b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d020      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01b      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0202 	mvn.w	r2, #2
 8005b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fac1 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005b70:	e005      	b.n	8005b7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fab3 	bl	80060de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fac4 	bl	8006106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d020      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01b      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0204 	mvn.w	r2, #4
 8005ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa9b 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa8d 	bl	80060de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa9e 	bl	8006106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d020      	beq.n	8005c1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01b      	beq.n	8005c1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0208 	mvn.w	r2, #8
 8005bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa75 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa67 	bl	80060de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fa78 	bl	8006106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d020      	beq.n	8005c68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01b      	beq.n	8005c68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0210 	mvn.w	r2, #16
 8005c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2208      	movs	r2, #8
 8005c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fa4f 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005c54:	e005      	b.n	8005c62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa41 	bl	80060de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fa52 	bl	8006106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00c      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d007      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0201 	mvn.w	r2, #1
 8005c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fb ffc6 	bl	8001c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 ff80 	bl	8006bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 ff78 	bl	8006bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00c      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa11 	bl	800611a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00c      	beq.n	8005d1c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0220 	mvn.w	r2, #32
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 ff40 	bl	8006b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e0ff      	b.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b14      	cmp	r3, #20
 8005d4e:	f200 80f0 	bhi.w	8005f32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d52:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005dad 	.word	0x08005dad
 8005d5c:	08005f33 	.word	0x08005f33
 8005d60:	08005f33 	.word	0x08005f33
 8005d64:	08005f33 	.word	0x08005f33
 8005d68:	08005ded 	.word	0x08005ded
 8005d6c:	08005f33 	.word	0x08005f33
 8005d70:	08005f33 	.word	0x08005f33
 8005d74:	08005f33 	.word	0x08005f33
 8005d78:	08005e2f 	.word	0x08005e2f
 8005d7c:	08005f33 	.word	0x08005f33
 8005d80:	08005f33 	.word	0x08005f33
 8005d84:	08005f33 	.word	0x08005f33
 8005d88:	08005e6f 	.word	0x08005e6f
 8005d8c:	08005f33 	.word	0x08005f33
 8005d90:	08005f33 	.word	0x08005f33
 8005d94:	08005f33 	.word	0x08005f33
 8005d98:	08005eb1 	.word	0x08005eb1
 8005d9c:	08005f33 	.word	0x08005f33
 8005da0:	08005f33 	.word	0x08005f33
 8005da4:	08005f33 	.word	0x08005f33
 8005da8:	08005ef1 	.word	0x08005ef1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fa56 	bl	8006264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0208 	orr.w	r2, r2, #8
 8005dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0204 	bic.w	r2, r2, #4
 8005dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6999      	ldr	r1, [r3, #24]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	619a      	str	r2, [r3, #24]
      break;
 8005dea:	e0a5      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fac6 	bl	8006384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6999      	ldr	r1, [r3, #24]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	021a      	lsls	r2, r3, #8
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	619a      	str	r2, [r3, #24]
      break;
 8005e2c:	e084      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fb2f 	bl	8006498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0208 	orr.w	r2, r2, #8
 8005e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0204 	bic.w	r2, r2, #4
 8005e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69d9      	ldr	r1, [r3, #28]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	61da      	str	r2, [r3, #28]
      break;
 8005e6c:	e064      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fb97 	bl	80065a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69d9      	ldr	r1, [r3, #28]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	021a      	lsls	r2, r3, #8
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	61da      	str	r2, [r3, #28]
      break;
 8005eae:	e043      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fbe0 	bl	800667c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0208 	orr.w	r2, r2, #8
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0204 	bic.w	r2, r2, #4
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005eee:	e023      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fc24 	bl	8006744 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	021a      	lsls	r2, r3, #8
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f30:	e002      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	75fb      	strb	r3, [r7, #23]
      break;
 8005f36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop

08005f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_TIM_ConfigClockSource+0x1c>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e0b6      	b.n	80060d6 <HAL_TIM_ConfigClockSource+0x18a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa4:	d03e      	beq.n	8006024 <HAL_TIM_ConfigClockSource+0xd8>
 8005fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005faa:	f200 8087 	bhi.w	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb2:	f000 8086 	beq.w	80060c2 <HAL_TIM_ConfigClockSource+0x176>
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fba:	d87f      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fbc:	2b70      	cmp	r3, #112	; 0x70
 8005fbe:	d01a      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0xaa>
 8005fc0:	2b70      	cmp	r3, #112	; 0x70
 8005fc2:	d87b      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fc4:	2b60      	cmp	r3, #96	; 0x60
 8005fc6:	d050      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x11e>
 8005fc8:	2b60      	cmp	r3, #96	; 0x60
 8005fca:	d877      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fcc:	2b50      	cmp	r3, #80	; 0x50
 8005fce:	d03c      	beq.n	800604a <HAL_TIM_ConfigClockSource+0xfe>
 8005fd0:	2b50      	cmp	r3, #80	; 0x50
 8005fd2:	d873      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d058      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x13e>
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d86f      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fdc:	2b30      	cmp	r3, #48	; 0x30
 8005fde:	d064      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x15e>
 8005fe0:	2b30      	cmp	r3, #48	; 0x30
 8005fe2:	d86b      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d060      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x15e>
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d867      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d05c      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x15e>
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d05a      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x15e>
 8005ff4:	e062      	b.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006006:	f000 fc7d 	bl	8006904 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	609a      	str	r2, [r3, #8]
      break;
 8006022:	e04f      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006034:	f000 fc66 	bl	8006904 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006046:	609a      	str	r2, [r3, #8]
      break;
 8006048:	e03c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006056:	461a      	mov	r2, r3
 8006058:	f000 fbda 	bl	8006810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2150      	movs	r1, #80	; 0x50
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fc33 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 8006068:	e02c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006076:	461a      	mov	r2, r3
 8006078:	f000 fbf9 	bl	800686e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2160      	movs	r1, #96	; 0x60
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fc23 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 8006088:	e01c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006096:	461a      	mov	r2, r3
 8006098:	f000 fbba 	bl	8006810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2140      	movs	r1, #64	; 0x40
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fc13 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 80060a8:	e00c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f000 fc0a 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 80060ba:	e003      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	73fb      	strb	r3, [r7, #15]
      break;
 80060c0:	e000      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a40      	ldr	r2, [pc, #256]	; (8006244 <TIM_Base_SetConfig+0x114>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d013      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614e:	d00f      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a3d      	ldr	r2, [pc, #244]	; (8006248 <TIM_Base_SetConfig+0x118>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00b      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a3c      	ldr	r2, [pc, #240]	; (800624c <TIM_Base_SetConfig+0x11c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3b      	ldr	r2, [pc, #236]	; (8006250 <TIM_Base_SetConfig+0x120>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3a      	ldr	r2, [pc, #232]	; (8006254 <TIM_Base_SetConfig+0x124>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d108      	bne.n	8006182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2f      	ldr	r2, [pc, #188]	; (8006244 <TIM_Base_SetConfig+0x114>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01f      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006190:	d01b      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2c      	ldr	r2, [pc, #176]	; (8006248 <TIM_Base_SetConfig+0x118>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d017      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2b      	ldr	r2, [pc, #172]	; (800624c <TIM_Base_SetConfig+0x11c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <TIM_Base_SetConfig+0x120>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00f      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a29      	ldr	r2, [pc, #164]	; (8006254 <TIM_Base_SetConfig+0x124>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00b      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a28      	ldr	r2, [pc, #160]	; (8006258 <TIM_Base_SetConfig+0x128>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d007      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a27      	ldr	r2, [pc, #156]	; (800625c <TIM_Base_SetConfig+0x12c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a26      	ldr	r2, [pc, #152]	; (8006260 <TIM_Base_SetConfig+0x130>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d108      	bne.n	80061dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a10      	ldr	r2, [pc, #64]	; (8006244 <TIM_Base_SetConfig+0x114>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00f      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a12      	ldr	r2, [pc, #72]	; (8006254 <TIM_Base_SetConfig+0x124>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a11      	ldr	r2, [pc, #68]	; (8006258 <TIM_Base_SetConfig+0x128>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a10      	ldr	r2, [pc, #64]	; (800625c <TIM_Base_SetConfig+0x12c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a0f      	ldr	r2, [pc, #60]	; (8006260 <TIM_Base_SetConfig+0x130>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d103      	bne.n	8006230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	615a      	str	r2, [r3, #20]
}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800
 8006250:	40000c00 	.word	0x40000c00
 8006254:	40013400 	.word	0x40013400
 8006258:	40014000 	.word	0x40014000
 800625c:	40014400 	.word	0x40014400
 8006260:	40014800 	.word	0x40014800

08006264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	f023 0201 	bic.w	r2, r3, #1
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0303 	bic.w	r3, r3, #3
 800629e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f023 0302 	bic.w	r3, r3, #2
 80062b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a2c      	ldr	r2, [pc, #176]	; (8006370 <TIM_OC1_SetConfig+0x10c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00f      	beq.n	80062e4 <TIM_OC1_SetConfig+0x80>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a2b      	ldr	r2, [pc, #172]	; (8006374 <TIM_OC1_SetConfig+0x110>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00b      	beq.n	80062e4 <TIM_OC1_SetConfig+0x80>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a2a      	ldr	r2, [pc, #168]	; (8006378 <TIM_OC1_SetConfig+0x114>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d007      	beq.n	80062e4 <TIM_OC1_SetConfig+0x80>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a29      	ldr	r2, [pc, #164]	; (800637c <TIM_OC1_SetConfig+0x118>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC1_SetConfig+0x80>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a28      	ldr	r2, [pc, #160]	; (8006380 <TIM_OC1_SetConfig+0x11c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d10c      	bne.n	80062fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0308 	bic.w	r3, r3, #8
 80062ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 0304 	bic.w	r3, r3, #4
 80062fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <TIM_OC1_SetConfig+0x10c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00f      	beq.n	8006326 <TIM_OC1_SetConfig+0xc2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1a      	ldr	r2, [pc, #104]	; (8006374 <TIM_OC1_SetConfig+0x110>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00b      	beq.n	8006326 <TIM_OC1_SetConfig+0xc2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a19      	ldr	r2, [pc, #100]	; (8006378 <TIM_OC1_SetConfig+0x114>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d007      	beq.n	8006326 <TIM_OC1_SetConfig+0xc2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a18      	ldr	r2, [pc, #96]	; (800637c <TIM_OC1_SetConfig+0x118>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_OC1_SetConfig+0xc2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a17      	ldr	r2, [pc, #92]	; (8006380 <TIM_OC1_SetConfig+0x11c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d111      	bne.n	800634a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800632c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	621a      	str	r2, [r3, #32]
}
 8006364:	bf00      	nop
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40013400 	.word	0x40013400
 8006378:	40014000 	.word	0x40014000
 800637c:	40014400 	.word	0x40014400
 8006380:	40014800 	.word	0x40014800

08006384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f023 0210 	bic.w	r2, r3, #16
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f023 0320 	bic.w	r3, r3, #32
 80063d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a28      	ldr	r2, [pc, #160]	; (8006484 <TIM_OC2_SetConfig+0x100>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_OC2_SetConfig+0x6c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a27      	ldr	r2, [pc, #156]	; (8006488 <TIM_OC2_SetConfig+0x104>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10d      	bne.n	800640c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a1d      	ldr	r2, [pc, #116]	; (8006484 <TIM_OC2_SetConfig+0x100>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00f      	beq.n	8006434 <TIM_OC2_SetConfig+0xb0>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <TIM_OC2_SetConfig+0x104>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00b      	beq.n	8006434 <TIM_OC2_SetConfig+0xb0>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a1b      	ldr	r2, [pc, #108]	; (800648c <TIM_OC2_SetConfig+0x108>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d007      	beq.n	8006434 <TIM_OC2_SetConfig+0xb0>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <TIM_OC2_SetConfig+0x10c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d003      	beq.n	8006434 <TIM_OC2_SetConfig+0xb0>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a19      	ldr	r2, [pc, #100]	; (8006494 <TIM_OC2_SetConfig+0x110>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d113      	bne.n	800645c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800643a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	621a      	str	r2, [r3, #32]
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40012c00 	.word	0x40012c00
 8006488:	40013400 	.word	0x40013400
 800648c:	40014000 	.word	0x40014000
 8006490:	40014400 	.word	0x40014400
 8006494:	40014800 	.word	0x40014800

08006498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0303 	bic.w	r3, r3, #3
 80064d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a27      	ldr	r2, [pc, #156]	; (8006594 <TIM_OC3_SetConfig+0xfc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_OC3_SetConfig+0x6a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a26      	ldr	r2, [pc, #152]	; (8006598 <TIM_OC3_SetConfig+0x100>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d10d      	bne.n	800651e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	021b      	lsls	r3, r3, #8
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800651c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a1c      	ldr	r2, [pc, #112]	; (8006594 <TIM_OC3_SetConfig+0xfc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00f      	beq.n	8006546 <TIM_OC3_SetConfig+0xae>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a1b      	ldr	r2, [pc, #108]	; (8006598 <TIM_OC3_SetConfig+0x100>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00b      	beq.n	8006546 <TIM_OC3_SetConfig+0xae>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1a      	ldr	r2, [pc, #104]	; (800659c <TIM_OC3_SetConfig+0x104>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d007      	beq.n	8006546 <TIM_OC3_SetConfig+0xae>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a19      	ldr	r2, [pc, #100]	; (80065a0 <TIM_OC3_SetConfig+0x108>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_OC3_SetConfig+0xae>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a18      	ldr	r2, [pc, #96]	; (80065a4 <TIM_OC3_SetConfig+0x10c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d113      	bne.n	800656e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800654c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	621a      	str	r2, [r3, #32]
}
 8006588:	bf00      	nop
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800

080065a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	031b      	lsls	r3, r3, #12
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a18      	ldr	r2, [pc, #96]	; (8006668 <TIM_OC4_SetConfig+0xc0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00f      	beq.n	800662c <TIM_OC4_SetConfig+0x84>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a17      	ldr	r2, [pc, #92]	; (800666c <TIM_OC4_SetConfig+0xc4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00b      	beq.n	800662c <TIM_OC4_SetConfig+0x84>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a16      	ldr	r2, [pc, #88]	; (8006670 <TIM_OC4_SetConfig+0xc8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <TIM_OC4_SetConfig+0x84>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a15      	ldr	r2, [pc, #84]	; (8006674 <TIM_OC4_SetConfig+0xcc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_OC4_SetConfig+0x84>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a14      	ldr	r2, [pc, #80]	; (8006678 <TIM_OC4_SetConfig+0xd0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d109      	bne.n	8006640 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	019b      	lsls	r3, r3, #6
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40013400 	.word	0x40013400
 8006670:	40014000 	.word	0x40014000
 8006674:	40014400 	.word	0x40014400
 8006678:	40014800 	.word	0x40014800

0800667c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	041b      	lsls	r3, r3, #16
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a17      	ldr	r2, [pc, #92]	; (8006730 <TIM_OC5_SetConfig+0xb4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d00f      	beq.n	80066f6 <TIM_OC5_SetConfig+0x7a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a16      	ldr	r2, [pc, #88]	; (8006734 <TIM_OC5_SetConfig+0xb8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00b      	beq.n	80066f6 <TIM_OC5_SetConfig+0x7a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a15      	ldr	r2, [pc, #84]	; (8006738 <TIM_OC5_SetConfig+0xbc>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d007      	beq.n	80066f6 <TIM_OC5_SetConfig+0x7a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a14      	ldr	r2, [pc, #80]	; (800673c <TIM_OC5_SetConfig+0xc0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d003      	beq.n	80066f6 <TIM_OC5_SetConfig+0x7a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a13      	ldr	r2, [pc, #76]	; (8006740 <TIM_OC5_SetConfig+0xc4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d109      	bne.n	800670a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	621a      	str	r2, [r3, #32]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	40012c00 	.word	0x40012c00
 8006734:	40013400 	.word	0x40013400
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800

08006744 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800678a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	051b      	lsls	r3, r3, #20
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a18      	ldr	r2, [pc, #96]	; (80067fc <TIM_OC6_SetConfig+0xb8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00f      	beq.n	80067c0 <TIM_OC6_SetConfig+0x7c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a17      	ldr	r2, [pc, #92]	; (8006800 <TIM_OC6_SetConfig+0xbc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00b      	beq.n	80067c0 <TIM_OC6_SetConfig+0x7c>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a16      	ldr	r2, [pc, #88]	; (8006804 <TIM_OC6_SetConfig+0xc0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d007      	beq.n	80067c0 <TIM_OC6_SetConfig+0x7c>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a15      	ldr	r2, [pc, #84]	; (8006808 <TIM_OC6_SetConfig+0xc4>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_OC6_SetConfig+0x7c>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a14      	ldr	r2, [pc, #80]	; (800680c <TIM_OC6_SetConfig+0xc8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d109      	bne.n	80067d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	029b      	lsls	r3, r3, #10
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40013400 	.word	0x40013400
 8006804:	40014000 	.word	0x40014000
 8006808:	40014400 	.word	0x40014400
 800680c:	40014800 	.word	0x40014800

08006810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f023 0201 	bic.w	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800683a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f023 030a 	bic.w	r3, r3, #10
 800684c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800686e:	b480      	push	{r7}
 8006870:	b087      	sub	sp, #28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	f023 0210 	bic.w	r2, r3, #16
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006898:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	031b      	lsls	r3, r3, #12
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f043 0307 	orr.w	r3, r3, #7
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	609a      	str	r2, [r3, #8]
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800691e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	021a      	lsls	r2, r3, #8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	431a      	orrs	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4313      	orrs	r3, r2
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	609a      	str	r2, [r3, #8]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f003 031f 	and.w	r3, r3, #31
 8006956:	2201      	movs	r2, #1
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a1a      	ldr	r2, [r3, #32]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	43db      	mvns	r3, r3
 8006966:	401a      	ands	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a1a      	ldr	r2, [r3, #32]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 031f 	and.w	r3, r3, #31
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	fa01 f303 	lsl.w	r3, r1, r3
 800697c:	431a      	orrs	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
	...

08006990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e068      	b.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a2e      	ldr	r2, [pc, #184]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d004      	beq.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a2d      	ldr	r2, [pc, #180]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d108      	bne.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1e      	ldr	r2, [pc, #120]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d01d      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1a:	d018      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1a      	ldr	r2, [pc, #104]	; (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00e      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d009      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a13      	ldr	r2, [pc, #76]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d004      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a14      	ldr	r2, [pc, #80]	; (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d10c      	bne.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40012c00 	.word	0x40012c00
 8006a8c:	40013400 	.word	0x40013400
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40000c00 	.word	0x40000c00
 8006a9c:	40014000 	.word	0x40014000

08006aa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e065      	b.n	8006b88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	041b      	lsls	r3, r3, #16
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a16      	ldr	r2, [pc, #88]	; (8006b94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d004      	beq.n	8006b4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a14      	ldr	r2, [pc, #80]	; (8006b98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d115      	bne.n	8006b76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	051b      	lsls	r3, r3, #20
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	40012c00 	.word	0x40012c00
 8006b98:	40013400 	.word	0x40013400

08006b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e040      	b.n	8006c6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fb f9de 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2224      	movs	r2, #36	; 0x24
 8006c04:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 0201 	bic.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fb6a 	bl	80072f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f8af 	bl	8006d88 <UART_SetConfig>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d101      	bne.n	8006c34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e01b      	b.n	8006c6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0201 	orr.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fbe9 	bl	800743c <UART_CheckIdleState>
 8006c6a:	4603      	mov	r3, r0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	; 0x28
 8006c78:	af02      	add	r7, sp, #8
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	4613      	mov	r3, r2
 8006c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d178      	bne.n	8006d7e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <HAL_UART_Transmit+0x24>
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e071      	b.n	8006d80 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2221      	movs	r2, #33	; 0x21
 8006ca8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006caa:	f7fb fbb3 	bl	8002414 <HAL_GetTick>
 8006cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	88fa      	ldrh	r2, [r7, #6]
 8006cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc8:	d108      	bne.n	8006cdc <HAL_UART_Transmit+0x68>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d104      	bne.n	8006cdc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	e003      	b.n	8006ce4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ce4:	e030      	b.n	8006d48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2200      	movs	r2, #0
 8006cee:	2180      	movs	r1, #128	; 0x80
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fc4b 	bl	800758c <UART_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d004      	beq.n	8006d06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e03c      	b.n	8006d80 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10b      	bne.n	8006d24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	881a      	ldrh	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d18:	b292      	uxth	r2, r2
 8006d1a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	3302      	adds	r3, #2
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e008      	b.n	8006d36 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	781a      	ldrb	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	b292      	uxth	r2, r2
 8006d2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	3301      	adds	r3, #1
 8006d34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1c8      	bne.n	8006ce6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2140      	movs	r1, #64	; 0x40
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fc14 	bl	800758c <UART_WaitOnFlagUntilTimeout>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e005      	b.n	8006d80 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2220      	movs	r2, #32
 8006d78:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e000      	b.n	8006d80 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006d7e:	2302      	movs	r3, #2
  }
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3720      	adds	r7, #32
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d8c:	b08a      	sub	sp, #40	; 0x28
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	431a      	orrs	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4ba4      	ldr	r3, [pc, #656]	; (8007048 <UART_SetConfig+0x2c0>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a99      	ldr	r2, [pc, #612]	; (800704c <UART_SetConfig+0x2c4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d004      	beq.n	8006df4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df0:	4313      	orrs	r3, r2
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e04:	430a      	orrs	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a90      	ldr	r2, [pc, #576]	; (8007050 <UART_SetConfig+0x2c8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d126      	bne.n	8006e60 <UART_SetConfig+0xd8>
 8006e12:	4b90      	ldr	r3, [pc, #576]	; (8007054 <UART_SetConfig+0x2cc>)
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e18:	f003 0303 	and.w	r3, r3, #3
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d81b      	bhi.n	8006e58 <UART_SetConfig+0xd0>
 8006e20:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <UART_SetConfig+0xa0>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e39 	.word	0x08006e39
 8006e2c:	08006e49 	.word	0x08006e49
 8006e30:	08006e41 	.word	0x08006e41
 8006e34:	08006e51 	.word	0x08006e51
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3e:	e116      	b.n	800706e <UART_SetConfig+0x2e6>
 8006e40:	2302      	movs	r3, #2
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e46:	e112      	b.n	800706e <UART_SetConfig+0x2e6>
 8006e48:	2304      	movs	r3, #4
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e4e:	e10e      	b.n	800706e <UART_SetConfig+0x2e6>
 8006e50:	2308      	movs	r3, #8
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e56:	e10a      	b.n	800706e <UART_SetConfig+0x2e6>
 8006e58:	2310      	movs	r3, #16
 8006e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e5e:	e106      	b.n	800706e <UART_SetConfig+0x2e6>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a7c      	ldr	r2, [pc, #496]	; (8007058 <UART_SetConfig+0x2d0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d138      	bne.n	8006edc <UART_SetConfig+0x154>
 8006e6a:	4b7a      	ldr	r3, [pc, #488]	; (8007054 <UART_SetConfig+0x2cc>)
 8006e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e70:	f003 030c 	and.w	r3, r3, #12
 8006e74:	2b0c      	cmp	r3, #12
 8006e76:	d82d      	bhi.n	8006ed4 <UART_SetConfig+0x14c>
 8006e78:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <UART_SetConfig+0xf8>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006eb5 	.word	0x08006eb5
 8006e84:	08006ed5 	.word	0x08006ed5
 8006e88:	08006ed5 	.word	0x08006ed5
 8006e8c:	08006ed5 	.word	0x08006ed5
 8006e90:	08006ec5 	.word	0x08006ec5
 8006e94:	08006ed5 	.word	0x08006ed5
 8006e98:	08006ed5 	.word	0x08006ed5
 8006e9c:	08006ed5 	.word	0x08006ed5
 8006ea0:	08006ebd 	.word	0x08006ebd
 8006ea4:	08006ed5 	.word	0x08006ed5
 8006ea8:	08006ed5 	.word	0x08006ed5
 8006eac:	08006ed5 	.word	0x08006ed5
 8006eb0:	08006ecd 	.word	0x08006ecd
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eba:	e0d8      	b.n	800706e <UART_SetConfig+0x2e6>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec2:	e0d4      	b.n	800706e <UART_SetConfig+0x2e6>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eca:	e0d0      	b.n	800706e <UART_SetConfig+0x2e6>
 8006ecc:	2308      	movs	r3, #8
 8006ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed2:	e0cc      	b.n	800706e <UART_SetConfig+0x2e6>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eda:	e0c8      	b.n	800706e <UART_SetConfig+0x2e6>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a5e      	ldr	r2, [pc, #376]	; (800705c <UART_SetConfig+0x2d4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d125      	bne.n	8006f32 <UART_SetConfig+0x1aa>
 8006ee6:	4b5b      	ldr	r3, [pc, #364]	; (8007054 <UART_SetConfig+0x2cc>)
 8006ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ef0:	2b30      	cmp	r3, #48	; 0x30
 8006ef2:	d016      	beq.n	8006f22 <UART_SetConfig+0x19a>
 8006ef4:	2b30      	cmp	r3, #48	; 0x30
 8006ef6:	d818      	bhi.n	8006f2a <UART_SetConfig+0x1a2>
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d00a      	beq.n	8006f12 <UART_SetConfig+0x18a>
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d814      	bhi.n	8006f2a <UART_SetConfig+0x1a2>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <UART_SetConfig+0x182>
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d008      	beq.n	8006f1a <UART_SetConfig+0x192>
 8006f08:	e00f      	b.n	8006f2a <UART_SetConfig+0x1a2>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f10:	e0ad      	b.n	800706e <UART_SetConfig+0x2e6>
 8006f12:	2302      	movs	r3, #2
 8006f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f18:	e0a9      	b.n	800706e <UART_SetConfig+0x2e6>
 8006f1a:	2304      	movs	r3, #4
 8006f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f20:	e0a5      	b.n	800706e <UART_SetConfig+0x2e6>
 8006f22:	2308      	movs	r3, #8
 8006f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f28:	e0a1      	b.n	800706e <UART_SetConfig+0x2e6>
 8006f2a:	2310      	movs	r3, #16
 8006f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f30:	e09d      	b.n	800706e <UART_SetConfig+0x2e6>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a4a      	ldr	r2, [pc, #296]	; (8007060 <UART_SetConfig+0x2d8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d125      	bne.n	8006f88 <UART_SetConfig+0x200>
 8006f3c:	4b45      	ldr	r3, [pc, #276]	; (8007054 <UART_SetConfig+0x2cc>)
 8006f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f46:	2bc0      	cmp	r3, #192	; 0xc0
 8006f48:	d016      	beq.n	8006f78 <UART_SetConfig+0x1f0>
 8006f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8006f4c:	d818      	bhi.n	8006f80 <UART_SetConfig+0x1f8>
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	d00a      	beq.n	8006f68 <UART_SetConfig+0x1e0>
 8006f52:	2b80      	cmp	r3, #128	; 0x80
 8006f54:	d814      	bhi.n	8006f80 <UART_SetConfig+0x1f8>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <UART_SetConfig+0x1d8>
 8006f5a:	2b40      	cmp	r3, #64	; 0x40
 8006f5c:	d008      	beq.n	8006f70 <UART_SetConfig+0x1e8>
 8006f5e:	e00f      	b.n	8006f80 <UART_SetConfig+0x1f8>
 8006f60:	2300      	movs	r3, #0
 8006f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f66:	e082      	b.n	800706e <UART_SetConfig+0x2e6>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f6e:	e07e      	b.n	800706e <UART_SetConfig+0x2e6>
 8006f70:	2304      	movs	r3, #4
 8006f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f76:	e07a      	b.n	800706e <UART_SetConfig+0x2e6>
 8006f78:	2308      	movs	r3, #8
 8006f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f7e:	e076      	b.n	800706e <UART_SetConfig+0x2e6>
 8006f80:	2310      	movs	r3, #16
 8006f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f86:	e072      	b.n	800706e <UART_SetConfig+0x2e6>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a35      	ldr	r2, [pc, #212]	; (8007064 <UART_SetConfig+0x2dc>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d12a      	bne.n	8006fe8 <UART_SetConfig+0x260>
 8006f92:	4b30      	ldr	r3, [pc, #192]	; (8007054 <UART_SetConfig+0x2cc>)
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa0:	d01a      	beq.n	8006fd8 <UART_SetConfig+0x250>
 8006fa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa6:	d81b      	bhi.n	8006fe0 <UART_SetConfig+0x258>
 8006fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fac:	d00c      	beq.n	8006fc8 <UART_SetConfig+0x240>
 8006fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fb2:	d815      	bhi.n	8006fe0 <UART_SetConfig+0x258>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <UART_SetConfig+0x238>
 8006fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fbc:	d008      	beq.n	8006fd0 <UART_SetConfig+0x248>
 8006fbe:	e00f      	b.n	8006fe0 <UART_SetConfig+0x258>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fc6:	e052      	b.n	800706e <UART_SetConfig+0x2e6>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fce:	e04e      	b.n	800706e <UART_SetConfig+0x2e6>
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fd6:	e04a      	b.n	800706e <UART_SetConfig+0x2e6>
 8006fd8:	2308      	movs	r3, #8
 8006fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fde:	e046      	b.n	800706e <UART_SetConfig+0x2e6>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe6:	e042      	b.n	800706e <UART_SetConfig+0x2e6>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a17      	ldr	r2, [pc, #92]	; (800704c <UART_SetConfig+0x2c4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d13a      	bne.n	8007068 <UART_SetConfig+0x2e0>
 8006ff2:	4b18      	ldr	r3, [pc, #96]	; (8007054 <UART_SetConfig+0x2cc>)
 8006ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ffc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007000:	d01a      	beq.n	8007038 <UART_SetConfig+0x2b0>
 8007002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007006:	d81b      	bhi.n	8007040 <UART_SetConfig+0x2b8>
 8007008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800700c:	d00c      	beq.n	8007028 <UART_SetConfig+0x2a0>
 800700e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007012:	d815      	bhi.n	8007040 <UART_SetConfig+0x2b8>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <UART_SetConfig+0x298>
 8007018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800701c:	d008      	beq.n	8007030 <UART_SetConfig+0x2a8>
 800701e:	e00f      	b.n	8007040 <UART_SetConfig+0x2b8>
 8007020:	2300      	movs	r3, #0
 8007022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007026:	e022      	b.n	800706e <UART_SetConfig+0x2e6>
 8007028:	2302      	movs	r3, #2
 800702a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800702e:	e01e      	b.n	800706e <UART_SetConfig+0x2e6>
 8007030:	2304      	movs	r3, #4
 8007032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007036:	e01a      	b.n	800706e <UART_SetConfig+0x2e6>
 8007038:	2308      	movs	r3, #8
 800703a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800703e:	e016      	b.n	800706e <UART_SetConfig+0x2e6>
 8007040:	2310      	movs	r3, #16
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007046:	e012      	b.n	800706e <UART_SetConfig+0x2e6>
 8007048:	efff69f3 	.word	0xefff69f3
 800704c:	40008000 	.word	0x40008000
 8007050:	40013800 	.word	0x40013800
 8007054:	40021000 	.word	0x40021000
 8007058:	40004400 	.word	0x40004400
 800705c:	40004800 	.word	0x40004800
 8007060:	40004c00 	.word	0x40004c00
 8007064:	40005000 	.word	0x40005000
 8007068:	2310      	movs	r3, #16
 800706a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a9f      	ldr	r2, [pc, #636]	; (80072f0 <UART_SetConfig+0x568>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d17a      	bne.n	800716e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800707c:	2b08      	cmp	r3, #8
 800707e:	d824      	bhi.n	80070ca <UART_SetConfig+0x342>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <UART_SetConfig+0x300>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070ad 	.word	0x080070ad
 800708c:	080070cb 	.word	0x080070cb
 8007090:	080070b5 	.word	0x080070b5
 8007094:	080070cb 	.word	0x080070cb
 8007098:	080070bb 	.word	0x080070bb
 800709c:	080070cb 	.word	0x080070cb
 80070a0:	080070cb 	.word	0x080070cb
 80070a4:	080070cb 	.word	0x080070cb
 80070a8:	080070c3 	.word	0x080070c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ac:	f7fd fd98 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 80070b0:	61f8      	str	r0, [r7, #28]
        break;
 80070b2:	e010      	b.n	80070d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b4:	4b8f      	ldr	r3, [pc, #572]	; (80072f4 <UART_SetConfig+0x56c>)
 80070b6:	61fb      	str	r3, [r7, #28]
        break;
 80070b8:	e00d      	b.n	80070d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ba:	f7fd fcf9 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 80070be:	61f8      	str	r0, [r7, #28]
        break;
 80070c0:	e009      	b.n	80070d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070c6:	61fb      	str	r3, [r7, #28]
        break;
 80070c8:	e005      	b.n	80070d6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80fb 	beq.w	80072d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	4613      	mov	r3, r2
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	4413      	add	r3, r2
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d305      	bcc.n	80070fa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070f4:	69fa      	ldr	r2, [r7, #28]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d903      	bls.n	8007102 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007100:	e0e8      	b.n	80072d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	2200      	movs	r2, #0
 8007106:	461c      	mov	r4, r3
 8007108:	4615      	mov	r5, r2
 800710a:	f04f 0200 	mov.w	r2, #0
 800710e:	f04f 0300 	mov.w	r3, #0
 8007112:	022b      	lsls	r3, r5, #8
 8007114:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007118:	0222      	lsls	r2, r4, #8
 800711a:	68f9      	ldr	r1, [r7, #12]
 800711c:	6849      	ldr	r1, [r1, #4]
 800711e:	0849      	lsrs	r1, r1, #1
 8007120:	2000      	movs	r0, #0
 8007122:	4688      	mov	r8, r1
 8007124:	4681      	mov	r9, r0
 8007126:	eb12 0a08 	adds.w	sl, r2, r8
 800712a:	eb43 0b09 	adc.w	fp, r3, r9
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	603b      	str	r3, [r7, #0]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800713c:	4650      	mov	r0, sl
 800713e:	4659      	mov	r1, fp
 8007140:	f7f9 fbc4 	bl	80008cc <__aeabi_uldivmod>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	4613      	mov	r3, r2
 800714a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007152:	d308      	bcc.n	8007166 <UART_SetConfig+0x3de>
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800715a:	d204      	bcs.n	8007166 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	60da      	str	r2, [r3, #12]
 8007164:	e0b6      	b.n	80072d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800716c:	e0b2      	b.n	80072d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007176:	d15e      	bne.n	8007236 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800717c:	2b08      	cmp	r3, #8
 800717e:	d828      	bhi.n	80071d2 <UART_SetConfig+0x44a>
 8007180:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <UART_SetConfig+0x400>)
 8007182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007186:	bf00      	nop
 8007188:	080071ad 	.word	0x080071ad
 800718c:	080071b5 	.word	0x080071b5
 8007190:	080071bd 	.word	0x080071bd
 8007194:	080071d3 	.word	0x080071d3
 8007198:	080071c3 	.word	0x080071c3
 800719c:	080071d3 	.word	0x080071d3
 80071a0:	080071d3 	.word	0x080071d3
 80071a4:	080071d3 	.word	0x080071d3
 80071a8:	080071cb 	.word	0x080071cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ac:	f7fd fd18 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 80071b0:	61f8      	str	r0, [r7, #28]
        break;
 80071b2:	e014      	b.n	80071de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071b4:	f7fd fd2a 	bl	8004c0c <HAL_RCC_GetPCLK2Freq>
 80071b8:	61f8      	str	r0, [r7, #28]
        break;
 80071ba:	e010      	b.n	80071de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071bc:	4b4d      	ldr	r3, [pc, #308]	; (80072f4 <UART_SetConfig+0x56c>)
 80071be:	61fb      	str	r3, [r7, #28]
        break;
 80071c0:	e00d      	b.n	80071de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c2:	f7fd fc75 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 80071c6:	61f8      	str	r0, [r7, #28]
        break;
 80071c8:	e009      	b.n	80071de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ce:	61fb      	str	r3, [r7, #28]
        break;
 80071d0:	e005      	b.n	80071de <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d077      	beq.n	80072d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	005a      	lsls	r2, r3, #1
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	441a      	add	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b0f      	cmp	r3, #15
 80071fe:	d916      	bls.n	800722e <UART_SetConfig+0x4a6>
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007206:	d212      	bcs.n	800722e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	b29b      	uxth	r3, r3
 800720c:	f023 030f 	bic.w	r3, r3, #15
 8007210:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	085b      	lsrs	r3, r3, #1
 8007216:	b29b      	uxth	r3, r3
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	b29a      	uxth	r2, r3
 800721e:	8afb      	ldrh	r3, [r7, #22]
 8007220:	4313      	orrs	r3, r2
 8007222:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	8afa      	ldrh	r2, [r7, #22]
 800722a:	60da      	str	r2, [r3, #12]
 800722c:	e052      	b.n	80072d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007234:	e04e      	b.n	80072d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007236:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800723a:	2b08      	cmp	r3, #8
 800723c:	d827      	bhi.n	800728e <UART_SetConfig+0x506>
 800723e:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <UART_SetConfig+0x4bc>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007269 	.word	0x08007269
 8007248:	08007271 	.word	0x08007271
 800724c:	08007279 	.word	0x08007279
 8007250:	0800728f 	.word	0x0800728f
 8007254:	0800727f 	.word	0x0800727f
 8007258:	0800728f 	.word	0x0800728f
 800725c:	0800728f 	.word	0x0800728f
 8007260:	0800728f 	.word	0x0800728f
 8007264:	08007287 	.word	0x08007287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007268:	f7fd fcba 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 800726c:	61f8      	str	r0, [r7, #28]
        break;
 800726e:	e014      	b.n	800729a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007270:	f7fd fccc 	bl	8004c0c <HAL_RCC_GetPCLK2Freq>
 8007274:	61f8      	str	r0, [r7, #28]
        break;
 8007276:	e010      	b.n	800729a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007278:	4b1e      	ldr	r3, [pc, #120]	; (80072f4 <UART_SetConfig+0x56c>)
 800727a:	61fb      	str	r3, [r7, #28]
        break;
 800727c:	e00d      	b.n	800729a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800727e:	f7fd fc17 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8007282:	61f8      	str	r0, [r7, #28]
        break;
 8007284:	e009      	b.n	800729a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800728a:	61fb      	str	r3, [r7, #28]
        break;
 800728c:	e005      	b.n	800729a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007298:	bf00      	nop
    }

    if (pclk != 0U)
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d019      	beq.n	80072d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	085a      	lsrs	r2, r3, #1
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	441a      	add	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	2b0f      	cmp	r3, #15
 80072b8:	d909      	bls.n	80072ce <UART_SetConfig+0x546>
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c0:	d205      	bcs.n	80072ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60da      	str	r2, [r3, #12]
 80072cc:	e002      	b.n	80072d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80072e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3728      	adds	r7, #40	; 0x28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ee:	bf00      	nop
 80072f0:	40008000 	.word	0x40008000
 80072f4:	00f42400 	.word	0x00f42400

080072f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	f003 0308 	and.w	r3, r3, #8
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00a      	beq.n	8007366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	f003 0304 	and.w	r3, r3, #4
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00a      	beq.n	8007388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	f003 0310 	and.w	r3, r3, #16
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00a      	beq.n	80073aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01a      	beq.n	800740e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073f6:	d10a      	bne.n	800740e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	605a      	str	r2, [r3, #4]
  }
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b098      	sub	sp, #96	; 0x60
 8007440:	af02      	add	r7, sp, #8
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800744c:	f7fa ffe2 	bl	8002414 <HAL_GetTick>
 8007450:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b08      	cmp	r3, #8
 800745e:	d12e      	bne.n	80074be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007468:	2200      	movs	r2, #0
 800746a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f88c 	bl	800758c <UART_WaitOnFlagUntilTimeout>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d021      	beq.n	80074be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	e853 3f00 	ldrex	r3, [r3]
 8007486:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800748e:	653b      	str	r3, [r7, #80]	; 0x50
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007498:	647b      	str	r3, [r7, #68]	; 0x44
 800749a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800749e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e6      	bne.n	800747a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2220      	movs	r2, #32
 80074b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e062      	b.n	8007584 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d149      	bne.n	8007560 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074d4:	2200      	movs	r2, #0
 80074d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f856 	bl	800758c <UART_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d03c      	beq.n	8007560 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	623b      	str	r3, [r7, #32]
   return(result);
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007504:	633b      	str	r3, [r7, #48]	; 0x30
 8007506:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800750a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e6      	bne.n	80074e6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	60fb      	str	r3, [r7, #12]
   return(result);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0301 	bic.w	r3, r3, #1
 800752e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007538:	61fa      	str	r2, [r7, #28]
 800753a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	69b9      	ldr	r1, [r7, #24]
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	617b      	str	r3, [r7, #20]
   return(result);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e5      	bne.n	8007518 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e011      	b.n	8007584 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3758      	adds	r7, #88	; 0x58
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	603b      	str	r3, [r7, #0]
 8007598:	4613      	mov	r3, r2
 800759a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759c:	e049      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a4:	d045      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075a6:	f7fa ff35 	bl	8002414 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d302      	bcc.n	80075bc <UART_WaitOnFlagUntilTimeout+0x30>
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e048      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d031      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d110      	bne.n	80075fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2208      	movs	r2, #8
 80075e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f838 	bl	800765a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2208      	movs	r2, #8
 80075ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e029      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760c:	d111      	bne.n	8007632 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f81e 	bl	800765a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2220      	movs	r2, #32
 8007622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e00f      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69da      	ldr	r2, [r3, #28]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4013      	ands	r3, r2
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	429a      	cmp	r2, r3
 8007640:	bf0c      	ite	eq
 8007642:	2301      	moveq	r3, #1
 8007644:	2300      	movne	r3, #0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	79fb      	ldrb	r3, [r7, #7]
 800764c:	429a      	cmp	r2, r3
 800764e:	d0a6      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800765a:	b480      	push	{r7}
 800765c:	b095      	sub	sp, #84	; 0x54
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766a:	e853 3f00 	ldrex	r3, [r3]
 800766e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007680:	643b      	str	r3, [r7, #64]	; 0x40
 8007682:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e6      	bne.n	8007662 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3308      	adds	r3, #8
 800769a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	f023 0301 	bic.w	r3, r3, #1
 80076aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e5      	bne.n	8007694 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d118      	bne.n	8007702 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f023 0310 	bic.w	r3, r3, #16
 80076e4:	647b      	str	r3, [r7, #68]	; 0x44
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ee:	61bb      	str	r3, [r7, #24]
 80076f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	6979      	ldr	r1, [r7, #20]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	613b      	str	r3, [r7, #16]
   return(result);
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e6      	bne.n	80076d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007716:	bf00      	nop
 8007718:	3754      	adds	r7, #84	; 0x54
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <__NVIC_SetPriority>:
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	6039      	str	r1, [r7, #0]
 800772e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007734:	2b00      	cmp	r3, #0
 8007736:	db0a      	blt.n	800774e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	b2da      	uxtb	r2, r3
 800773c:	490c      	ldr	r1, [pc, #48]	; (8007770 <__NVIC_SetPriority+0x4c>)
 800773e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007742:	0112      	lsls	r2, r2, #4
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	440b      	add	r3, r1
 8007748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800774c:	e00a      	b.n	8007764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	b2da      	uxtb	r2, r3
 8007752:	4908      	ldr	r1, [pc, #32]	; (8007774 <__NVIC_SetPriority+0x50>)
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	3b04      	subs	r3, #4
 800775c:	0112      	lsls	r2, r2, #4
 800775e:	b2d2      	uxtb	r2, r2
 8007760:	440b      	add	r3, r1
 8007762:	761a      	strb	r2, [r3, #24]
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	e000e100 	.word	0xe000e100
 8007774:	e000ed00 	.word	0xe000ed00

08007778 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <SysTick_Handler+0x1c>)
 800777e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007780:	f001 fd28 	bl	80091d4 <xTaskGetSchedulerState>
 8007784:	4603      	mov	r3, r0
 8007786:	2b01      	cmp	r3, #1
 8007788:	d001      	beq.n	800778e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800778a:	f002 fb0d 	bl	8009da8 <xPortSysTickHandler>
  }
}
 800778e:	bf00      	nop
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	e000e010 	.word	0xe000e010

08007798 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800779c:	2100      	movs	r1, #0
 800779e:	f06f 0004 	mvn.w	r0, #4
 80077a2:	f7ff ffbf 	bl	8007724 <__NVIC_SetPriority>
#endif
}
 80077a6:	bf00      	nop
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077b2:	f3ef 8305 	mrs	r3, IPSR
 80077b6:	603b      	str	r3, [r7, #0]
  return(result);
 80077b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80077be:	f06f 0305 	mvn.w	r3, #5
 80077c2:	607b      	str	r3, [r7, #4]
 80077c4:	e00c      	b.n	80077e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80077c6:	4b0a      	ldr	r3, [pc, #40]	; (80077f0 <osKernelInitialize+0x44>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d105      	bne.n	80077da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80077ce:	4b08      	ldr	r3, [pc, #32]	; (80077f0 <osKernelInitialize+0x44>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	607b      	str	r3, [r7, #4]
 80077d8:	e002      	b.n	80077e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077e0:	687b      	ldr	r3, [r7, #4]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	200002ec 	.word	0x200002ec

080077f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077fa:	f3ef 8305 	mrs	r3, IPSR
 80077fe:	603b      	str	r3, [r7, #0]
  return(result);
 8007800:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007806:	f06f 0305 	mvn.w	r3, #5
 800780a:	607b      	str	r3, [r7, #4]
 800780c:	e010      	b.n	8007830 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800780e:	4b0b      	ldr	r3, [pc, #44]	; (800783c <osKernelStart+0x48>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d109      	bne.n	800782a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007816:	f7ff ffbf 	bl	8007798 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800781a:	4b08      	ldr	r3, [pc, #32]	; (800783c <osKernelStart+0x48>)
 800781c:	2202      	movs	r2, #2
 800781e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007820:	f001 f87c 	bl	800891c <vTaskStartScheduler>
      stat = osOK;
 8007824:	2300      	movs	r3, #0
 8007826:	607b      	str	r3, [r7, #4]
 8007828:	e002      	b.n	8007830 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800782a:	f04f 33ff 	mov.w	r3, #4294967295
 800782e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007830:	687b      	ldr	r3, [r7, #4]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	200002ec 	.word	0x200002ec

08007840 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b08e      	sub	sp, #56	; 0x38
 8007844:	af04      	add	r7, sp, #16
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800784c:	2300      	movs	r3, #0
 800784e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007850:	f3ef 8305 	mrs	r3, IPSR
 8007854:	617b      	str	r3, [r7, #20]
  return(result);
 8007856:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007858:	2b00      	cmp	r3, #0
 800785a:	d17e      	bne.n	800795a <osThreadNew+0x11a>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d07b      	beq.n	800795a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007862:	2380      	movs	r3, #128	; 0x80
 8007864:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007866:	2318      	movs	r3, #24
 8007868:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800786e:	f04f 33ff 	mov.w	r3, #4294967295
 8007872:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d045      	beq.n	8007906 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <osThreadNew+0x48>
        name = attr->name;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d008      	beq.n	80078ae <osThreadNew+0x6e>
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	2b38      	cmp	r3, #56	; 0x38
 80078a0:	d805      	bhi.n	80078ae <osThreadNew+0x6e>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <osThreadNew+0x72>
        return (NULL);
 80078ae:	2300      	movs	r3, #0
 80078b0:	e054      	b.n	800795c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	089b      	lsrs	r3, r3, #2
 80078c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00e      	beq.n	80078e8 <osThreadNew+0xa8>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	2ba7      	cmp	r3, #167	; 0xa7
 80078d0:	d90a      	bls.n	80078e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d006      	beq.n	80078e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <osThreadNew+0xa8>
        mem = 1;
 80078e2:	2301      	movs	r3, #1
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	e010      	b.n	800790a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10c      	bne.n	800790a <osThreadNew+0xca>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d108      	bne.n	800790a <osThreadNew+0xca>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d104      	bne.n	800790a <osThreadNew+0xca>
          mem = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	61bb      	str	r3, [r7, #24]
 8007904:	e001      	b.n	800790a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d110      	bne.n	8007932 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007918:	9202      	str	r2, [sp, #8]
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	6a3a      	ldr	r2, [r7, #32]
 8007924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 fe0c 	bl	8008544 <xTaskCreateStatic>
 800792c:	4603      	mov	r3, r0
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	e013      	b.n	800795a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d110      	bne.n	800795a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	b29a      	uxth	r2, r3
 800793c:	f107 0310 	add.w	r3, r7, #16
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 fe57 	bl	80085fe <xTaskCreate>
 8007950:	4603      	mov	r3, r0
 8007952:	2b01      	cmp	r3, #1
 8007954:	d001      	beq.n	800795a <osThreadNew+0x11a>
            hTask = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800795a:	693b      	ldr	r3, [r7, #16]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3728      	adds	r7, #40	; 0x28
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800796c:	f3ef 8305 	mrs	r3, IPSR
 8007970:	60bb      	str	r3, [r7, #8]
  return(result);
 8007972:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <osDelay+0x1c>
    stat = osErrorISR;
 8007978:	f06f 0305 	mvn.w	r3, #5
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	e007      	b.n	8007990 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <osDelay+0x2c>
      vTaskDelay(ticks);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 ff92 	bl	80088b4 <vTaskDelay>
    }
  }

  return (stat);
 8007990:	68fb      	ldr	r3, [r7, #12]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4a07      	ldr	r2, [pc, #28]	; (80079c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80079ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	4a06      	ldr	r2, [pc, #24]	; (80079cc <vApplicationGetIdleTaskMemory+0x30>)
 80079b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2280      	movs	r2, #128	; 0x80
 80079b8:	601a      	str	r2, [r3, #0]
}
 80079ba:	bf00      	nop
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	200002f0 	.word	0x200002f0
 80079cc:	20000398 	.word	0x20000398

080079d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4a07      	ldr	r2, [pc, #28]	; (80079fc <vApplicationGetTimerTaskMemory+0x2c>)
 80079e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	4a06      	ldr	r2, [pc, #24]	; (8007a00 <vApplicationGetTimerTaskMemory+0x30>)
 80079e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079ee:	601a      	str	r2, [r3, #0]
}
 80079f0:	bf00      	nop
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	20000598 	.word	0x20000598
 8007a00:	20000640 	.word	0x20000640

08007a04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f103 0208 	add.w	r2, r3, #8
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f04f 32ff 	mov.w	r2, #4294967295
 8007a1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f103 0208 	add.w	r2, r3, #8
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f103 0208 	add.w	r2, r3, #8
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	601a      	str	r2, [r3, #0]
}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d103      	bne.n	8007ac6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	e00c      	b.n	8007ae0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3308      	adds	r3, #8
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	e002      	b.n	8007ad4 <vListInsert+0x2e>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d2f6      	bcs.n	8007ace <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	601a      	str	r2, [r3, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6892      	ldr	r2, [r2, #8]
 8007b2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6852      	ldr	r2, [r2, #4]
 8007b38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d103      	bne.n	8007b4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	1e5a      	subs	r2, r3, #1
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b96:	f002 f875 	bl	8009c84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba2:	68f9      	ldr	r1, [r7, #12]
 8007ba4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	441a      	add	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	68f9      	ldr	r1, [r7, #12]
 8007bca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bcc:	fb01 f303 	mul.w	r3, r1, r3
 8007bd0:	441a      	add	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	22ff      	movs	r2, #255	; 0xff
 8007bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	22ff      	movs	r2, #255	; 0xff
 8007be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d114      	bne.n	8007c16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d01a      	beq.n	8007c2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3310      	adds	r3, #16
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 f929 	bl	8008e50 <xTaskRemoveFromEventList>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d012      	beq.n	8007c2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <xQueueGenericReset+0xcc>)
 8007c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	e009      	b.n	8007c2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3310      	adds	r3, #16
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff fef2 	bl	8007a04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3324      	adds	r3, #36	; 0x24
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff feed 	bl	8007a04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c2a:	f002 f85b 	bl	8009ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c2e:	2301      	movs	r3, #1
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	e000ed04 	.word	0xe000ed04

08007c3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08e      	sub	sp, #56	; 0x38
 8007c40:	af02      	add	r7, sp, #8
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10a      	bne.n	8007c66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10a      	bne.n	8007c82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <xQueueGenericCreateStatic+0x52>
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <xQueueGenericCreateStatic+0x56>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e000      	b.n	8007c94 <xQueueGenericCreateStatic+0x58>
 8007c92:	2300      	movs	r3, #0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	623b      	str	r3, [r7, #32]
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d102      	bne.n	8007cba <xQueueGenericCreateStatic+0x7e>
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <xQueueGenericCreateStatic+0x82>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e000      	b.n	8007cc0 <xQueueGenericCreateStatic+0x84>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	61fb      	str	r3, [r7, #28]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cda:	2350      	movs	r3, #80	; 0x50
 8007cdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b50      	cmp	r3, #80	; 0x50
 8007ce2:	d00a      	beq.n	8007cfa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	61bb      	str	r3, [r7, #24]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007cfa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00d      	beq.n	8007d22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	4613      	mov	r3, r2
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f805 	bl	8007d2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3730      	adds	r7, #48	; 0x30
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d103      	bne.n	8007d48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	e002      	b.n	8007d4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	69b8      	ldr	r0, [r7, #24]
 8007d5e:	f7ff ff05 	bl	8007b6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	78fa      	ldrb	r2, [r7, #3]
 8007d66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
	...

08007d74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08e      	sub	sp, #56	; 0x38
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d82:	2300      	movs	r3, #0
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10a      	bne.n	8007da6 <xQueueGenericSend+0x32>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d103      	bne.n	8007db4 <xQueueGenericSend+0x40>
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <xQueueGenericSend+0x44>
 8007db4:	2301      	movs	r3, #1
 8007db6:	e000      	b.n	8007dba <xQueueGenericSend+0x46>
 8007db8:	2300      	movs	r3, #0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <xQueueGenericSend+0x60>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d103      	bne.n	8007de2 <xQueueGenericSend+0x6e>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <xQueueGenericSend+0x72>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <xQueueGenericSend+0x74>
 8007de6:	2300      	movs	r3, #0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <xQueueGenericSend+0x8e>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	623b      	str	r3, [r7, #32]
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e02:	f001 f9e7 	bl	80091d4 <xTaskGetSchedulerState>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d102      	bne.n	8007e12 <xQueueGenericSend+0x9e>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <xQueueGenericSend+0xa2>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e000      	b.n	8007e18 <xQueueGenericSend+0xa4>
 8007e16:	2300      	movs	r3, #0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xQueueGenericSend+0xbe>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	61fb      	str	r3, [r7, #28]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e32:	f001 ff27 	bl	8009c84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d302      	bcc.n	8007e48 <xQueueGenericSend+0xd4>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d129      	bne.n	8007e9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	68b9      	ldr	r1, [r7, #8]
 8007e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e4e:	f000 fa0b 	bl	8008268 <prvCopyDataToQueue>
 8007e52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d010      	beq.n	8007e7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	3324      	adds	r3, #36	; 0x24
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fff5 	bl	8008e50 <xTaskRemoveFromEventList>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d013      	beq.n	8007e94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e6c:	4b3f      	ldr	r3, [pc, #252]	; (8007f6c <xQueueGenericSend+0x1f8>)
 8007e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	e00a      	b.n	8007e94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d007      	beq.n	8007e94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e84:	4b39      	ldr	r3, [pc, #228]	; (8007f6c <xQueueGenericSend+0x1f8>)
 8007e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e94:	f001 ff26 	bl	8009ce4 <vPortExitCritical>
				return pdPASS;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e063      	b.n	8007f64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d103      	bne.n	8007eaa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ea2:	f001 ff1f 	bl	8009ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e05c      	b.n	8007f64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d106      	bne.n	8007ebe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007eb0:	f107 0314 	add.w	r3, r7, #20
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f001 f82f 	bl	8008f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ebe:	f001 ff11 	bl	8009ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ec2:	f000 fd9b 	bl	80089fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ec6:	f001 fedd 	bl	8009c84 <vPortEnterCritical>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ed0:	b25b      	sxtb	r3, r3
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d103      	bne.n	8007ee0 <xQueueGenericSend+0x16c>
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ee6:	b25b      	sxtb	r3, r3
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eec:	d103      	bne.n	8007ef6 <xQueueGenericSend+0x182>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ef6:	f001 fef5 	bl	8009ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007efa:	1d3a      	adds	r2, r7, #4
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	4611      	mov	r1, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f001 f81e 	bl	8008f44 <xTaskCheckForTimeOut>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d124      	bne.n	8007f58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f10:	f000 faa2 	bl	8008458 <prvIsQueueFull>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d018      	beq.n	8007f4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	3310      	adds	r3, #16
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	4611      	mov	r1, r2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 ff44 	bl	8008db0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f2a:	f000 fa2d 	bl	8008388 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f2e:	f000 fd73 	bl	8008a18 <xTaskResumeAll>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f47f af7c 	bne.w	8007e32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f3a:	4b0c      	ldr	r3, [pc, #48]	; (8007f6c <xQueueGenericSend+0x1f8>)
 8007f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	e772      	b.n	8007e32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f4e:	f000 fa1b 	bl	8008388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f52:	f000 fd61 	bl	8008a18 <xTaskResumeAll>
 8007f56:	e76c      	b.n	8007e32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f5a:	f000 fa15 	bl	8008388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f5e:	f000 fd5b 	bl	8008a18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3738      	adds	r7, #56	; 0x38
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	e000ed04 	.word	0xe000ed04

08007f70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b090      	sub	sp, #64	; 0x40
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f9a:	bf00      	nop
 8007f9c:	e7fe      	b.n	8007f9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d103      	bne.n	8007fac <xQueueGenericSendFromISR+0x3c>
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <xQueueGenericSendFromISR+0x40>
 8007fac:	2301      	movs	r3, #1
 8007fae:	e000      	b.n	8007fb2 <xQueueGenericSendFromISR+0x42>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10a      	bne.n	8007fcc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fc8:	bf00      	nop
 8007fca:	e7fe      	b.n	8007fca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d103      	bne.n	8007fda <xQueueGenericSendFromISR+0x6a>
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <xQueueGenericSendFromISR+0x6e>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e000      	b.n	8007fe0 <xQueueGenericSendFromISR+0x70>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	623b      	str	r3, [r7, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	e7fe      	b.n	8007ff8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ffa:	f001 ff25 	bl	8009e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ffe:	f3ef 8211 	mrs	r2, BASEPRI
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	61fa      	str	r2, [r7, #28]
 8008014:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008016:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	429a      	cmp	r2, r3
 8008024:	d302      	bcc.n	800802c <xQueueGenericSendFromISR+0xbc>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d12f      	bne.n	800808c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	68b9      	ldr	r1, [r7, #8]
 8008040:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008042:	f000 f911 	bl	8008268 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008046:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d112      	bne.n	8008076 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	2b00      	cmp	r3, #0
 8008056:	d016      	beq.n	8008086 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805a:	3324      	adds	r3, #36	; 0x24
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fef7 	bl	8008e50 <xTaskRemoveFromEventList>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00e      	beq.n	8008086 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00b      	beq.n	8008086 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	e007      	b.n	8008086 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008076:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800807a:	3301      	adds	r3, #1
 800807c:	b2db      	uxtb	r3, r3
 800807e:	b25a      	sxtb	r2, r3
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008086:	2301      	movs	r3, #1
 8008088:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800808a:	e001      	b.n	8008090 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800808c:	2300      	movs	r3, #0
 800808e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008092:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800809a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800809c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3740      	adds	r7, #64	; 0x40
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08c      	sub	sp, #48	; 0x30
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080b4:	2300      	movs	r3, #0
 80080b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <xQueueReceive+0x30>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	623b      	str	r3, [r7, #32]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d103      	bne.n	80080e6 <xQueueReceive+0x3e>
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <xQueueReceive+0x42>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e000      	b.n	80080ec <xQueueReceive+0x44>
 80080ea:	2300      	movs	r3, #0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <xQueueReceive+0x5e>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	61fb      	str	r3, [r7, #28]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008106:	f001 f865 	bl	80091d4 <xTaskGetSchedulerState>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d102      	bne.n	8008116 <xQueueReceive+0x6e>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <xQueueReceive+0x72>
 8008116:	2301      	movs	r3, #1
 8008118:	e000      	b.n	800811c <xQueueReceive+0x74>
 800811a:	2300      	movs	r3, #0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10a      	bne.n	8008136 <xQueueReceive+0x8e>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	61bb      	str	r3, [r7, #24]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008136:	f001 fda5 	bl	8009c84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	2b00      	cmp	r3, #0
 8008144:	d01f      	beq.n	8008186 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800814a:	f000 f8f7 	bl	800833c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	1e5a      	subs	r2, r3, #1
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00f      	beq.n	800817e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008160:	3310      	adds	r3, #16
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fe74 	bl	8008e50 <xTaskRemoveFromEventList>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d007      	beq.n	800817e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800816e:	4b3d      	ldr	r3, [pc, #244]	; (8008264 <xQueueReceive+0x1bc>)
 8008170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800817e:	f001 fdb1 	bl	8009ce4 <vPortExitCritical>
				return pdPASS;
 8008182:	2301      	movs	r3, #1
 8008184:	e069      	b.n	800825a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d103      	bne.n	8008194 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800818c:	f001 fdaa 	bl	8009ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008190:	2300      	movs	r3, #0
 8008192:	e062      	b.n	800825a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d106      	bne.n	80081a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800819a:	f107 0310 	add.w	r3, r7, #16
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 feba 	bl	8008f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081a4:	2301      	movs	r3, #1
 80081a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081a8:	f001 fd9c 	bl	8009ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081ac:	f000 fc26 	bl	80089fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081b0:	f001 fd68 	bl	8009c84 <vPortEnterCritical>
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081ba:	b25b      	sxtb	r3, r3
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d103      	bne.n	80081ca <xQueueReceive+0x122>
 80081c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081d0:	b25b      	sxtb	r3, r3
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d103      	bne.n	80081e0 <xQueueReceive+0x138>
 80081d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081e0:	f001 fd80 	bl	8009ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081e4:	1d3a      	adds	r2, r7, #4
 80081e6:	f107 0310 	add.w	r3, r7, #16
 80081ea:	4611      	mov	r1, r2
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 fea9 	bl	8008f44 <xTaskCheckForTimeOut>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d123      	bne.n	8008240 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081fa:	f000 f917 	bl	800842c <prvIsQueueEmpty>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d017      	beq.n	8008234 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	3324      	adds	r3, #36	; 0x24
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	4611      	mov	r1, r2
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fdcf 	bl	8008db0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008214:	f000 f8b8 	bl	8008388 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008218:	f000 fbfe 	bl	8008a18 <xTaskResumeAll>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d189      	bne.n	8008136 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008222:	4b10      	ldr	r3, [pc, #64]	; (8008264 <xQueueReceive+0x1bc>)
 8008224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	e780      	b.n	8008136 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008236:	f000 f8a7 	bl	8008388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800823a:	f000 fbed 	bl	8008a18 <xTaskResumeAll>
 800823e:	e77a      	b.n	8008136 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008242:	f000 f8a1 	bl	8008388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008246:	f000 fbe7 	bl	8008a18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800824a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800824c:	f000 f8ee 	bl	800842c <prvIsQueueEmpty>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	f43f af6f 	beq.w	8008136 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008258:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800825a:	4618      	mov	r0, r3
 800825c:	3730      	adds	r7, #48	; 0x30
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	e000ed04 	.word	0xe000ed04

08008268 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10d      	bne.n	80082a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d14d      	bne.n	800832a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	4618      	mov	r0, r3
 8008294:	f000 ffbc 	bl	8009210 <xTaskPriorityDisinherit>
 8008298:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	609a      	str	r2, [r3, #8]
 80082a0:	e043      	b.n	800832a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d119      	bne.n	80082dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6858      	ldr	r0, [r3, #4]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b0:	461a      	mov	r2, r3
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	f002 f9c8 	bl	800a648 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	441a      	add	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d32b      	bcc.n	800832a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	605a      	str	r2, [r3, #4]
 80082da:	e026      	b.n	800832a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	68d8      	ldr	r0, [r3, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e4:	461a      	mov	r2, r3
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	f002 f9ae 	bl	800a648 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f4:	425b      	negs	r3, r3
 80082f6:	441a      	add	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d207      	bcs.n	8008318 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008310:	425b      	negs	r3, r3
 8008312:	441a      	add	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d105      	bne.n	800832a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	3b01      	subs	r3, #1
 8008328:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008332:	697b      	ldr	r3, [r7, #20]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d018      	beq.n	8008380 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008356:	441a      	add	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	429a      	cmp	r2, r3
 8008366:	d303      	bcc.n	8008370 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68d9      	ldr	r1, [r3, #12]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	461a      	mov	r2, r3
 800837a:	6838      	ldr	r0, [r7, #0]
 800837c:	f002 f964 	bl	800a648 <memcpy>
	}
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008390:	f001 fc78 	bl	8009c84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800839a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800839c:	e011      	b.n	80083c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d012      	beq.n	80083cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3324      	adds	r3, #36	; 0x24
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fd50 	bl	8008e50 <xTaskRemoveFromEventList>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083b6:	f000 fe27 	bl	8009008 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	3b01      	subs	r3, #1
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	dce9      	bgt.n	800839e <prvUnlockQueue+0x16>
 80083ca:	e000      	b.n	80083ce <prvUnlockQueue+0x46>
					break;
 80083cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	22ff      	movs	r2, #255	; 0xff
 80083d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80083d6:	f001 fc85 	bl	8009ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083da:	f001 fc53 	bl	8009c84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083e6:	e011      	b.n	800840c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d012      	beq.n	8008416 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3310      	adds	r3, #16
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 fd2b 	bl	8008e50 <xTaskRemoveFromEventList>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008400:	f000 fe02 	bl	8009008 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	3b01      	subs	r3, #1
 8008408:	b2db      	uxtb	r3, r3
 800840a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800840c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008410:	2b00      	cmp	r3, #0
 8008412:	dce9      	bgt.n	80083e8 <prvUnlockQueue+0x60>
 8008414:	e000      	b.n	8008418 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008416:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	22ff      	movs	r2, #255	; 0xff
 800841c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008420:	f001 fc60 	bl	8009ce4 <vPortExitCritical>
}
 8008424:	bf00      	nop
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008434:	f001 fc26 	bl	8009c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843c:	2b00      	cmp	r3, #0
 800843e:	d102      	bne.n	8008446 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008440:	2301      	movs	r3, #1
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	e001      	b.n	800844a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008446:	2300      	movs	r3, #0
 8008448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800844a:	f001 fc4b 	bl	8009ce4 <vPortExitCritical>

	return xReturn;
 800844e:	68fb      	ldr	r3, [r7, #12]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008460:	f001 fc10 	bl	8009c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846c:	429a      	cmp	r2, r3
 800846e:	d102      	bne.n	8008476 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008470:	2301      	movs	r3, #1
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	e001      	b.n	800847a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800847a:	f001 fc33 	bl	8009ce4 <vPortExitCritical>

	return xReturn;
 800847e:	68fb      	ldr	r3, [r7, #12]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	e014      	b.n	80084c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008498:	4a0f      	ldr	r2, [pc, #60]	; (80084d8 <vQueueAddToRegistry+0x50>)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10b      	bne.n	80084bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80084a4:	490c      	ldr	r1, [pc, #48]	; (80084d8 <vQueueAddToRegistry+0x50>)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80084ae:	4a0a      	ldr	r2, [pc, #40]	; (80084d8 <vQueueAddToRegistry+0x50>)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	4413      	add	r3, r2
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80084ba:	e006      	b.n	80084ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	3301      	adds	r3, #1
 80084c0:	60fb      	str	r3, [r7, #12]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b07      	cmp	r3, #7
 80084c6:	d9e7      	bls.n	8008498 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	20000a40 	.word	0x20000a40

080084dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084ec:	f001 fbca 	bl	8009c84 <vPortEnterCritical>
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084f6:	b25b      	sxtb	r3, r3
 80084f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fc:	d103      	bne.n	8008506 <vQueueWaitForMessageRestricted+0x2a>
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800850c:	b25b      	sxtb	r3, r3
 800850e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008512:	d103      	bne.n	800851c <vQueueWaitForMessageRestricted+0x40>
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800851c:	f001 fbe2 	bl	8009ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	2b00      	cmp	r3, #0
 8008526:	d106      	bne.n	8008536 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	3324      	adds	r3, #36	; 0x24
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fc61 	bl	8008df8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008536:	6978      	ldr	r0, [r7, #20]
 8008538:	f7ff ff26 	bl	8008388 <prvUnlockQueue>
	}
 800853c:	bf00      	nop
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08e      	sub	sp, #56	; 0x38
 8008548:	af04      	add	r7, sp, #16
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	623b      	str	r3, [r7, #32]
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10a      	bne.n	800858a <xTaskCreateStatic+0x46>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	61fb      	str	r3, [r7, #28]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800858a:	23a8      	movs	r3, #168	; 0xa8
 800858c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	2ba8      	cmp	r3, #168	; 0xa8
 8008592:	d00a      	beq.n	80085aa <xTaskCreateStatic+0x66>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	61bb      	str	r3, [r7, #24]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80085aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01e      	beq.n	80085f0 <xTaskCreateStatic+0xac>
 80085b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01b      	beq.n	80085f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	2202      	movs	r2, #2
 80085c6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085ca:	2300      	movs	r3, #0
 80085cc:	9303      	str	r3, [sp, #12]
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	9302      	str	r3, [sp, #8]
 80085d2:	f107 0314 	add.w	r3, r7, #20
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	68b9      	ldr	r1, [r7, #8]
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 f850 	bl	8008688 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085ea:	f000 f8f3 	bl	80087d4 <prvAddNewTaskToReadyList>
 80085ee:	e001      	b.n	80085f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085f4:	697b      	ldr	r3, [r7, #20]
	}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3728      	adds	r7, #40	; 0x28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b08c      	sub	sp, #48	; 0x30
 8008602:	af04      	add	r7, sp, #16
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	603b      	str	r3, [r7, #0]
 800860a:	4613      	mov	r3, r2
 800860c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800860e:	88fb      	ldrh	r3, [r7, #6]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4618      	mov	r0, r3
 8008614:	f001 fc58 	bl	8009ec8 <pvPortMalloc>
 8008618:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00e      	beq.n	800863e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008620:	20a8      	movs	r0, #168	; 0xa8
 8008622:	f001 fc51 	bl	8009ec8 <pvPortMalloc>
 8008626:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	631a      	str	r2, [r3, #48]	; 0x30
 8008634:	e005      	b.n	8008642 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008636:	6978      	ldr	r0, [r7, #20]
 8008638:	f001 fd12 	bl	800a060 <vPortFree>
 800863c:	e001      	b.n	8008642 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d017      	beq.n	8008678 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008650:	88fa      	ldrh	r2, [r7, #6]
 8008652:	2300      	movs	r3, #0
 8008654:	9303      	str	r3, [sp, #12]
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	9302      	str	r3, [sp, #8]
 800865a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68b9      	ldr	r1, [r7, #8]
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 f80e 	bl	8008688 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800866c:	69f8      	ldr	r0, [r7, #28]
 800866e:	f000 f8b1 	bl	80087d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008672:	2301      	movs	r3, #1
 8008674:	61bb      	str	r3, [r7, #24]
 8008676:	e002      	b.n	800867e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008678:	f04f 33ff 	mov.w	r3, #4294967295
 800867c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800867e:	69bb      	ldr	r3, [r7, #24]
	}
 8008680:	4618      	mov	r0, r3
 8008682:	3720      	adds	r7, #32
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	461a      	mov	r2, r3
 80086a0:	21a5      	movs	r1, #165	; 0xa5
 80086a2:	f001 ff00 	bl	800a4a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80086b0:	3b01      	subs	r3, #1
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	f023 0307 	bic.w	r3, r3, #7
 80086be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	617b      	str	r3, [r7, #20]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d01f      	beq.n	8008726 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086e6:	2300      	movs	r3, #0
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	e012      	b.n	8008712 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	4413      	add	r3, r2
 80086f2:	7819      	ldrb	r1, [r3, #0]
 80086f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	4413      	add	r3, r2
 80086fa:	3334      	adds	r3, #52	; 0x34
 80086fc:	460a      	mov	r2, r1
 80086fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	4413      	add	r3, r2
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d006      	beq.n	800871a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	3301      	adds	r3, #1
 8008710:	61fb      	str	r3, [r7, #28]
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	2b0f      	cmp	r3, #15
 8008716:	d9e9      	bls.n	80086ec <prvInitialiseNewTask+0x64>
 8008718:	e000      	b.n	800871c <prvInitialiseNewTask+0x94>
			{
				break;
 800871a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008724:	e003      	b.n	800872e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	2b37      	cmp	r3, #55	; 0x37
 8008732:	d901      	bls.n	8008738 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008734:	2337      	movs	r3, #55	; 0x37
 8008736:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800873c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008742:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008746:	2200      	movs	r2, #0
 8008748:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	3304      	adds	r3, #4
 800874e:	4618      	mov	r0, r3
 8008750:	f7ff f978 	bl	8007a44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	3318      	adds	r3, #24
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff f973 	bl	8007a44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008762:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008772:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	2200      	movs	r2, #0
 8008778:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	2200      	movs	r2, #0
 8008780:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	3354      	adds	r3, #84	; 0x54
 8008788:	224c      	movs	r2, #76	; 0x4c
 800878a:	2100      	movs	r1, #0
 800878c:	4618      	mov	r0, r3
 800878e:	f001 fe8a 	bl	800a4a6 <memset>
 8008792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008794:	4a0c      	ldr	r2, [pc, #48]	; (80087c8 <prvInitialiseNewTask+0x140>)
 8008796:	659a      	str	r2, [r3, #88]	; 0x58
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	4a0c      	ldr	r2, [pc, #48]	; (80087cc <prvInitialiseNewTask+0x144>)
 800879c:	65da      	str	r2, [r3, #92]	; 0x5c
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	4a0b      	ldr	r2, [pc, #44]	; (80087d0 <prvInitialiseNewTask+0x148>)
 80087a2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	68f9      	ldr	r1, [r7, #12]
 80087a8:	69b8      	ldr	r0, [r7, #24]
 80087aa:	f001 f941 	bl	8009a30 <pxPortInitialiseStack>
 80087ae:	4602      	mov	r2, r0
 80087b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087c0:	bf00      	nop
 80087c2:	3720      	adds	r7, #32
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	2000d424 	.word	0x2000d424
 80087cc:	2000d48c 	.word	0x2000d48c
 80087d0:	2000d4f4 	.word	0x2000d4f4

080087d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087dc:	f001 fa52 	bl	8009c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087e0:	4b2d      	ldr	r3, [pc, #180]	; (8008898 <prvAddNewTaskToReadyList+0xc4>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3301      	adds	r3, #1
 80087e6:	4a2c      	ldr	r2, [pc, #176]	; (8008898 <prvAddNewTaskToReadyList+0xc4>)
 80087e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087ea:	4b2c      	ldr	r3, [pc, #176]	; (800889c <prvAddNewTaskToReadyList+0xc8>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d109      	bne.n	8008806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087f2:	4a2a      	ldr	r2, [pc, #168]	; (800889c <prvAddNewTaskToReadyList+0xc8>)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087f8:	4b27      	ldr	r3, [pc, #156]	; (8008898 <prvAddNewTaskToReadyList+0xc4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d110      	bne.n	8008822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008800:	f000 fc26 	bl	8009050 <prvInitialiseTaskLists>
 8008804:	e00d      	b.n	8008822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008806:	4b26      	ldr	r3, [pc, #152]	; (80088a0 <prvAddNewTaskToReadyList+0xcc>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800880e:	4b23      	ldr	r3, [pc, #140]	; (800889c <prvAddNewTaskToReadyList+0xc8>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008818:	429a      	cmp	r2, r3
 800881a:	d802      	bhi.n	8008822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800881c:	4a1f      	ldr	r2, [pc, #124]	; (800889c <prvAddNewTaskToReadyList+0xc8>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008822:	4b20      	ldr	r3, [pc, #128]	; (80088a4 <prvAddNewTaskToReadyList+0xd0>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3301      	adds	r3, #1
 8008828:	4a1e      	ldr	r2, [pc, #120]	; (80088a4 <prvAddNewTaskToReadyList+0xd0>)
 800882a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800882c:	4b1d      	ldr	r3, [pc, #116]	; (80088a4 <prvAddNewTaskToReadyList+0xd0>)
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008838:	4b1b      	ldr	r3, [pc, #108]	; (80088a8 <prvAddNewTaskToReadyList+0xd4>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d903      	bls.n	8008848 <prvAddNewTaskToReadyList+0x74>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	4a18      	ldr	r2, [pc, #96]	; (80088a8 <prvAddNewTaskToReadyList+0xd4>)
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884c:	4613      	mov	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4a15      	ldr	r2, [pc, #84]	; (80088ac <prvAddNewTaskToReadyList+0xd8>)
 8008856:	441a      	add	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3304      	adds	r3, #4
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f7ff f8fd 	bl	8007a5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008864:	f001 fa3e 	bl	8009ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008868:	4b0d      	ldr	r3, [pc, #52]	; (80088a0 <prvAddNewTaskToReadyList+0xcc>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00e      	beq.n	800888e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008870:	4b0a      	ldr	r3, [pc, #40]	; (800889c <prvAddNewTaskToReadyList+0xc8>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887a:	429a      	cmp	r2, r3
 800887c:	d207      	bcs.n	800888e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800887e:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <prvAddNewTaskToReadyList+0xdc>)
 8008880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008884:	601a      	str	r2, [r3, #0]
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800888e:	bf00      	nop
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000f54 	.word	0x20000f54
 800889c:	20000a80 	.word	0x20000a80
 80088a0:	20000f60 	.word	0x20000f60
 80088a4:	20000f70 	.word	0x20000f70
 80088a8:	20000f5c 	.word	0x20000f5c
 80088ac:	20000a84 	.word	0x20000a84
 80088b0:	e000ed04 	.word	0xe000ed04

080088b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d017      	beq.n	80088f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088c6:	4b13      	ldr	r3, [pc, #76]	; (8008914 <vTaskDelay+0x60>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <vTaskDelay+0x30>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	60bb      	str	r3, [r7, #8]
}
 80088e0:	bf00      	nop
 80088e2:	e7fe      	b.n	80088e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088e4:	f000 f88a 	bl	80089fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088e8:	2100      	movs	r1, #0
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fcfe 	bl	80092ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088f0:	f000 f892 	bl	8008a18 <xTaskResumeAll>
 80088f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d107      	bne.n	800890c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80088fc:	4b06      	ldr	r3, [pc, #24]	; (8008918 <vTaskDelay+0x64>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	20000f7c 	.word	0x20000f7c
 8008918:	e000ed04 	.word	0xe000ed04

0800891c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	; 0x28
 8008920:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008926:	2300      	movs	r3, #0
 8008928:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800892a:	463a      	mov	r2, r7
 800892c:	1d39      	adds	r1, r7, #4
 800892e:	f107 0308 	add.w	r3, r7, #8
 8008932:	4618      	mov	r0, r3
 8008934:	f7ff f832 	bl	800799c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	9202      	str	r2, [sp, #8]
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	2300      	movs	r3, #0
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	460a      	mov	r2, r1
 800894a:	4924      	ldr	r1, [pc, #144]	; (80089dc <vTaskStartScheduler+0xc0>)
 800894c:	4824      	ldr	r0, [pc, #144]	; (80089e0 <vTaskStartScheduler+0xc4>)
 800894e:	f7ff fdf9 	bl	8008544 <xTaskCreateStatic>
 8008952:	4603      	mov	r3, r0
 8008954:	4a23      	ldr	r2, [pc, #140]	; (80089e4 <vTaskStartScheduler+0xc8>)
 8008956:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008958:	4b22      	ldr	r3, [pc, #136]	; (80089e4 <vTaskStartScheduler+0xc8>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008960:	2301      	movs	r3, #1
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	e001      	b.n	800896a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008966:	2300      	movs	r3, #0
 8008968:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d102      	bne.n	8008976 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008970:	f000 fd10 	bl	8009394 <xTimerCreateTimerTask>
 8008974:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d11b      	bne.n	80089b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	613b      	str	r3, [r7, #16]
}
 800898e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008990:	4b15      	ldr	r3, [pc, #84]	; (80089e8 <vTaskStartScheduler+0xcc>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3354      	adds	r3, #84	; 0x54
 8008996:	4a15      	ldr	r2, [pc, #84]	; (80089ec <vTaskStartScheduler+0xd0>)
 8008998:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800899a:	4b15      	ldr	r3, [pc, #84]	; (80089f0 <vTaskStartScheduler+0xd4>)
 800899c:	f04f 32ff 	mov.w	r2, #4294967295
 80089a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089a2:	4b14      	ldr	r3, [pc, #80]	; (80089f4 <vTaskStartScheduler+0xd8>)
 80089a4:	2201      	movs	r2, #1
 80089a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089a8:	4b13      	ldr	r3, [pc, #76]	; (80089f8 <vTaskStartScheduler+0xdc>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089ae:	f001 f8c7 	bl	8009b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089b2:	e00e      	b.n	80089d2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ba:	d10a      	bne.n	80089d2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60fb      	str	r3, [r7, #12]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <vTaskStartScheduler+0xb4>
}
 80089d2:	bf00      	nop
 80089d4:	3718      	adds	r7, #24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	0800b344 	.word	0x0800b344
 80089e0:	08009021 	.word	0x08009021
 80089e4:	20000f78 	.word	0x20000f78
 80089e8:	20000a80 	.word	0x20000a80
 80089ec:	20000070 	.word	0x20000070
 80089f0:	20000f74 	.word	0x20000f74
 80089f4:	20000f60 	.word	0x20000f60
 80089f8:	20000f58 	.word	0x20000f58

080089fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a00:	4b04      	ldr	r3, [pc, #16]	; (8008a14 <vTaskSuspendAll+0x18>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3301      	adds	r3, #1
 8008a06:	4a03      	ldr	r2, [pc, #12]	; (8008a14 <vTaskSuspendAll+0x18>)
 8008a08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a0a:	bf00      	nop
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	20000f7c 	.word	0x20000f7c

08008a18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a26:	4b42      	ldr	r3, [pc, #264]	; (8008b30 <xTaskResumeAll+0x118>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <xTaskResumeAll+0x2c>
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	603b      	str	r3, [r7, #0]
}
 8008a40:	bf00      	nop
 8008a42:	e7fe      	b.n	8008a42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a44:	f001 f91e 	bl	8009c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a48:	4b39      	ldr	r3, [pc, #228]	; (8008b30 <xTaskResumeAll+0x118>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	4a38      	ldr	r2, [pc, #224]	; (8008b30 <xTaskResumeAll+0x118>)
 8008a50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a52:	4b37      	ldr	r3, [pc, #220]	; (8008b30 <xTaskResumeAll+0x118>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d162      	bne.n	8008b20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a5a:	4b36      	ldr	r3, [pc, #216]	; (8008b34 <xTaskResumeAll+0x11c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d05e      	beq.n	8008b20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a62:	e02f      	b.n	8008ac4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a64:	4b34      	ldr	r3, [pc, #208]	; (8008b38 <xTaskResumeAll+0x120>)
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3318      	adds	r3, #24
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff f851 	bl	8007b18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff f84c 	bl	8007b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a84:	4b2d      	ldr	r3, [pc, #180]	; (8008b3c <xTaskResumeAll+0x124>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d903      	bls.n	8008a94 <xTaskResumeAll+0x7c>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a90:	4a2a      	ldr	r2, [pc, #168]	; (8008b3c <xTaskResumeAll+0x124>)
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a98:	4613      	mov	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4a27      	ldr	r2, [pc, #156]	; (8008b40 <xTaskResumeAll+0x128>)
 8008aa2:	441a      	add	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4610      	mov	r0, r2
 8008aac:	f7fe ffd7 	bl	8007a5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab4:	4b23      	ldr	r3, [pc, #140]	; (8008b44 <xTaskResumeAll+0x12c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d302      	bcc.n	8008ac4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008abe:	4b22      	ldr	r3, [pc, #136]	; (8008b48 <xTaskResumeAll+0x130>)
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ac4:	4b1c      	ldr	r3, [pc, #112]	; (8008b38 <xTaskResumeAll+0x120>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1cb      	bne.n	8008a64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ad2:	f000 fb5f 	bl	8009194 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ad6:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <xTaskResumeAll+0x134>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d010      	beq.n	8008b04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ae2:	f000 f847 	bl	8008b74 <xTaskIncrementTick>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008aec:	4b16      	ldr	r3, [pc, #88]	; (8008b48 <xTaskResumeAll+0x130>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1f1      	bne.n	8008ae2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008afe:	4b13      	ldr	r3, [pc, #76]	; (8008b4c <xTaskResumeAll+0x134>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b04:	4b10      	ldr	r3, [pc, #64]	; (8008b48 <xTaskResumeAll+0x130>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d009      	beq.n	8008b20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b10:	4b0f      	ldr	r3, [pc, #60]	; (8008b50 <xTaskResumeAll+0x138>)
 8008b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b16:	601a      	str	r2, [r3, #0]
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b20:	f001 f8e0 	bl	8009ce4 <vPortExitCritical>

	return xAlreadyYielded;
 8008b24:	68bb      	ldr	r3, [r7, #8]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000f7c 	.word	0x20000f7c
 8008b34:	20000f54 	.word	0x20000f54
 8008b38:	20000f14 	.word	0x20000f14
 8008b3c:	20000f5c 	.word	0x20000f5c
 8008b40:	20000a84 	.word	0x20000a84
 8008b44:	20000a80 	.word	0x20000a80
 8008b48:	20000f68 	.word	0x20000f68
 8008b4c:	20000f64 	.word	0x20000f64
 8008b50:	e000ed04 	.word	0xe000ed04

08008b54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <xTaskGetTickCount+0x1c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b60:	687b      	ldr	r3, [r7, #4]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	20000f58 	.word	0x20000f58

08008b74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b7e:	4b4f      	ldr	r3, [pc, #316]	; (8008cbc <xTaskIncrementTick+0x148>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f040 808f 	bne.w	8008ca6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b88:	4b4d      	ldr	r3, [pc, #308]	; (8008cc0 <xTaskIncrementTick+0x14c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b90:	4a4b      	ldr	r2, [pc, #300]	; (8008cc0 <xTaskIncrementTick+0x14c>)
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d120      	bne.n	8008bde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b9c:	4b49      	ldr	r3, [pc, #292]	; (8008cc4 <xTaskIncrementTick+0x150>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <xTaskIncrementTick+0x48>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	603b      	str	r3, [r7, #0]
}
 8008bb8:	bf00      	nop
 8008bba:	e7fe      	b.n	8008bba <xTaskIncrementTick+0x46>
 8008bbc:	4b41      	ldr	r3, [pc, #260]	; (8008cc4 <xTaskIncrementTick+0x150>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	4b41      	ldr	r3, [pc, #260]	; (8008cc8 <xTaskIncrementTick+0x154>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a3f      	ldr	r2, [pc, #252]	; (8008cc4 <xTaskIncrementTick+0x150>)
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	4a3f      	ldr	r2, [pc, #252]	; (8008cc8 <xTaskIncrementTick+0x154>)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	4b3e      	ldr	r3, [pc, #248]	; (8008ccc <xTaskIncrementTick+0x158>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	4a3d      	ldr	r2, [pc, #244]	; (8008ccc <xTaskIncrementTick+0x158>)
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	f000 fadb 	bl	8009194 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bde:	4b3c      	ldr	r3, [pc, #240]	; (8008cd0 <xTaskIncrementTick+0x15c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d349      	bcc.n	8008c7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008be8:	4b36      	ldr	r3, [pc, #216]	; (8008cc4 <xTaskIncrementTick+0x150>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d104      	bne.n	8008bfc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bf2:	4b37      	ldr	r3, [pc, #220]	; (8008cd0 <xTaskIncrementTick+0x15c>)
 8008bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf8:	601a      	str	r2, [r3, #0]
					break;
 8008bfa:	e03f      	b.n	8008c7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bfc:	4b31      	ldr	r3, [pc, #196]	; (8008cc4 <xTaskIncrementTick+0x150>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d203      	bcs.n	8008c1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c14:	4a2e      	ldr	r2, [pc, #184]	; (8008cd0 <xTaskIncrementTick+0x15c>)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c1a:	e02f      	b.n	8008c7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe ff79 	bl	8007b18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d004      	beq.n	8008c38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	3318      	adds	r3, #24
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe ff70 	bl	8007b18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3c:	4b25      	ldr	r3, [pc, #148]	; (8008cd4 <xTaskIncrementTick+0x160>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d903      	bls.n	8008c4c <xTaskIncrementTick+0xd8>
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	4a22      	ldr	r2, [pc, #136]	; (8008cd4 <xTaskIncrementTick+0x160>)
 8008c4a:	6013      	str	r3, [r2, #0]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4a1f      	ldr	r2, [pc, #124]	; (8008cd8 <xTaskIncrementTick+0x164>)
 8008c5a:	441a      	add	r2, r3
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	3304      	adds	r3, #4
 8008c60:	4619      	mov	r1, r3
 8008c62:	4610      	mov	r0, r2
 8008c64:	f7fe fefb 	bl	8007a5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6c:	4b1b      	ldr	r3, [pc, #108]	; (8008cdc <xTaskIncrementTick+0x168>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d3b8      	bcc.n	8008be8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c76:	2301      	movs	r3, #1
 8008c78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c7a:	e7b5      	b.n	8008be8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c7c:	4b17      	ldr	r3, [pc, #92]	; (8008cdc <xTaskIncrementTick+0x168>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c82:	4915      	ldr	r1, [pc, #84]	; (8008cd8 <xTaskIncrementTick+0x164>)
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d901      	bls.n	8008c98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008c94:	2301      	movs	r3, #1
 8008c96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c98:	4b11      	ldr	r3, [pc, #68]	; (8008ce0 <xTaskIncrementTick+0x16c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d007      	beq.n	8008cb0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	e004      	b.n	8008cb0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ca6:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <xTaskIncrementTick+0x170>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	4a0d      	ldr	r2, [pc, #52]	; (8008ce4 <xTaskIncrementTick+0x170>)
 8008cae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008cb0:	697b      	ldr	r3, [r7, #20]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000f7c 	.word	0x20000f7c
 8008cc0:	20000f58 	.word	0x20000f58
 8008cc4:	20000f0c 	.word	0x20000f0c
 8008cc8:	20000f10 	.word	0x20000f10
 8008ccc:	20000f6c 	.word	0x20000f6c
 8008cd0:	20000f74 	.word	0x20000f74
 8008cd4:	20000f5c 	.word	0x20000f5c
 8008cd8:	20000a84 	.word	0x20000a84
 8008cdc:	20000a80 	.word	0x20000a80
 8008ce0:	20000f68 	.word	0x20000f68
 8008ce4:	20000f64 	.word	0x20000f64

08008ce8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008cee:	4b2a      	ldr	r3, [pc, #168]	; (8008d98 <vTaskSwitchContext+0xb0>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008cf6:	4b29      	ldr	r3, [pc, #164]	; (8008d9c <vTaskSwitchContext+0xb4>)
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008cfc:	e046      	b.n	8008d8c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008cfe:	4b27      	ldr	r3, [pc, #156]	; (8008d9c <vTaskSwitchContext+0xb4>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d04:	4b26      	ldr	r3, [pc, #152]	; (8008da0 <vTaskSwitchContext+0xb8>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	e010      	b.n	8008d2e <vTaskSwitchContext+0x46>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <vTaskSwitchContext+0x40>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	607b      	str	r3, [r7, #4]
}
 8008d24:	bf00      	nop
 8008d26:	e7fe      	b.n	8008d26 <vTaskSwitchContext+0x3e>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	60fb      	str	r3, [r7, #12]
 8008d2e:	491d      	ldr	r1, [pc, #116]	; (8008da4 <vTaskSwitchContext+0xbc>)
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d0e4      	beq.n	8008d0c <vTaskSwitchContext+0x24>
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	4613      	mov	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4a15      	ldr	r2, [pc, #84]	; (8008da4 <vTaskSwitchContext+0xbc>)
 8008d4e:	4413      	add	r3, r2
 8008d50:	60bb      	str	r3, [r7, #8]
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	605a      	str	r2, [r3, #4]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	3308      	adds	r3, #8
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d104      	bne.n	8008d72 <vTaskSwitchContext+0x8a>
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	605a      	str	r2, [r3, #4]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	4a0b      	ldr	r2, [pc, #44]	; (8008da8 <vTaskSwitchContext+0xc0>)
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	4a08      	ldr	r2, [pc, #32]	; (8008da0 <vTaskSwitchContext+0xb8>)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d82:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <vTaskSwitchContext+0xc0>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3354      	adds	r3, #84	; 0x54
 8008d88:	4a08      	ldr	r2, [pc, #32]	; (8008dac <vTaskSwitchContext+0xc4>)
 8008d8a:	6013      	str	r3, [r2, #0]
}
 8008d8c:	bf00      	nop
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	20000f7c 	.word	0x20000f7c
 8008d9c:	20000f68 	.word	0x20000f68
 8008da0:	20000f5c 	.word	0x20000f5c
 8008da4:	20000a84 	.word	0x20000a84
 8008da8:	20000a80 	.word	0x20000a80
 8008dac:	20000070 	.word	0x20000070

08008db0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	60fb      	str	r3, [r7, #12]
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dd6:	4b07      	ldr	r3, [pc, #28]	; (8008df4 <vTaskPlaceOnEventList+0x44>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3318      	adds	r3, #24
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7fe fe61 	bl	8007aa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008de4:	2101      	movs	r1, #1
 8008de6:	6838      	ldr	r0, [r7, #0]
 8008de8:	f000 fa80 	bl	80092ec <prvAddCurrentTaskToDelayedList>
}
 8008dec:	bf00      	nop
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	20000a80 	.word	0x20000a80

08008df8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10a      	bne.n	8008e20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	617b      	str	r3, [r7, #20]
}
 8008e1c:	bf00      	nop
 8008e1e:	e7fe      	b.n	8008e1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e20:	4b0a      	ldr	r3, [pc, #40]	; (8008e4c <vTaskPlaceOnEventListRestricted+0x54>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3318      	adds	r3, #24
 8008e26:	4619      	mov	r1, r3
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f7fe fe18 	bl	8007a5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e34:	f04f 33ff 	mov.w	r3, #4294967295
 8008e38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	68b8      	ldr	r0, [r7, #8]
 8008e3e:	f000 fa55 	bl	80092ec <prvAddCurrentTaskToDelayedList>
	}
 8008e42:	bf00      	nop
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000a80 	.word	0x20000a80

08008e50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	60fb      	str	r3, [r7, #12]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	3318      	adds	r3, #24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe fe49 	bl	8007b18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e86:	4b1e      	ldr	r3, [pc, #120]	; (8008f00 <xTaskRemoveFromEventList+0xb0>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d11d      	bne.n	8008eca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fe40 	bl	8007b18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9c:	4b19      	ldr	r3, [pc, #100]	; (8008f04 <xTaskRemoveFromEventList+0xb4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d903      	bls.n	8008eac <xTaskRemoveFromEventList+0x5c>
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea8:	4a16      	ldr	r2, [pc, #88]	; (8008f04 <xTaskRemoveFromEventList+0xb4>)
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4a13      	ldr	r2, [pc, #76]	; (8008f08 <xTaskRemoveFromEventList+0xb8>)
 8008eba:	441a      	add	r2, r3
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f7fe fdcb 	bl	8007a5e <vListInsertEnd>
 8008ec8:	e005      	b.n	8008ed6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	3318      	adds	r3, #24
 8008ece:	4619      	mov	r1, r3
 8008ed0:	480e      	ldr	r0, [pc, #56]	; (8008f0c <xTaskRemoveFromEventList+0xbc>)
 8008ed2:	f7fe fdc4 	bl	8007a5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eda:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <xTaskRemoveFromEventList+0xc0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d905      	bls.n	8008ef0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <xTaskRemoveFromEventList+0xc4>)
 8008eea:	2201      	movs	r2, #1
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	e001      	b.n	8008ef4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ef4:	697b      	ldr	r3, [r7, #20]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000f7c 	.word	0x20000f7c
 8008f04:	20000f5c 	.word	0x20000f5c
 8008f08:	20000a84 	.word	0x20000a84
 8008f0c:	20000f14 	.word	0x20000f14
 8008f10:	20000a80 	.word	0x20000a80
 8008f14:	20000f68 	.word	0x20000f68

08008f18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f20:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <vTaskInternalSetTimeOutState+0x24>)
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f28:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <vTaskInternalSetTimeOutState+0x28>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	20000f6c 	.word	0x20000f6c
 8008f40:	20000f58 	.word	0x20000f58

08008f44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	613b      	str	r3, [r7, #16]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10a      	bne.n	8008f86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	60fb      	str	r3, [r7, #12]
}
 8008f82:	bf00      	nop
 8008f84:	e7fe      	b.n	8008f84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008f86:	f000 fe7d 	bl	8009c84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f8a:	4b1d      	ldr	r3, [pc, #116]	; (8009000 <xTaskCheckForTimeOut+0xbc>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa2:	d102      	bne.n	8008faa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	61fb      	str	r3, [r7, #28]
 8008fa8:	e023      	b.n	8008ff2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	4b15      	ldr	r3, [pc, #84]	; (8009004 <xTaskCheckForTimeOut+0xc0>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d007      	beq.n	8008fc6 <xTaskCheckForTimeOut+0x82>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d302      	bcc.n	8008fc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	61fb      	str	r3, [r7, #28]
 8008fc4:	e015      	b.n	8008ff2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d20b      	bcs.n	8008fe8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	1ad2      	subs	r2, r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff ff9b 	bl	8008f18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	61fb      	str	r3, [r7, #28]
 8008fe6:	e004      	b.n	8008ff2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2200      	movs	r2, #0
 8008fec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ff2:	f000 fe77 	bl	8009ce4 <vPortExitCritical>

	return xReturn;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3720      	adds	r7, #32
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20000f58 	.word	0x20000f58
 8009004:	20000f6c 	.word	0x20000f6c

08009008 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009008:	b480      	push	{r7}
 800900a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800900c:	4b03      	ldr	r3, [pc, #12]	; (800901c <vTaskMissedYield+0x14>)
 800900e:	2201      	movs	r2, #1
 8009010:	601a      	str	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	20000f68 	.word	0x20000f68

08009020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009028:	f000 f852 	bl	80090d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800902c:	4b06      	ldr	r3, [pc, #24]	; (8009048 <prvIdleTask+0x28>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d9f9      	bls.n	8009028 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009034:	4b05      	ldr	r3, [pc, #20]	; (800904c <prvIdleTask+0x2c>)
 8009036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009044:	e7f0      	b.n	8009028 <prvIdleTask+0x8>
 8009046:	bf00      	nop
 8009048:	20000a84 	.word	0x20000a84
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009056:	2300      	movs	r3, #0
 8009058:	607b      	str	r3, [r7, #4]
 800905a:	e00c      	b.n	8009076 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	4613      	mov	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4a12      	ldr	r2, [pc, #72]	; (80090b0 <prvInitialiseTaskLists+0x60>)
 8009068:	4413      	add	r3, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fcca 	bl	8007a04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3301      	adds	r3, #1
 8009074:	607b      	str	r3, [r7, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b37      	cmp	r3, #55	; 0x37
 800907a:	d9ef      	bls.n	800905c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800907c:	480d      	ldr	r0, [pc, #52]	; (80090b4 <prvInitialiseTaskLists+0x64>)
 800907e:	f7fe fcc1 	bl	8007a04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009082:	480d      	ldr	r0, [pc, #52]	; (80090b8 <prvInitialiseTaskLists+0x68>)
 8009084:	f7fe fcbe 	bl	8007a04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009088:	480c      	ldr	r0, [pc, #48]	; (80090bc <prvInitialiseTaskLists+0x6c>)
 800908a:	f7fe fcbb 	bl	8007a04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800908e:	480c      	ldr	r0, [pc, #48]	; (80090c0 <prvInitialiseTaskLists+0x70>)
 8009090:	f7fe fcb8 	bl	8007a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009094:	480b      	ldr	r0, [pc, #44]	; (80090c4 <prvInitialiseTaskLists+0x74>)
 8009096:	f7fe fcb5 	bl	8007a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800909a:	4b0b      	ldr	r3, [pc, #44]	; (80090c8 <prvInitialiseTaskLists+0x78>)
 800909c:	4a05      	ldr	r2, [pc, #20]	; (80090b4 <prvInitialiseTaskLists+0x64>)
 800909e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090a0:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <prvInitialiseTaskLists+0x7c>)
 80090a2:	4a05      	ldr	r2, [pc, #20]	; (80090b8 <prvInitialiseTaskLists+0x68>)
 80090a4:	601a      	str	r2, [r3, #0]
}
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000a84 	.word	0x20000a84
 80090b4:	20000ee4 	.word	0x20000ee4
 80090b8:	20000ef8 	.word	0x20000ef8
 80090bc:	20000f14 	.word	0x20000f14
 80090c0:	20000f28 	.word	0x20000f28
 80090c4:	20000f40 	.word	0x20000f40
 80090c8:	20000f0c 	.word	0x20000f0c
 80090cc:	20000f10 	.word	0x20000f10

080090d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090d6:	e019      	b.n	800910c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090d8:	f000 fdd4 	bl	8009c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090dc:	4b10      	ldr	r3, [pc, #64]	; (8009120 <prvCheckTasksWaitingTermination+0x50>)
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fe fd15 	bl	8007b18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090ee:	4b0d      	ldr	r3, [pc, #52]	; (8009124 <prvCheckTasksWaitingTermination+0x54>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	4a0b      	ldr	r2, [pc, #44]	; (8009124 <prvCheckTasksWaitingTermination+0x54>)
 80090f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090f8:	4b0b      	ldr	r3, [pc, #44]	; (8009128 <prvCheckTasksWaitingTermination+0x58>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	4a0a      	ldr	r2, [pc, #40]	; (8009128 <prvCheckTasksWaitingTermination+0x58>)
 8009100:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009102:	f000 fdef 	bl	8009ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f810 	bl	800912c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800910c:	4b06      	ldr	r3, [pc, #24]	; (8009128 <prvCheckTasksWaitingTermination+0x58>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e1      	bne.n	80090d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000f28 	.word	0x20000f28
 8009124:	20000f54 	.word	0x20000f54
 8009128:	20000f3c 	.word	0x20000f3c

0800912c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3354      	adds	r3, #84	; 0x54
 8009138:	4618      	mov	r0, r3
 800913a:	f001 f9cd 	bl	800a4d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009144:	2b00      	cmp	r3, #0
 8009146:	d108      	bne.n	800915a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914c:	4618      	mov	r0, r3
 800914e:	f000 ff87 	bl	800a060 <vPortFree>
				vPortFree( pxTCB );
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 ff84 	bl	800a060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009158:	e018      	b.n	800918c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009160:	2b01      	cmp	r3, #1
 8009162:	d103      	bne.n	800916c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 ff7b 	bl	800a060 <vPortFree>
	}
 800916a:	e00f      	b.n	800918c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009172:	2b02      	cmp	r3, #2
 8009174:	d00a      	beq.n	800918c <prvDeleteTCB+0x60>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	60fb      	str	r3, [r7, #12]
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <prvDeleteTCB+0x5e>
	}
 800918c:	bf00      	nop
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800919a:	4b0c      	ldr	r3, [pc, #48]	; (80091cc <prvResetNextTaskUnblockTime+0x38>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d104      	bne.n	80091ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091a4:	4b0a      	ldr	r3, [pc, #40]	; (80091d0 <prvResetNextTaskUnblockTime+0x3c>)
 80091a6:	f04f 32ff 	mov.w	r2, #4294967295
 80091aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091ac:	e008      	b.n	80091c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091ae:	4b07      	ldr	r3, [pc, #28]	; (80091cc <prvResetNextTaskUnblockTime+0x38>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	4a04      	ldr	r2, [pc, #16]	; (80091d0 <prvResetNextTaskUnblockTime+0x3c>)
 80091be:	6013      	str	r3, [r2, #0]
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	20000f0c 	.word	0x20000f0c
 80091d0:	20000f74 	.word	0x20000f74

080091d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091da:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <xTaskGetSchedulerState+0x34>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d102      	bne.n	80091e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091e2:	2301      	movs	r3, #1
 80091e4:	607b      	str	r3, [r7, #4]
 80091e6:	e008      	b.n	80091fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e8:	4b08      	ldr	r3, [pc, #32]	; (800920c <xTaskGetSchedulerState+0x38>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091f0:	2302      	movs	r3, #2
 80091f2:	607b      	str	r3, [r7, #4]
 80091f4:	e001      	b.n	80091fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091f6:	2300      	movs	r3, #0
 80091f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091fa:	687b      	ldr	r3, [r7, #4]
	}
 80091fc:	4618      	mov	r0, r3
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	20000f60 	.word	0x20000f60
 800920c:	20000f7c 	.word	0x20000f7c

08009210 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d056      	beq.n	80092d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009226:	4b2e      	ldr	r3, [pc, #184]	; (80092e0 <xTaskPriorityDisinherit+0xd0>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	429a      	cmp	r2, r3
 800922e:	d00a      	beq.n	8009246 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	60fb      	str	r3, [r7, #12]
}
 8009242:	bf00      	nop
 8009244:	e7fe      	b.n	8009244 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10a      	bne.n	8009264 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	60bb      	str	r3, [r7, #8]
}
 8009260:	bf00      	nop
 8009262:	e7fe      	b.n	8009262 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009268:	1e5a      	subs	r2, r3, #1
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009276:	429a      	cmp	r2, r3
 8009278:	d02c      	beq.n	80092d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927e:	2b00      	cmp	r3, #0
 8009280:	d128      	bne.n	80092d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	3304      	adds	r3, #4
 8009286:	4618      	mov	r0, r3
 8009288:	f7fe fc46 	bl	8007b18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009298:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a4:	4b0f      	ldr	r3, [pc, #60]	; (80092e4 <xTaskPriorityDisinherit+0xd4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d903      	bls.n	80092b4 <xTaskPriorityDisinherit+0xa4>
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	4a0c      	ldr	r2, [pc, #48]	; (80092e4 <xTaskPriorityDisinherit+0xd4>)
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b8:	4613      	mov	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4a09      	ldr	r2, [pc, #36]	; (80092e8 <xTaskPriorityDisinherit+0xd8>)
 80092c2:	441a      	add	r2, r3
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	3304      	adds	r3, #4
 80092c8:	4619      	mov	r1, r3
 80092ca:	4610      	mov	r0, r2
 80092cc:	f7fe fbc7 	bl	8007a5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092d0:	2301      	movs	r3, #1
 80092d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092d4:	697b      	ldr	r3, [r7, #20]
	}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20000a80 	.word	0x20000a80
 80092e4:	20000f5c 	.word	0x20000f5c
 80092e8:	20000a84 	.word	0x20000a84

080092ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092f6:	4b21      	ldr	r3, [pc, #132]	; (800937c <prvAddCurrentTaskToDelayedList+0x90>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092fc:	4b20      	ldr	r3, [pc, #128]	; (8009380 <prvAddCurrentTaskToDelayedList+0x94>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3304      	adds	r3, #4
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe fc08 	bl	8007b18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930e:	d10a      	bne.n	8009326 <prvAddCurrentTaskToDelayedList+0x3a>
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d007      	beq.n	8009326 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009316:	4b1a      	ldr	r3, [pc, #104]	; (8009380 <prvAddCurrentTaskToDelayedList+0x94>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3304      	adds	r3, #4
 800931c:	4619      	mov	r1, r3
 800931e:	4819      	ldr	r0, [pc, #100]	; (8009384 <prvAddCurrentTaskToDelayedList+0x98>)
 8009320:	f7fe fb9d 	bl	8007a5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009324:	e026      	b.n	8009374 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4413      	add	r3, r2
 800932c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800932e:	4b14      	ldr	r3, [pc, #80]	; (8009380 <prvAddCurrentTaskToDelayedList+0x94>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	429a      	cmp	r2, r3
 800933c:	d209      	bcs.n	8009352 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800933e:	4b12      	ldr	r3, [pc, #72]	; (8009388 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <prvAddCurrentTaskToDelayedList+0x94>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3304      	adds	r3, #4
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f7fe fbab 	bl	8007aa6 <vListInsert>
}
 8009350:	e010      	b.n	8009374 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009352:	4b0e      	ldr	r3, [pc, #56]	; (800938c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	4b0a      	ldr	r3, [pc, #40]	; (8009380 <prvAddCurrentTaskToDelayedList+0x94>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	3304      	adds	r3, #4
 800935c:	4619      	mov	r1, r3
 800935e:	4610      	mov	r0, r2
 8009360:	f7fe fba1 	bl	8007aa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009364:	4b0a      	ldr	r3, [pc, #40]	; (8009390 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	429a      	cmp	r2, r3
 800936c:	d202      	bcs.n	8009374 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800936e:	4a08      	ldr	r2, [pc, #32]	; (8009390 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	6013      	str	r3, [r2, #0]
}
 8009374:	bf00      	nop
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20000f58 	.word	0x20000f58
 8009380:	20000a80 	.word	0x20000a80
 8009384:	20000f40 	.word	0x20000f40
 8009388:	20000f10 	.word	0x20000f10
 800938c:	20000f0c 	.word	0x20000f0c
 8009390:	20000f74 	.word	0x20000f74

08009394 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b08a      	sub	sp, #40	; 0x28
 8009398:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800939a:	2300      	movs	r3, #0
 800939c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800939e:	f000 fb07 	bl	80099b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80093a2:	4b1c      	ldr	r3, [pc, #112]	; (8009414 <xTimerCreateTimerTask+0x80>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d021      	beq.n	80093ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093b2:	1d3a      	adds	r2, r7, #4
 80093b4:	f107 0108 	add.w	r1, r7, #8
 80093b8:	f107 030c 	add.w	r3, r7, #12
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fe fb07 	bl	80079d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	9202      	str	r2, [sp, #8]
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	2302      	movs	r3, #2
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	2300      	movs	r3, #0
 80093d2:	460a      	mov	r2, r1
 80093d4:	4910      	ldr	r1, [pc, #64]	; (8009418 <xTimerCreateTimerTask+0x84>)
 80093d6:	4811      	ldr	r0, [pc, #68]	; (800941c <xTimerCreateTimerTask+0x88>)
 80093d8:	f7ff f8b4 	bl	8008544 <xTaskCreateStatic>
 80093dc:	4603      	mov	r3, r0
 80093de:	4a10      	ldr	r2, [pc, #64]	; (8009420 <xTimerCreateTimerTask+0x8c>)
 80093e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <xTimerCreateTimerTask+0x8c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093ea:	2301      	movs	r3, #1
 80093ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	613b      	str	r3, [r7, #16]
}
 8009406:	bf00      	nop
 8009408:	e7fe      	b.n	8009408 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800940a:	697b      	ldr	r3, [r7, #20]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	20000fb0 	.word	0x20000fb0
 8009418:	0800b34c 	.word	0x0800b34c
 800941c:	08009559 	.word	0x08009559
 8009420:	20000fb4 	.word	0x20000fb4

08009424 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08a      	sub	sp, #40	; 0x28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009432:	2300      	movs	r3, #0
 8009434:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <xTimerGenericCommand+0x2e>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	623b      	str	r3, [r7, #32]
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009452:	4b1a      	ldr	r3, [pc, #104]	; (80094bc <xTimerGenericCommand+0x98>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d02a      	beq.n	80094b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2b05      	cmp	r3, #5
 800946a:	dc18      	bgt.n	800949e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800946c:	f7ff feb2 	bl	80091d4 <xTaskGetSchedulerState>
 8009470:	4603      	mov	r3, r0
 8009472:	2b02      	cmp	r3, #2
 8009474:	d109      	bne.n	800948a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009476:	4b11      	ldr	r3, [pc, #68]	; (80094bc <xTimerGenericCommand+0x98>)
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	f107 0110 	add.w	r1, r7, #16
 800947e:	2300      	movs	r3, #0
 8009480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009482:	f7fe fc77 	bl	8007d74 <xQueueGenericSend>
 8009486:	6278      	str	r0, [r7, #36]	; 0x24
 8009488:	e012      	b.n	80094b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800948a:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <xTimerGenericCommand+0x98>)
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	f107 0110 	add.w	r1, r7, #16
 8009492:	2300      	movs	r3, #0
 8009494:	2200      	movs	r2, #0
 8009496:	f7fe fc6d 	bl	8007d74 <xQueueGenericSend>
 800949a:	6278      	str	r0, [r7, #36]	; 0x24
 800949c:	e008      	b.n	80094b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800949e:	4b07      	ldr	r3, [pc, #28]	; (80094bc <xTimerGenericCommand+0x98>)
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	f107 0110 	add.w	r1, r7, #16
 80094a6:	2300      	movs	r3, #0
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	f7fe fd61 	bl	8007f70 <xQueueGenericSendFromISR>
 80094ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3728      	adds	r7, #40	; 0x28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20000fb0 	.word	0x20000fb0

080094c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af02      	add	r7, sp, #8
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ca:	4b22      	ldr	r3, [pc, #136]	; (8009554 <prvProcessExpiredTimer+0x94>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	3304      	adds	r3, #4
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe fb1d 	bl	8007b18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d022      	beq.n	8009532 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	699a      	ldr	r2, [r3, #24]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	18d1      	adds	r1, r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	6978      	ldr	r0, [r7, #20]
 80094fa:	f000 f8d1 	bl	80096a0 <prvInsertTimerInActiveList>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d01f      	beq.n	8009544 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009504:	2300      	movs	r3, #0
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	2300      	movs	r3, #0
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	2100      	movs	r1, #0
 800950e:	6978      	ldr	r0, [r7, #20]
 8009510:	f7ff ff88 	bl	8009424 <xTimerGenericCommand>
 8009514:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d113      	bne.n	8009544 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	60fb      	str	r3, [r7, #12]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009538:	f023 0301 	bic.w	r3, r3, #1
 800953c:	b2da      	uxtb	r2, r3
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	6a1b      	ldr	r3, [r3, #32]
 8009548:	6978      	ldr	r0, [r7, #20]
 800954a:	4798      	blx	r3
}
 800954c:	bf00      	nop
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	20000fa8 	.word	0x20000fa8

08009558 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009560:	f107 0308 	add.w	r3, r7, #8
 8009564:	4618      	mov	r0, r3
 8009566:	f000 f857 	bl	8009618 <prvGetNextExpireTime>
 800956a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4619      	mov	r1, r3
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f803 	bl	800957c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009576:	f000 f8d5 	bl	8009724 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800957a:	e7f1      	b.n	8009560 <prvTimerTask+0x8>

0800957c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009586:	f7ff fa39 	bl	80089fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800958a:	f107 0308 	add.w	r3, r7, #8
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f866 	bl	8009660 <prvSampleTimeNow>
 8009594:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d130      	bne.n	80095fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10a      	bne.n	80095b8 <prvProcessTimerOrBlockTask+0x3c>
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d806      	bhi.n	80095b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80095aa:	f7ff fa35 	bl	8008a18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7ff ff85 	bl	80094c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80095b6:	e024      	b.n	8009602 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d008      	beq.n	80095d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095be:	4b13      	ldr	r3, [pc, #76]	; (800960c <prvProcessTimerOrBlockTask+0x90>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <prvProcessTimerOrBlockTask+0x50>
 80095c8:	2301      	movs	r3, #1
 80095ca:	e000      	b.n	80095ce <prvProcessTimerOrBlockTask+0x52>
 80095cc:	2300      	movs	r3, #0
 80095ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80095d0:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <prvProcessTimerOrBlockTask+0x94>)
 80095d2:	6818      	ldr	r0, [r3, #0]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	4619      	mov	r1, r3
 80095de:	f7fe ff7d 	bl	80084dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095e2:	f7ff fa19 	bl	8008a18 <xTaskResumeAll>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80095ec:	4b09      	ldr	r3, [pc, #36]	; (8009614 <prvProcessTimerOrBlockTask+0x98>)
 80095ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	f3bf 8f6f 	isb	sy
}
 80095fc:	e001      	b.n	8009602 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80095fe:	f7ff fa0b 	bl	8008a18 <xTaskResumeAll>
}
 8009602:	bf00      	nop
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20000fac 	.word	0x20000fac
 8009610:	20000fb0 	.word	0x20000fb0
 8009614:	e000ed04 	.word	0xe000ed04

08009618 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009620:	4b0e      	ldr	r3, [pc, #56]	; (800965c <prvGetNextExpireTime+0x44>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <prvGetNextExpireTime+0x16>
 800962a:	2201      	movs	r2, #1
 800962c:	e000      	b.n	8009630 <prvGetNextExpireTime+0x18>
 800962e:	2200      	movs	r2, #0
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800963c:	4b07      	ldr	r3, [pc, #28]	; (800965c <prvGetNextExpireTime+0x44>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	e001      	b.n	800964c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800964c:	68fb      	ldr	r3, [r7, #12]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	20000fa8 	.word	0x20000fa8

08009660 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009668:	f7ff fa74 	bl	8008b54 <xTaskGetTickCount>
 800966c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800966e:	4b0b      	ldr	r3, [pc, #44]	; (800969c <prvSampleTimeNow+0x3c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	429a      	cmp	r2, r3
 8009676:	d205      	bcs.n	8009684 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009678:	f000 f936 	bl	80098e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	e002      	b.n	800968a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800968a:	4a04      	ldr	r2, [pc, #16]	; (800969c <prvSampleTimeNow+0x3c>)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009690:	68fb      	ldr	r3, [r7, #12]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20000fb8 	.word	0x20000fb8

080096a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d812      	bhi.n	80096ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	1ad2      	subs	r2, r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d302      	bcc.n	80096da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80096d4:	2301      	movs	r3, #1
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	e01b      	b.n	8009712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80096da:	4b10      	ldr	r3, [pc, #64]	; (800971c <prvInsertTimerInActiveList+0x7c>)
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3304      	adds	r3, #4
 80096e2:	4619      	mov	r1, r3
 80096e4:	4610      	mov	r0, r2
 80096e6:	f7fe f9de 	bl	8007aa6 <vListInsert>
 80096ea:	e012      	b.n	8009712 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d206      	bcs.n	8009702 <prvInsertTimerInActiveList+0x62>
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d302      	bcc.n	8009702 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80096fc:	2301      	movs	r3, #1
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	e007      	b.n	8009712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009702:	4b07      	ldr	r3, [pc, #28]	; (8009720 <prvInsertTimerInActiveList+0x80>)
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3304      	adds	r3, #4
 800970a:	4619      	mov	r1, r3
 800970c:	4610      	mov	r0, r2
 800970e:	f7fe f9ca 	bl	8007aa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009712:	697b      	ldr	r3, [r7, #20]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	20000fac 	.word	0x20000fac
 8009720:	20000fa8 	.word	0x20000fa8

08009724 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08e      	sub	sp, #56	; 0x38
 8009728:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800972a:	e0ca      	b.n	80098c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	da18      	bge.n	8009764 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009732:	1d3b      	adds	r3, r7, #4
 8009734:	3304      	adds	r3, #4
 8009736:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10a      	bne.n	8009754 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	61fb      	str	r3, [r7, #28]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800975a:	6850      	ldr	r0, [r2, #4]
 800975c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800975e:	6892      	ldr	r2, [r2, #8]
 8009760:	4611      	mov	r1, r2
 8009762:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f2c0 80ab 	blt.w	80098c2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d004      	beq.n	8009782 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	3304      	adds	r3, #4
 800977c:	4618      	mov	r0, r3
 800977e:	f7fe f9cb 	bl	8007b18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009782:	463b      	mov	r3, r7
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff ff6b 	bl	8009660 <prvSampleTimeNow>
 800978a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b09      	cmp	r3, #9
 8009790:	f200 8096 	bhi.w	80098c0 <prvProcessReceivedCommands+0x19c>
 8009794:	a201      	add	r2, pc, #4	; (adr r2, 800979c <prvProcessReceivedCommands+0x78>)
 8009796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979a:	bf00      	nop
 800979c:	080097c5 	.word	0x080097c5
 80097a0:	080097c5 	.word	0x080097c5
 80097a4:	080097c5 	.word	0x080097c5
 80097a8:	08009839 	.word	0x08009839
 80097ac:	0800984d 	.word	0x0800984d
 80097b0:	08009897 	.word	0x08009897
 80097b4:	080097c5 	.word	0x080097c5
 80097b8:	080097c5 	.word	0x080097c5
 80097bc:	08009839 	.word	0x08009839
 80097c0:	0800984d 	.word	0x0800984d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ca:	f043 0301 	orr.w	r3, r3, #1
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	18d1      	adds	r1, r2, r3
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e4:	f7ff ff5c 	bl	80096a0 <prvInsertTimerInActiveList>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d069      	beq.n	80098c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d05e      	beq.n	80098c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	441a      	add	r2, r3
 800980c:	2300      	movs	r3, #0
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	2300      	movs	r3, #0
 8009812:	2100      	movs	r1, #0
 8009814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009816:	f7ff fe05 	bl	8009424 <xTimerGenericCommand>
 800981a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d14f      	bne.n	80098c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	61bb      	str	r3, [r7, #24]
}
 8009834:	bf00      	nop
 8009836:	e7fe      	b.n	8009836 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800983e:	f023 0301 	bic.w	r3, r3, #1
 8009842:	b2da      	uxtb	r2, r3
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800984a:	e03a      	b.n	80098c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009852:	f043 0301 	orr.w	r3, r3, #1
 8009856:	b2da      	uxtb	r2, r3
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	617b      	str	r3, [r7, #20]
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009884:	699a      	ldr	r2, [r3, #24]
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	18d1      	adds	r1, r2, r3
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800988e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009890:	f7ff ff06 	bl	80096a0 <prvInsertTimerInActiveList>
					break;
 8009894:	e015      	b.n	80098c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800989c:	f003 0302 	and.w	r3, r3, #2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d103      	bne.n	80098ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80098a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098a6:	f000 fbdb 	bl	800a060 <vPortFree>
 80098aa:	e00a      	b.n	80098c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098b2:	f023 0301 	bic.w	r3, r3, #1
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098be:	e000      	b.n	80098c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80098c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098c2:	4b08      	ldr	r3, [pc, #32]	; (80098e4 <prvProcessReceivedCommands+0x1c0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	1d39      	adds	r1, r7, #4
 80098c8:	2200      	movs	r2, #0
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe fbec 	bl	80080a8 <xQueueReceive>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f47f af2a 	bne.w	800972c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80098d8:	bf00      	nop
 80098da:	bf00      	nop
 80098dc:	3730      	adds	r7, #48	; 0x30
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000fb0 	.word	0x20000fb0

080098e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b088      	sub	sp, #32
 80098ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098ee:	e048      	b.n	8009982 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098f0:	4b2d      	ldr	r3, [pc, #180]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098fa:	4b2b      	ldr	r3, [pc, #172]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	3304      	adds	r3, #4
 8009908:	4618      	mov	r0, r3
 800990a:	f7fe f905 	bl	8007b18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800991c:	f003 0304 	and.w	r3, r3, #4
 8009920:	2b00      	cmp	r3, #0
 8009922:	d02e      	beq.n	8009982 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	4413      	add	r3, r2
 800992c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	429a      	cmp	r2, r3
 8009934:	d90e      	bls.n	8009954 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009942:	4b19      	ldr	r3, [pc, #100]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3304      	adds	r3, #4
 800994a:	4619      	mov	r1, r3
 800994c:	4610      	mov	r0, r2
 800994e:	f7fe f8aa 	bl	8007aa6 <vListInsert>
 8009952:	e016      	b.n	8009982 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009954:	2300      	movs	r3, #0
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	2300      	movs	r3, #0
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	2100      	movs	r1, #0
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7ff fd60 	bl	8009424 <xTimerGenericCommand>
 8009964:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10a      	bne.n	8009982 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	603b      	str	r3, [r7, #0]
}
 800997e:	bf00      	nop
 8009980:	e7fe      	b.n	8009980 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009982:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1b1      	bne.n	80098f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009992:	4b06      	ldr	r3, [pc, #24]	; (80099ac <prvSwitchTimerLists+0xc4>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a04      	ldr	r2, [pc, #16]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 8009998:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800999a:	4a04      	ldr	r2, [pc, #16]	; (80099ac <prvSwitchTimerLists+0xc4>)
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	6013      	str	r3, [r2, #0]
}
 80099a0:	bf00      	nop
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20000fa8 	.word	0x20000fa8
 80099ac:	20000fac 	.word	0x20000fac

080099b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099b6:	f000 f965 	bl	8009c84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099ba:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <prvCheckForValidListAndQueue+0x60>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d120      	bne.n	8009a04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80099c2:	4814      	ldr	r0, [pc, #80]	; (8009a14 <prvCheckForValidListAndQueue+0x64>)
 80099c4:	f7fe f81e 	bl	8007a04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099c8:	4813      	ldr	r0, [pc, #76]	; (8009a18 <prvCheckForValidListAndQueue+0x68>)
 80099ca:	f7fe f81b 	bl	8007a04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099ce:	4b13      	ldr	r3, [pc, #76]	; (8009a1c <prvCheckForValidListAndQueue+0x6c>)
 80099d0:	4a10      	ldr	r2, [pc, #64]	; (8009a14 <prvCheckForValidListAndQueue+0x64>)
 80099d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099d4:	4b12      	ldr	r3, [pc, #72]	; (8009a20 <prvCheckForValidListAndQueue+0x70>)
 80099d6:	4a10      	ldr	r2, [pc, #64]	; (8009a18 <prvCheckForValidListAndQueue+0x68>)
 80099d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099da:	2300      	movs	r3, #0
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	4b11      	ldr	r3, [pc, #68]	; (8009a24 <prvCheckForValidListAndQueue+0x74>)
 80099e0:	4a11      	ldr	r2, [pc, #68]	; (8009a28 <prvCheckForValidListAndQueue+0x78>)
 80099e2:	2110      	movs	r1, #16
 80099e4:	200a      	movs	r0, #10
 80099e6:	f7fe f929 	bl	8007c3c <xQueueGenericCreateStatic>
 80099ea:	4603      	mov	r3, r0
 80099ec:	4a08      	ldr	r2, [pc, #32]	; (8009a10 <prvCheckForValidListAndQueue+0x60>)
 80099ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <prvCheckForValidListAndQueue+0x60>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d005      	beq.n	8009a04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099f8:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <prvCheckForValidListAndQueue+0x60>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	490b      	ldr	r1, [pc, #44]	; (8009a2c <prvCheckForValidListAndQueue+0x7c>)
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe fd42 	bl	8008488 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a04:	f000 f96e 	bl	8009ce4 <vPortExitCritical>
}
 8009a08:	bf00      	nop
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000fb0 	.word	0x20000fb0
 8009a14:	20000f80 	.word	0x20000f80
 8009a18:	20000f94 	.word	0x20000f94
 8009a1c:	20000fa8 	.word	0x20000fa8
 8009a20:	20000fac 	.word	0x20000fac
 8009a24:	2000105c 	.word	0x2000105c
 8009a28:	20000fbc 	.word	0x20000fbc
 8009a2c:	0800b354 	.word	0x0800b354

08009a30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3b04      	subs	r3, #4
 8009a40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3b04      	subs	r3, #4
 8009a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f023 0201 	bic.w	r2, r3, #1
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3b04      	subs	r3, #4
 8009a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a60:	4a0c      	ldr	r2, [pc, #48]	; (8009a94 <pxPortInitialiseStack+0x64>)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3b14      	subs	r3, #20
 8009a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3b04      	subs	r3, #4
 8009a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f06f 0202 	mvn.w	r2, #2
 8009a7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3b20      	subs	r3, #32
 8009a84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a86:	68fb      	ldr	r3, [r7, #12]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	08009a99 	.word	0x08009a99

08009a98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <prvTaskExitError+0x54>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aaa:	d00a      	beq.n	8009ac2 <prvTaskExitError+0x2a>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	60fb      	str	r3, [r7, #12]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <prvTaskExitError+0x28>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	60bb      	str	r3, [r7, #8]
}
 8009ad4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ad6:	bf00      	nop
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0fc      	beq.n	8009ad8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ade:	bf00      	nop
 8009ae0:	bf00      	nop
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	20000014 	.word	0x20000014

08009af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <pxCurrentTCBConst2>)
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	6808      	ldr	r0, [r1, #0]
 8009af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afa:	f380 8809 	msr	PSP, r0
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	f380 8811 	msr	BASEPRI, r0
 8009b0a:	4770      	bx	lr
 8009b0c:	f3af 8000 	nop.w

08009b10 <pxCurrentTCBConst2>:
 8009b10:	20000a80 	.word	0x20000a80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop

08009b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b18:	4808      	ldr	r0, [pc, #32]	; (8009b3c <prvPortStartFirstTask+0x24>)
 8009b1a:	6800      	ldr	r0, [r0, #0]
 8009b1c:	6800      	ldr	r0, [r0, #0]
 8009b1e:	f380 8808 	msr	MSP, r0
 8009b22:	f04f 0000 	mov.w	r0, #0
 8009b26:	f380 8814 	msr	CONTROL, r0
 8009b2a:	b662      	cpsie	i
 8009b2c:	b661      	cpsie	f
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	df00      	svc	0
 8009b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b3a:	bf00      	nop
 8009b3c:	e000ed08 	.word	0xe000ed08

08009b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b46:	4b46      	ldr	r3, [pc, #280]	; (8009c60 <xPortStartScheduler+0x120>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a46      	ldr	r2, [pc, #280]	; (8009c64 <xPortStartScheduler+0x124>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d10a      	bne.n	8009b66 <xPortStartScheduler+0x26>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	613b      	str	r3, [r7, #16]
}
 8009b62:	bf00      	nop
 8009b64:	e7fe      	b.n	8009b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b66:	4b3e      	ldr	r3, [pc, #248]	; (8009c60 <xPortStartScheduler+0x120>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a3f      	ldr	r2, [pc, #252]	; (8009c68 <xPortStartScheduler+0x128>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d10a      	bne.n	8009b86 <xPortStartScheduler+0x46>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	60fb      	str	r3, [r7, #12]
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b86:	4b39      	ldr	r3, [pc, #228]	; (8009c6c <xPortStartScheduler+0x12c>)
 8009b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	22ff      	movs	r2, #255	; 0xff
 8009b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ba0:	78fb      	ldrb	r3, [r7, #3]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	4b31      	ldr	r3, [pc, #196]	; (8009c70 <xPortStartScheduler+0x130>)
 8009bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bae:	4b31      	ldr	r3, [pc, #196]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bb0:	2207      	movs	r2, #7
 8009bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bb4:	e009      	b.n	8009bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009bb6:	4b2f      	ldr	r3, [pc, #188]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	4a2d      	ldr	r2, [pc, #180]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd2:	2b80      	cmp	r3, #128	; 0x80
 8009bd4:	d0ef      	beq.n	8009bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009bd6:	4b27      	ldr	r3, [pc, #156]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f1c3 0307 	rsb	r3, r3, #7
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d00a      	beq.n	8009bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	60bb      	str	r3, [r7, #8]
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009bf8:	4b1e      	ldr	r3, [pc, #120]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	021b      	lsls	r3, r3, #8
 8009bfe:	4a1d      	ldr	r2, [pc, #116]	; (8009c74 <xPortStartScheduler+0x134>)
 8009c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c02:	4b1c      	ldr	r3, [pc, #112]	; (8009c74 <xPortStartScheduler+0x134>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c0a:	4a1a      	ldr	r2, [pc, #104]	; (8009c74 <xPortStartScheduler+0x134>)
 8009c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c16:	4b18      	ldr	r3, [pc, #96]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a17      	ldr	r2, [pc, #92]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c22:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a14      	ldr	r2, [pc, #80]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c2e:	f000 f8dd 	bl	8009dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c32:	4b12      	ldr	r3, [pc, #72]	; (8009c7c <xPortStartScheduler+0x13c>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c38:	f000 f8fc 	bl	8009e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c3c:	4b10      	ldr	r3, [pc, #64]	; (8009c80 <xPortStartScheduler+0x140>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a0f      	ldr	r2, [pc, #60]	; (8009c80 <xPortStartScheduler+0x140>)
 8009c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c48:	f7ff ff66 	bl	8009b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c4c:	f7ff f84c 	bl	8008ce8 <vTaskSwitchContext>
	prvTaskExitError();
 8009c50:	f7ff ff22 	bl	8009a98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	e000ed00 	.word	0xe000ed00
 8009c64:	410fc271 	.word	0x410fc271
 8009c68:	410fc270 	.word	0x410fc270
 8009c6c:	e000e400 	.word	0xe000e400
 8009c70:	200010ac 	.word	0x200010ac
 8009c74:	200010b0 	.word	0x200010b0
 8009c78:	e000ed20 	.word	0xe000ed20
 8009c7c:	20000014 	.word	0x20000014
 8009c80:	e000ef34 	.word	0xe000ef34

08009c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	607b      	str	r3, [r7, #4]
}
 8009c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c9e:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <vPortEnterCritical+0x58>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	4a0d      	ldr	r2, [pc, #52]	; (8009cdc <vPortEnterCritical+0x58>)
 8009ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ca8:	4b0c      	ldr	r3, [pc, #48]	; (8009cdc <vPortEnterCritical+0x58>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d10f      	bne.n	8009cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <vPortEnterCritical+0x5c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00a      	beq.n	8009cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	603b      	str	r3, [r7, #0]
}
 8009ccc:	bf00      	nop
 8009cce:	e7fe      	b.n	8009cce <vPortEnterCritical+0x4a>
	}
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	20000014 	.word	0x20000014
 8009ce0:	e000ed04 	.word	0xe000ed04

08009ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009cea:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <vPortExitCritical+0x50>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10a      	bne.n	8009d08 <vPortExitCritical+0x24>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	607b      	str	r3, [r7, #4]
}
 8009d04:	bf00      	nop
 8009d06:	e7fe      	b.n	8009d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <vPortExitCritical+0x50>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	4a09      	ldr	r2, [pc, #36]	; (8009d34 <vPortExitCritical+0x50>)
 8009d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d12:	4b08      	ldr	r3, [pc, #32]	; (8009d34 <vPortExitCritical+0x50>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d105      	bne.n	8009d26 <vPortExitCritical+0x42>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	f383 8811 	msr	BASEPRI, r3
}
 8009d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d26:	bf00      	nop
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	20000014 	.word	0x20000014
	...

08009d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d40:	f3ef 8009 	mrs	r0, PSP
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	4b15      	ldr	r3, [pc, #84]	; (8009da0 <pxCurrentTCBConst>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	f01e 0f10 	tst.w	lr, #16
 8009d50:	bf08      	it	eq
 8009d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5a:	6010      	str	r0, [r2, #0]
 8009d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d64:	f380 8811 	msr	BASEPRI, r0
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f7fe ffba 	bl	8008ce8 <vTaskSwitchContext>
 8009d74:	f04f 0000 	mov.w	r0, #0
 8009d78:	f380 8811 	msr	BASEPRI, r0
 8009d7c:	bc09      	pop	{r0, r3}
 8009d7e:	6819      	ldr	r1, [r3, #0]
 8009d80:	6808      	ldr	r0, [r1, #0]
 8009d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d86:	f01e 0f10 	tst.w	lr, #16
 8009d8a:	bf08      	it	eq
 8009d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d90:	f380 8809 	msr	PSP, r0
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	f3af 8000 	nop.w

08009da0 <pxCurrentTCBConst>:
 8009da0:	20000a80 	.word	0x20000a80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop

08009da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	607b      	str	r3, [r7, #4]
}
 8009dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009dc2:	f7fe fed7 	bl	8008b74 <xTaskIncrementTick>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dcc:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <xPortSysTickHandler+0x40>)
 8009dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	f383 8811 	msr	BASEPRI, r3
}
 8009dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	e000ed04 	.word	0xe000ed04

08009dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009dec:	b480      	push	{r7}
 8009dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <vPortSetupTimerInterrupt+0x34>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009df6:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <vPortSetupTimerInterrupt+0x38>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dfc:	4b0a      	ldr	r3, [pc, #40]	; (8009e28 <vPortSetupTimerInterrupt+0x3c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <vPortSetupTimerInterrupt+0x40>)
 8009e02:	fba2 2303 	umull	r2, r3, r2, r3
 8009e06:	099b      	lsrs	r3, r3, #6
 8009e08:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <vPortSetupTimerInterrupt+0x44>)
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e0e:	4b04      	ldr	r3, [pc, #16]	; (8009e20 <vPortSetupTimerInterrupt+0x34>)
 8009e10:	2207      	movs	r2, #7
 8009e12:	601a      	str	r2, [r3, #0]
}
 8009e14:	bf00      	nop
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	e000e010 	.word	0xe000e010
 8009e24:	e000e018 	.word	0xe000e018
 8009e28:	20000008 	.word	0x20000008
 8009e2c:	10624dd3 	.word	0x10624dd3
 8009e30:	e000e014 	.word	0xe000e014

08009e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e44 <vPortEnableVFP+0x10>
 8009e38:	6801      	ldr	r1, [r0, #0]
 8009e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e3e:	6001      	str	r1, [r0, #0]
 8009e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e42:	bf00      	nop
 8009e44:	e000ed88 	.word	0xe000ed88

08009e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e4e:	f3ef 8305 	mrs	r3, IPSR
 8009e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b0f      	cmp	r3, #15
 8009e58:	d914      	bls.n	8009e84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e5a:	4a17      	ldr	r2, [pc, #92]	; (8009eb8 <vPortValidateInterruptPriority+0x70>)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4413      	add	r3, r2
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e64:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <vPortValidateInterruptPriority+0x74>)
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	7afa      	ldrb	r2, [r7, #11]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d20a      	bcs.n	8009e84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	607b      	str	r3, [r7, #4]
}
 8009e80:	bf00      	nop
 8009e82:	e7fe      	b.n	8009e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e84:	4b0e      	ldr	r3, [pc, #56]	; (8009ec0 <vPortValidateInterruptPriority+0x78>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <vPortValidateInterruptPriority+0x7c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d90a      	bls.n	8009eaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	603b      	str	r3, [r7, #0]
}
 8009ea6:	bf00      	nop
 8009ea8:	e7fe      	b.n	8009ea8 <vPortValidateInterruptPriority+0x60>
	}
 8009eaa:	bf00      	nop
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	e000e3f0 	.word	0xe000e3f0
 8009ebc:	200010ac 	.word	0x200010ac
 8009ec0:	e000ed0c 	.word	0xe000ed0c
 8009ec4:	200010b0 	.word	0x200010b0

08009ec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08a      	sub	sp, #40	; 0x28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ed4:	f7fe fd92 	bl	80089fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ed8:	4b5b      	ldr	r3, [pc, #364]	; (800a048 <pvPortMalloc+0x180>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ee0:	f000 f920 	bl	800a124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ee4:	4b59      	ldr	r3, [pc, #356]	; (800a04c <pvPortMalloc+0x184>)
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4013      	ands	r3, r2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f040 8093 	bne.w	800a018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d01d      	beq.n	8009f34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ef8:	2208      	movs	r2, #8
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4413      	add	r3, r2
 8009efe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f003 0307 	and.w	r3, r3, #7
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d014      	beq.n	8009f34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f023 0307 	bic.w	r3, r3, #7
 8009f10:	3308      	adds	r3, #8
 8009f12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f003 0307 	and.w	r3, r3, #7
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <pvPortMalloc+0x6c>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	617b      	str	r3, [r7, #20]
}
 8009f30:	bf00      	nop
 8009f32:	e7fe      	b.n	8009f32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d06e      	beq.n	800a018 <pvPortMalloc+0x150>
 8009f3a:	4b45      	ldr	r3, [pc, #276]	; (800a050 <pvPortMalloc+0x188>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d869      	bhi.n	800a018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f44:	4b43      	ldr	r3, [pc, #268]	; (800a054 <pvPortMalloc+0x18c>)
 8009f46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f48:	4b42      	ldr	r3, [pc, #264]	; (800a054 <pvPortMalloc+0x18c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f4e:	e004      	b.n	8009f5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d903      	bls.n	8009f6c <pvPortMalloc+0xa4>
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1f1      	bne.n	8009f50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f6c:	4b36      	ldr	r3, [pc, #216]	; (800a048 <pvPortMalloc+0x180>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d050      	beq.n	800a018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2208      	movs	r2, #8
 8009f7c:	4413      	add	r3, r2
 8009f7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	1ad2      	subs	r2, r2, r3
 8009f90:	2308      	movs	r3, #8
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d91f      	bls.n	8009fd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	f003 0307 	and.w	r3, r3, #7
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00a      	beq.n	8009fc0 <pvPortMalloc+0xf8>
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	613b      	str	r3, [r7, #16]
}
 8009fbc:	bf00      	nop
 8009fbe:	e7fe      	b.n	8009fbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	1ad2      	subs	r2, r2, r3
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fd2:	69b8      	ldr	r0, [r7, #24]
 8009fd4:	f000 f908 	bl	800a1e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fd8:	4b1d      	ldr	r3, [pc, #116]	; (800a050 <pvPortMalloc+0x188>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	4a1b      	ldr	r2, [pc, #108]	; (800a050 <pvPortMalloc+0x188>)
 8009fe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fe6:	4b1a      	ldr	r3, [pc, #104]	; (800a050 <pvPortMalloc+0x188>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4b1b      	ldr	r3, [pc, #108]	; (800a058 <pvPortMalloc+0x190>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d203      	bcs.n	8009ffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ff2:	4b17      	ldr	r3, [pc, #92]	; (800a050 <pvPortMalloc+0x188>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a18      	ldr	r2, [pc, #96]	; (800a058 <pvPortMalloc+0x190>)
 8009ff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	685a      	ldr	r2, [r3, #4]
 8009ffe:	4b13      	ldr	r3, [pc, #76]	; (800a04c <pvPortMalloc+0x184>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	431a      	orrs	r2, r3
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	2200      	movs	r2, #0
 800a00c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a00e:	4b13      	ldr	r3, [pc, #76]	; (800a05c <pvPortMalloc+0x194>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3301      	adds	r3, #1
 800a014:	4a11      	ldr	r2, [pc, #68]	; (800a05c <pvPortMalloc+0x194>)
 800a016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a018:	f7fe fcfe 	bl	8008a18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00a      	beq.n	800a03c <pvPortMalloc+0x174>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	60fb      	str	r3, [r7, #12]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <pvPortMalloc+0x172>
	return pvReturn;
 800a03c:	69fb      	ldr	r3, [r7, #28]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3728      	adds	r7, #40	; 0x28
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	2000d40c 	.word	0x2000d40c
 800a04c:	2000d420 	.word	0x2000d420
 800a050:	2000d410 	.word	0x2000d410
 800a054:	2000d404 	.word	0x2000d404
 800a058:	2000d414 	.word	0x2000d414
 800a05c:	2000d418 	.word	0x2000d418

0800a060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d04d      	beq.n	800a10e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a072:	2308      	movs	r3, #8
 800a074:	425b      	negs	r3, r3
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	4413      	add	r3, r2
 800a07a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	4b24      	ldr	r3, [pc, #144]	; (800a118 <vPortFree+0xb8>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4013      	ands	r3, r2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10a      	bne.n	800a0a4 <vPortFree+0x44>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	60fb      	str	r3, [r7, #12]
}
 800a0a0:	bf00      	nop
 800a0a2:	e7fe      	b.n	800a0a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00a      	beq.n	800a0c2 <vPortFree+0x62>
	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	60bb      	str	r3, [r7, #8]
}
 800a0be:	bf00      	nop
 800a0c0:	e7fe      	b.n	800a0c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <vPortFree+0xb8>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d01e      	beq.n	800a10e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d11a      	bne.n	800a10e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	4b0e      	ldr	r3, [pc, #56]	; (800a118 <vPortFree+0xb8>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	43db      	mvns	r3, r3
 800a0e2:	401a      	ands	r2, r3
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0e8:	f7fe fc88 	bl	80089fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	685a      	ldr	r2, [r3, #4]
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <vPortFree+0xbc>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	4a09      	ldr	r2, [pc, #36]	; (800a11c <vPortFree+0xbc>)
 800a0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0fa:	6938      	ldr	r0, [r7, #16]
 800a0fc:	f000 f874 	bl	800a1e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a100:	4b07      	ldr	r3, [pc, #28]	; (800a120 <vPortFree+0xc0>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3301      	adds	r3, #1
 800a106:	4a06      	ldr	r2, [pc, #24]	; (800a120 <vPortFree+0xc0>)
 800a108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a10a:	f7fe fc85 	bl	8008a18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a10e:	bf00      	nop
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	2000d420 	.word	0x2000d420
 800a11c:	2000d410 	.word	0x2000d410
 800a120:	2000d41c 	.word	0x2000d41c

0800a124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a12a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a12e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a130:	4b27      	ldr	r3, [pc, #156]	; (800a1d0 <prvHeapInit+0xac>)
 800a132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00c      	beq.n	800a158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3307      	adds	r3, #7
 800a142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f023 0307 	bic.w	r3, r3, #7
 800a14a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	4a1f      	ldr	r2, [pc, #124]	; (800a1d0 <prvHeapInit+0xac>)
 800a154:	4413      	add	r3, r2
 800a156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a15c:	4a1d      	ldr	r2, [pc, #116]	; (800a1d4 <prvHeapInit+0xb0>)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a162:	4b1c      	ldr	r3, [pc, #112]	; (800a1d4 <prvHeapInit+0xb0>)
 800a164:	2200      	movs	r2, #0
 800a166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	4413      	add	r3, r2
 800a16e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a170:	2208      	movs	r2, #8
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	1a9b      	subs	r3, r3, r2
 800a176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f023 0307 	bic.w	r3, r3, #7
 800a17e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4a15      	ldr	r2, [pc, #84]	; (800a1d8 <prvHeapInit+0xb4>)
 800a184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a186:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <prvHeapInit+0xb4>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2200      	movs	r2, #0
 800a18c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a18e:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <prvHeapInit+0xb4>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	1ad2      	subs	r2, r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1a4:	4b0c      	ldr	r3, [pc, #48]	; (800a1d8 <prvHeapInit+0xb4>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	4a0a      	ldr	r2, [pc, #40]	; (800a1dc <prvHeapInit+0xb8>)
 800a1b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	4a09      	ldr	r2, [pc, #36]	; (800a1e0 <prvHeapInit+0xbc>)
 800a1ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1bc:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <prvHeapInit+0xc0>)
 800a1be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1c2:	601a      	str	r2, [r3, #0]
}
 800a1c4:	bf00      	nop
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	200010b4 	.word	0x200010b4
 800a1d4:	2000d404 	.word	0x2000d404
 800a1d8:	2000d40c 	.word	0x2000d40c
 800a1dc:	2000d414 	.word	0x2000d414
 800a1e0:	2000d410 	.word	0x2000d410
 800a1e4:	2000d420 	.word	0x2000d420

0800a1e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1f0:	4b28      	ldr	r3, [pc, #160]	; (800a294 <prvInsertBlockIntoFreeList+0xac>)
 800a1f2:	60fb      	str	r3, [r7, #12]
 800a1f4:	e002      	b.n	800a1fc <prvInsertBlockIntoFreeList+0x14>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	60fb      	str	r3, [r7, #12]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d8f7      	bhi.n	800a1f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	4413      	add	r3, r2
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	429a      	cmp	r2, r3
 800a216:	d108      	bne.n	800a22a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	441a      	add	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	441a      	add	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d118      	bne.n	800a270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4b15      	ldr	r3, [pc, #84]	; (800a298 <prvInsertBlockIntoFreeList+0xb0>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d00d      	beq.n	800a266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	441a      	add	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	e008      	b.n	800a278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a266:	4b0c      	ldr	r3, [pc, #48]	; (800a298 <prvInsertBlockIntoFreeList+0xb0>)
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	e003      	b.n	800a278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d002      	beq.n	800a286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a286:	bf00      	nop
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	2000d404 	.word	0x2000d404
 800a298:	2000d40c 	.word	0x2000d40c

0800a29c <std>:
 800a29c:	2300      	movs	r3, #0
 800a29e:	b510      	push	{r4, lr}
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a2a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2aa:	6083      	str	r3, [r0, #8]
 800a2ac:	8181      	strh	r1, [r0, #12]
 800a2ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a2b0:	81c2      	strh	r2, [r0, #14]
 800a2b2:	6183      	str	r3, [r0, #24]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	2208      	movs	r2, #8
 800a2b8:	305c      	adds	r0, #92	; 0x5c
 800a2ba:	f000 f8f4 	bl	800a4a6 <memset>
 800a2be:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <std+0x38>)
 800a2c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a2c2:	4b05      	ldr	r3, [pc, #20]	; (800a2d8 <std+0x3c>)
 800a2c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <std+0x40>)
 800a2c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2ca:	4b05      	ldr	r3, [pc, #20]	; (800a2e0 <std+0x44>)
 800a2cc:	6224      	str	r4, [r4, #32]
 800a2ce:	6323      	str	r3, [r4, #48]	; 0x30
 800a2d0:	bd10      	pop	{r4, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0800a421 	.word	0x0800a421
 800a2d8:	0800a443 	.word	0x0800a443
 800a2dc:	0800a47b 	.word	0x0800a47b
 800a2e0:	0800a49f 	.word	0x0800a49f

0800a2e4 <stdio_exit_handler>:
 800a2e4:	4a02      	ldr	r2, [pc, #8]	; (800a2f0 <stdio_exit_handler+0xc>)
 800a2e6:	4903      	ldr	r1, [pc, #12]	; (800a2f4 <stdio_exit_handler+0x10>)
 800a2e8:	4803      	ldr	r0, [pc, #12]	; (800a2f8 <stdio_exit_handler+0x14>)
 800a2ea:	f000 b869 	b.w	800a3c0 <_fwalk_sglue>
 800a2ee:	bf00      	nop
 800a2f0:	20000018 	.word	0x20000018
 800a2f4:	0800af09 	.word	0x0800af09
 800a2f8:	20000024 	.word	0x20000024

0800a2fc <cleanup_stdio>:
 800a2fc:	6841      	ldr	r1, [r0, #4]
 800a2fe:	4b0c      	ldr	r3, [pc, #48]	; (800a330 <cleanup_stdio+0x34>)
 800a300:	4299      	cmp	r1, r3
 800a302:	b510      	push	{r4, lr}
 800a304:	4604      	mov	r4, r0
 800a306:	d001      	beq.n	800a30c <cleanup_stdio+0x10>
 800a308:	f000 fdfe 	bl	800af08 <_fflush_r>
 800a30c:	68a1      	ldr	r1, [r4, #8]
 800a30e:	4b09      	ldr	r3, [pc, #36]	; (800a334 <cleanup_stdio+0x38>)
 800a310:	4299      	cmp	r1, r3
 800a312:	d002      	beq.n	800a31a <cleanup_stdio+0x1e>
 800a314:	4620      	mov	r0, r4
 800a316:	f000 fdf7 	bl	800af08 <_fflush_r>
 800a31a:	68e1      	ldr	r1, [r4, #12]
 800a31c:	4b06      	ldr	r3, [pc, #24]	; (800a338 <cleanup_stdio+0x3c>)
 800a31e:	4299      	cmp	r1, r3
 800a320:	d004      	beq.n	800a32c <cleanup_stdio+0x30>
 800a322:	4620      	mov	r0, r4
 800a324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a328:	f000 bdee 	b.w	800af08 <_fflush_r>
 800a32c:	bd10      	pop	{r4, pc}
 800a32e:	bf00      	nop
 800a330:	2000d424 	.word	0x2000d424
 800a334:	2000d48c 	.word	0x2000d48c
 800a338:	2000d4f4 	.word	0x2000d4f4

0800a33c <global_stdio_init.part.0>:
 800a33c:	b510      	push	{r4, lr}
 800a33e:	4b0b      	ldr	r3, [pc, #44]	; (800a36c <global_stdio_init.part.0+0x30>)
 800a340:	4c0b      	ldr	r4, [pc, #44]	; (800a370 <global_stdio_init.part.0+0x34>)
 800a342:	4a0c      	ldr	r2, [pc, #48]	; (800a374 <global_stdio_init.part.0+0x38>)
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	4620      	mov	r0, r4
 800a348:	2200      	movs	r2, #0
 800a34a:	2104      	movs	r1, #4
 800a34c:	f7ff ffa6 	bl	800a29c <std>
 800a350:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a354:	2201      	movs	r2, #1
 800a356:	2109      	movs	r1, #9
 800a358:	f7ff ffa0 	bl	800a29c <std>
 800a35c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a360:	2202      	movs	r2, #2
 800a362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a366:	2112      	movs	r1, #18
 800a368:	f7ff bf98 	b.w	800a29c <std>
 800a36c:	2000d55c 	.word	0x2000d55c
 800a370:	2000d424 	.word	0x2000d424
 800a374:	0800a2e5 	.word	0x0800a2e5

0800a378 <__sfp_lock_acquire>:
 800a378:	4801      	ldr	r0, [pc, #4]	; (800a380 <__sfp_lock_acquire+0x8>)
 800a37a:	f000 b963 	b.w	800a644 <__retarget_lock_acquire_recursive>
 800a37e:	bf00      	nop
 800a380:	2000d565 	.word	0x2000d565

0800a384 <__sfp_lock_release>:
 800a384:	4801      	ldr	r0, [pc, #4]	; (800a38c <__sfp_lock_release+0x8>)
 800a386:	f000 b95e 	b.w	800a646 <__retarget_lock_release_recursive>
 800a38a:	bf00      	nop
 800a38c:	2000d565 	.word	0x2000d565

0800a390 <__sinit>:
 800a390:	b510      	push	{r4, lr}
 800a392:	4604      	mov	r4, r0
 800a394:	f7ff fff0 	bl	800a378 <__sfp_lock_acquire>
 800a398:	6a23      	ldr	r3, [r4, #32]
 800a39a:	b11b      	cbz	r3, 800a3a4 <__sinit+0x14>
 800a39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a0:	f7ff bff0 	b.w	800a384 <__sfp_lock_release>
 800a3a4:	4b04      	ldr	r3, [pc, #16]	; (800a3b8 <__sinit+0x28>)
 800a3a6:	6223      	str	r3, [r4, #32]
 800a3a8:	4b04      	ldr	r3, [pc, #16]	; (800a3bc <__sinit+0x2c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1f5      	bne.n	800a39c <__sinit+0xc>
 800a3b0:	f7ff ffc4 	bl	800a33c <global_stdio_init.part.0>
 800a3b4:	e7f2      	b.n	800a39c <__sinit+0xc>
 800a3b6:	bf00      	nop
 800a3b8:	0800a2fd 	.word	0x0800a2fd
 800a3bc:	2000d55c 	.word	0x2000d55c

0800a3c0 <_fwalk_sglue>:
 800a3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	4688      	mov	r8, r1
 800a3c8:	4614      	mov	r4, r2
 800a3ca:	2600      	movs	r6, #0
 800a3cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3d0:	f1b9 0901 	subs.w	r9, r9, #1
 800a3d4:	d505      	bpl.n	800a3e2 <_fwalk_sglue+0x22>
 800a3d6:	6824      	ldr	r4, [r4, #0]
 800a3d8:	2c00      	cmp	r4, #0
 800a3da:	d1f7      	bne.n	800a3cc <_fwalk_sglue+0xc>
 800a3dc:	4630      	mov	r0, r6
 800a3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e2:	89ab      	ldrh	r3, [r5, #12]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d907      	bls.n	800a3f8 <_fwalk_sglue+0x38>
 800a3e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	d003      	beq.n	800a3f8 <_fwalk_sglue+0x38>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	47c0      	blx	r8
 800a3f6:	4306      	orrs	r6, r0
 800a3f8:	3568      	adds	r5, #104	; 0x68
 800a3fa:	e7e9      	b.n	800a3d0 <_fwalk_sglue+0x10>

0800a3fc <iprintf>:
 800a3fc:	b40f      	push	{r0, r1, r2, r3}
 800a3fe:	b507      	push	{r0, r1, r2, lr}
 800a400:	4906      	ldr	r1, [pc, #24]	; (800a41c <iprintf+0x20>)
 800a402:	ab04      	add	r3, sp, #16
 800a404:	6808      	ldr	r0, [r1, #0]
 800a406:	f853 2b04 	ldr.w	r2, [r3], #4
 800a40a:	6881      	ldr	r1, [r0, #8]
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	f000 fa4b 	bl	800a8a8 <_vfiprintf_r>
 800a412:	b003      	add	sp, #12
 800a414:	f85d eb04 	ldr.w	lr, [sp], #4
 800a418:	b004      	add	sp, #16
 800a41a:	4770      	bx	lr
 800a41c:	20000070 	.word	0x20000070

0800a420 <__sread>:
 800a420:	b510      	push	{r4, lr}
 800a422:	460c      	mov	r4, r1
 800a424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a428:	f000 f8be 	bl	800a5a8 <_read_r>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	bfab      	itete	ge
 800a430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a432:	89a3      	ldrhlt	r3, [r4, #12]
 800a434:	181b      	addge	r3, r3, r0
 800a436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a43a:	bfac      	ite	ge
 800a43c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a43e:	81a3      	strhlt	r3, [r4, #12]
 800a440:	bd10      	pop	{r4, pc}

0800a442 <__swrite>:
 800a442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a446:	461f      	mov	r7, r3
 800a448:	898b      	ldrh	r3, [r1, #12]
 800a44a:	05db      	lsls	r3, r3, #23
 800a44c:	4605      	mov	r5, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	4616      	mov	r6, r2
 800a452:	d505      	bpl.n	800a460 <__swrite+0x1e>
 800a454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a458:	2302      	movs	r3, #2
 800a45a:	2200      	movs	r2, #0
 800a45c:	f000 f892 	bl	800a584 <_lseek_r>
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a46a:	81a3      	strh	r3, [r4, #12]
 800a46c:	4632      	mov	r2, r6
 800a46e:	463b      	mov	r3, r7
 800a470:	4628      	mov	r0, r5
 800a472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a476:	f000 b8a9 	b.w	800a5cc <_write_r>

0800a47a <__sseek>:
 800a47a:	b510      	push	{r4, lr}
 800a47c:	460c      	mov	r4, r1
 800a47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a482:	f000 f87f 	bl	800a584 <_lseek_r>
 800a486:	1c43      	adds	r3, r0, #1
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	bf15      	itete	ne
 800a48c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a48e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a496:	81a3      	strheq	r3, [r4, #12]
 800a498:	bf18      	it	ne
 800a49a:	81a3      	strhne	r3, [r4, #12]
 800a49c:	bd10      	pop	{r4, pc}

0800a49e <__sclose>:
 800a49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a2:	f000 b809 	b.w	800a4b8 <_close_r>

0800a4a6 <memset>:
 800a4a6:	4402      	add	r2, r0
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d100      	bne.n	800a4b0 <memset+0xa>
 800a4ae:	4770      	bx	lr
 800a4b0:	f803 1b01 	strb.w	r1, [r3], #1
 800a4b4:	e7f9      	b.n	800a4aa <memset+0x4>
	...

0800a4b8 <_close_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d06      	ldr	r5, [pc, #24]	; (800a4d4 <_close_r+0x1c>)
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4604      	mov	r4, r0
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	602b      	str	r3, [r5, #0]
 800a4c4:	f7f7 fecb 	bl	800225e <_close>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	d102      	bne.n	800a4d2 <_close_r+0x1a>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	b103      	cbz	r3, 800a4d2 <_close_r+0x1a>
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	2000d560 	.word	0x2000d560

0800a4d8 <_reclaim_reent>:
 800a4d8:	4b29      	ldr	r3, [pc, #164]	; (800a580 <_reclaim_reent+0xa8>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4283      	cmp	r3, r0
 800a4de:	b570      	push	{r4, r5, r6, lr}
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	d04b      	beq.n	800a57c <_reclaim_reent+0xa4>
 800a4e4:	69c3      	ldr	r3, [r0, #28]
 800a4e6:	b143      	cbz	r3, 800a4fa <_reclaim_reent+0x22>
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d144      	bne.n	800a578 <_reclaim_reent+0xa0>
 800a4ee:	69e3      	ldr	r3, [r4, #28]
 800a4f0:	6819      	ldr	r1, [r3, #0]
 800a4f2:	b111      	cbz	r1, 800a4fa <_reclaim_reent+0x22>
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f000 f8b5 	bl	800a664 <_free_r>
 800a4fa:	6961      	ldr	r1, [r4, #20]
 800a4fc:	b111      	cbz	r1, 800a504 <_reclaim_reent+0x2c>
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 f8b0 	bl	800a664 <_free_r>
 800a504:	69e1      	ldr	r1, [r4, #28]
 800a506:	b111      	cbz	r1, 800a50e <_reclaim_reent+0x36>
 800a508:	4620      	mov	r0, r4
 800a50a:	f000 f8ab 	bl	800a664 <_free_r>
 800a50e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a510:	b111      	cbz	r1, 800a518 <_reclaim_reent+0x40>
 800a512:	4620      	mov	r0, r4
 800a514:	f000 f8a6 	bl	800a664 <_free_r>
 800a518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a51a:	b111      	cbz	r1, 800a522 <_reclaim_reent+0x4a>
 800a51c:	4620      	mov	r0, r4
 800a51e:	f000 f8a1 	bl	800a664 <_free_r>
 800a522:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a524:	b111      	cbz	r1, 800a52c <_reclaim_reent+0x54>
 800a526:	4620      	mov	r0, r4
 800a528:	f000 f89c 	bl	800a664 <_free_r>
 800a52c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a52e:	b111      	cbz	r1, 800a536 <_reclaim_reent+0x5e>
 800a530:	4620      	mov	r0, r4
 800a532:	f000 f897 	bl	800a664 <_free_r>
 800a536:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a538:	b111      	cbz	r1, 800a540 <_reclaim_reent+0x68>
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 f892 	bl	800a664 <_free_r>
 800a540:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a542:	b111      	cbz	r1, 800a54a <_reclaim_reent+0x72>
 800a544:	4620      	mov	r0, r4
 800a546:	f000 f88d 	bl	800a664 <_free_r>
 800a54a:	6a23      	ldr	r3, [r4, #32]
 800a54c:	b1b3      	cbz	r3, 800a57c <_reclaim_reent+0xa4>
 800a54e:	4620      	mov	r0, r4
 800a550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a554:	4718      	bx	r3
 800a556:	5949      	ldr	r1, [r1, r5]
 800a558:	b941      	cbnz	r1, 800a56c <_reclaim_reent+0x94>
 800a55a:	3504      	adds	r5, #4
 800a55c:	69e3      	ldr	r3, [r4, #28]
 800a55e:	2d80      	cmp	r5, #128	; 0x80
 800a560:	68d9      	ldr	r1, [r3, #12]
 800a562:	d1f8      	bne.n	800a556 <_reclaim_reent+0x7e>
 800a564:	4620      	mov	r0, r4
 800a566:	f000 f87d 	bl	800a664 <_free_r>
 800a56a:	e7c0      	b.n	800a4ee <_reclaim_reent+0x16>
 800a56c:	680e      	ldr	r6, [r1, #0]
 800a56e:	4620      	mov	r0, r4
 800a570:	f000 f878 	bl	800a664 <_free_r>
 800a574:	4631      	mov	r1, r6
 800a576:	e7ef      	b.n	800a558 <_reclaim_reent+0x80>
 800a578:	2500      	movs	r5, #0
 800a57a:	e7ef      	b.n	800a55c <_reclaim_reent+0x84>
 800a57c:	bd70      	pop	{r4, r5, r6, pc}
 800a57e:	bf00      	nop
 800a580:	20000070 	.word	0x20000070

0800a584 <_lseek_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	; (800a5a4 <_lseek_r+0x20>)
 800a588:	4604      	mov	r4, r0
 800a58a:	4608      	mov	r0, r1
 800a58c:	4611      	mov	r1, r2
 800a58e:	2200      	movs	r2, #0
 800a590:	602a      	str	r2, [r5, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	f7f7 fe8a 	bl	80022ac <_lseek>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_lseek_r+0x1e>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_lseek_r+0x1e>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	2000d560 	.word	0x2000d560

0800a5a8 <_read_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	; (800a5c8 <_read_r+0x20>)
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	602a      	str	r2, [r5, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f7f7 fe18 	bl	80021ec <_read>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d102      	bne.n	800a5c6 <_read_r+0x1e>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	b103      	cbz	r3, 800a5c6 <_read_r+0x1e>
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	2000d560 	.word	0x2000d560

0800a5cc <_write_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4d07      	ldr	r5, [pc, #28]	; (800a5ec <_write_r+0x20>)
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	4608      	mov	r0, r1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	602a      	str	r2, [r5, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	f7f7 fe23 	bl	8002226 <_write>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_write_r+0x1e>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_write_r+0x1e>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	2000d560 	.word	0x2000d560

0800a5f0 <__errno>:
 800a5f0:	4b01      	ldr	r3, [pc, #4]	; (800a5f8 <__errno+0x8>)
 800a5f2:	6818      	ldr	r0, [r3, #0]
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	20000070 	.word	0x20000070

0800a5fc <__libc_init_array>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	4d0d      	ldr	r5, [pc, #52]	; (800a634 <__libc_init_array+0x38>)
 800a600:	4c0d      	ldr	r4, [pc, #52]	; (800a638 <__libc_init_array+0x3c>)
 800a602:	1b64      	subs	r4, r4, r5
 800a604:	10a4      	asrs	r4, r4, #2
 800a606:	2600      	movs	r6, #0
 800a608:	42a6      	cmp	r6, r4
 800a60a:	d109      	bne.n	800a620 <__libc_init_array+0x24>
 800a60c:	4d0b      	ldr	r5, [pc, #44]	; (800a63c <__libc_init_array+0x40>)
 800a60e:	4c0c      	ldr	r4, [pc, #48]	; (800a640 <__libc_init_array+0x44>)
 800a610:	f000 fe06 	bl	800b220 <_init>
 800a614:	1b64      	subs	r4, r4, r5
 800a616:	10a4      	asrs	r4, r4, #2
 800a618:	2600      	movs	r6, #0
 800a61a:	42a6      	cmp	r6, r4
 800a61c:	d105      	bne.n	800a62a <__libc_init_array+0x2e>
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
 800a620:	f855 3b04 	ldr.w	r3, [r5], #4
 800a624:	4798      	blx	r3
 800a626:	3601      	adds	r6, #1
 800a628:	e7ee      	b.n	800a608 <__libc_init_array+0xc>
 800a62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62e:	4798      	blx	r3
 800a630:	3601      	adds	r6, #1
 800a632:	e7f2      	b.n	800a61a <__libc_init_array+0x1e>
 800a634:	0800b438 	.word	0x0800b438
 800a638:	0800b438 	.word	0x0800b438
 800a63c:	0800b438 	.word	0x0800b438
 800a640:	0800b43c 	.word	0x0800b43c

0800a644 <__retarget_lock_acquire_recursive>:
 800a644:	4770      	bx	lr

0800a646 <__retarget_lock_release_recursive>:
 800a646:	4770      	bx	lr

0800a648 <memcpy>:
 800a648:	440a      	add	r2, r1
 800a64a:	4291      	cmp	r1, r2
 800a64c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a650:	d100      	bne.n	800a654 <memcpy+0xc>
 800a652:	4770      	bx	lr
 800a654:	b510      	push	{r4, lr}
 800a656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a65a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a65e:	4291      	cmp	r1, r2
 800a660:	d1f9      	bne.n	800a656 <memcpy+0xe>
 800a662:	bd10      	pop	{r4, pc}

0800a664 <_free_r>:
 800a664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a666:	2900      	cmp	r1, #0
 800a668:	d044      	beq.n	800a6f4 <_free_r+0x90>
 800a66a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a66e:	9001      	str	r0, [sp, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	f1a1 0404 	sub.w	r4, r1, #4
 800a676:	bfb8      	it	lt
 800a678:	18e4      	addlt	r4, r4, r3
 800a67a:	f000 f8df 	bl	800a83c <__malloc_lock>
 800a67e:	4a1e      	ldr	r2, [pc, #120]	; (800a6f8 <_free_r+0x94>)
 800a680:	9801      	ldr	r0, [sp, #4]
 800a682:	6813      	ldr	r3, [r2, #0]
 800a684:	b933      	cbnz	r3, 800a694 <_free_r+0x30>
 800a686:	6063      	str	r3, [r4, #4]
 800a688:	6014      	str	r4, [r2, #0]
 800a68a:	b003      	add	sp, #12
 800a68c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a690:	f000 b8da 	b.w	800a848 <__malloc_unlock>
 800a694:	42a3      	cmp	r3, r4
 800a696:	d908      	bls.n	800a6aa <_free_r+0x46>
 800a698:	6825      	ldr	r5, [r4, #0]
 800a69a:	1961      	adds	r1, r4, r5
 800a69c:	428b      	cmp	r3, r1
 800a69e:	bf01      	itttt	eq
 800a6a0:	6819      	ldreq	r1, [r3, #0]
 800a6a2:	685b      	ldreq	r3, [r3, #4]
 800a6a4:	1949      	addeq	r1, r1, r5
 800a6a6:	6021      	streq	r1, [r4, #0]
 800a6a8:	e7ed      	b.n	800a686 <_free_r+0x22>
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	b10b      	cbz	r3, 800a6b4 <_free_r+0x50>
 800a6b0:	42a3      	cmp	r3, r4
 800a6b2:	d9fa      	bls.n	800a6aa <_free_r+0x46>
 800a6b4:	6811      	ldr	r1, [r2, #0]
 800a6b6:	1855      	adds	r5, r2, r1
 800a6b8:	42a5      	cmp	r5, r4
 800a6ba:	d10b      	bne.n	800a6d4 <_free_r+0x70>
 800a6bc:	6824      	ldr	r4, [r4, #0]
 800a6be:	4421      	add	r1, r4
 800a6c0:	1854      	adds	r4, r2, r1
 800a6c2:	42a3      	cmp	r3, r4
 800a6c4:	6011      	str	r1, [r2, #0]
 800a6c6:	d1e0      	bne.n	800a68a <_free_r+0x26>
 800a6c8:	681c      	ldr	r4, [r3, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	6053      	str	r3, [r2, #4]
 800a6ce:	440c      	add	r4, r1
 800a6d0:	6014      	str	r4, [r2, #0]
 800a6d2:	e7da      	b.n	800a68a <_free_r+0x26>
 800a6d4:	d902      	bls.n	800a6dc <_free_r+0x78>
 800a6d6:	230c      	movs	r3, #12
 800a6d8:	6003      	str	r3, [r0, #0]
 800a6da:	e7d6      	b.n	800a68a <_free_r+0x26>
 800a6dc:	6825      	ldr	r5, [r4, #0]
 800a6de:	1961      	adds	r1, r4, r5
 800a6e0:	428b      	cmp	r3, r1
 800a6e2:	bf04      	itt	eq
 800a6e4:	6819      	ldreq	r1, [r3, #0]
 800a6e6:	685b      	ldreq	r3, [r3, #4]
 800a6e8:	6063      	str	r3, [r4, #4]
 800a6ea:	bf04      	itt	eq
 800a6ec:	1949      	addeq	r1, r1, r5
 800a6ee:	6021      	streq	r1, [r4, #0]
 800a6f0:	6054      	str	r4, [r2, #4]
 800a6f2:	e7ca      	b.n	800a68a <_free_r+0x26>
 800a6f4:	b003      	add	sp, #12
 800a6f6:	bd30      	pop	{r4, r5, pc}
 800a6f8:	2000d568 	.word	0x2000d568

0800a6fc <sbrk_aligned>:
 800a6fc:	b570      	push	{r4, r5, r6, lr}
 800a6fe:	4e0e      	ldr	r6, [pc, #56]	; (800a738 <sbrk_aligned+0x3c>)
 800a700:	460c      	mov	r4, r1
 800a702:	6831      	ldr	r1, [r6, #0]
 800a704:	4605      	mov	r5, r0
 800a706:	b911      	cbnz	r1, 800a70e <sbrk_aligned+0x12>
 800a708:	f000 fcbc 	bl	800b084 <_sbrk_r>
 800a70c:	6030      	str	r0, [r6, #0]
 800a70e:	4621      	mov	r1, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f000 fcb7 	bl	800b084 <_sbrk_r>
 800a716:	1c43      	adds	r3, r0, #1
 800a718:	d00a      	beq.n	800a730 <sbrk_aligned+0x34>
 800a71a:	1cc4      	adds	r4, r0, #3
 800a71c:	f024 0403 	bic.w	r4, r4, #3
 800a720:	42a0      	cmp	r0, r4
 800a722:	d007      	beq.n	800a734 <sbrk_aligned+0x38>
 800a724:	1a21      	subs	r1, r4, r0
 800a726:	4628      	mov	r0, r5
 800a728:	f000 fcac 	bl	800b084 <_sbrk_r>
 800a72c:	3001      	adds	r0, #1
 800a72e:	d101      	bne.n	800a734 <sbrk_aligned+0x38>
 800a730:	f04f 34ff 	mov.w	r4, #4294967295
 800a734:	4620      	mov	r0, r4
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	2000d56c 	.word	0x2000d56c

0800a73c <_malloc_r>:
 800a73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a740:	1ccd      	adds	r5, r1, #3
 800a742:	f025 0503 	bic.w	r5, r5, #3
 800a746:	3508      	adds	r5, #8
 800a748:	2d0c      	cmp	r5, #12
 800a74a:	bf38      	it	cc
 800a74c:	250c      	movcc	r5, #12
 800a74e:	2d00      	cmp	r5, #0
 800a750:	4607      	mov	r7, r0
 800a752:	db01      	blt.n	800a758 <_malloc_r+0x1c>
 800a754:	42a9      	cmp	r1, r5
 800a756:	d905      	bls.n	800a764 <_malloc_r+0x28>
 800a758:	230c      	movs	r3, #12
 800a75a:	603b      	str	r3, [r7, #0]
 800a75c:	2600      	movs	r6, #0
 800a75e:	4630      	mov	r0, r6
 800a760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a764:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a838 <_malloc_r+0xfc>
 800a768:	f000 f868 	bl	800a83c <__malloc_lock>
 800a76c:	f8d8 3000 	ldr.w	r3, [r8]
 800a770:	461c      	mov	r4, r3
 800a772:	bb5c      	cbnz	r4, 800a7cc <_malloc_r+0x90>
 800a774:	4629      	mov	r1, r5
 800a776:	4638      	mov	r0, r7
 800a778:	f7ff ffc0 	bl	800a6fc <sbrk_aligned>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	4604      	mov	r4, r0
 800a780:	d155      	bne.n	800a82e <_malloc_r+0xf2>
 800a782:	f8d8 4000 	ldr.w	r4, [r8]
 800a786:	4626      	mov	r6, r4
 800a788:	2e00      	cmp	r6, #0
 800a78a:	d145      	bne.n	800a818 <_malloc_r+0xdc>
 800a78c:	2c00      	cmp	r4, #0
 800a78e:	d048      	beq.n	800a822 <_malloc_r+0xe6>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	4631      	mov	r1, r6
 800a794:	4638      	mov	r0, r7
 800a796:	eb04 0903 	add.w	r9, r4, r3
 800a79a:	f000 fc73 	bl	800b084 <_sbrk_r>
 800a79e:	4581      	cmp	r9, r0
 800a7a0:	d13f      	bne.n	800a822 <_malloc_r+0xe6>
 800a7a2:	6821      	ldr	r1, [r4, #0]
 800a7a4:	1a6d      	subs	r5, r5, r1
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	f7ff ffa7 	bl	800a6fc <sbrk_aligned>
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d037      	beq.n	800a822 <_malloc_r+0xe6>
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	442b      	add	r3, r5
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d038      	beq.n	800a832 <_malloc_r+0xf6>
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	42a2      	cmp	r2, r4
 800a7c4:	d12b      	bne.n	800a81e <_malloc_r+0xe2>
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	605a      	str	r2, [r3, #4]
 800a7ca:	e00f      	b.n	800a7ec <_malloc_r+0xb0>
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	1b52      	subs	r2, r2, r5
 800a7d0:	d41f      	bmi.n	800a812 <_malloc_r+0xd6>
 800a7d2:	2a0b      	cmp	r2, #11
 800a7d4:	d917      	bls.n	800a806 <_malloc_r+0xca>
 800a7d6:	1961      	adds	r1, r4, r5
 800a7d8:	42a3      	cmp	r3, r4
 800a7da:	6025      	str	r5, [r4, #0]
 800a7dc:	bf18      	it	ne
 800a7de:	6059      	strne	r1, [r3, #4]
 800a7e0:	6863      	ldr	r3, [r4, #4]
 800a7e2:	bf08      	it	eq
 800a7e4:	f8c8 1000 	streq.w	r1, [r8]
 800a7e8:	5162      	str	r2, [r4, r5]
 800a7ea:	604b      	str	r3, [r1, #4]
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	f104 060b 	add.w	r6, r4, #11
 800a7f2:	f000 f829 	bl	800a848 <__malloc_unlock>
 800a7f6:	f026 0607 	bic.w	r6, r6, #7
 800a7fa:	1d23      	adds	r3, r4, #4
 800a7fc:	1af2      	subs	r2, r6, r3
 800a7fe:	d0ae      	beq.n	800a75e <_malloc_r+0x22>
 800a800:	1b9b      	subs	r3, r3, r6
 800a802:	50a3      	str	r3, [r4, r2]
 800a804:	e7ab      	b.n	800a75e <_malloc_r+0x22>
 800a806:	42a3      	cmp	r3, r4
 800a808:	6862      	ldr	r2, [r4, #4]
 800a80a:	d1dd      	bne.n	800a7c8 <_malloc_r+0x8c>
 800a80c:	f8c8 2000 	str.w	r2, [r8]
 800a810:	e7ec      	b.n	800a7ec <_malloc_r+0xb0>
 800a812:	4623      	mov	r3, r4
 800a814:	6864      	ldr	r4, [r4, #4]
 800a816:	e7ac      	b.n	800a772 <_malloc_r+0x36>
 800a818:	4634      	mov	r4, r6
 800a81a:	6876      	ldr	r6, [r6, #4]
 800a81c:	e7b4      	b.n	800a788 <_malloc_r+0x4c>
 800a81e:	4613      	mov	r3, r2
 800a820:	e7cc      	b.n	800a7bc <_malloc_r+0x80>
 800a822:	230c      	movs	r3, #12
 800a824:	603b      	str	r3, [r7, #0]
 800a826:	4638      	mov	r0, r7
 800a828:	f000 f80e 	bl	800a848 <__malloc_unlock>
 800a82c:	e797      	b.n	800a75e <_malloc_r+0x22>
 800a82e:	6025      	str	r5, [r4, #0]
 800a830:	e7dc      	b.n	800a7ec <_malloc_r+0xb0>
 800a832:	605b      	str	r3, [r3, #4]
 800a834:	deff      	udf	#255	; 0xff
 800a836:	bf00      	nop
 800a838:	2000d568 	.word	0x2000d568

0800a83c <__malloc_lock>:
 800a83c:	4801      	ldr	r0, [pc, #4]	; (800a844 <__malloc_lock+0x8>)
 800a83e:	f7ff bf01 	b.w	800a644 <__retarget_lock_acquire_recursive>
 800a842:	bf00      	nop
 800a844:	2000d564 	.word	0x2000d564

0800a848 <__malloc_unlock>:
 800a848:	4801      	ldr	r0, [pc, #4]	; (800a850 <__malloc_unlock+0x8>)
 800a84a:	f7ff befc 	b.w	800a646 <__retarget_lock_release_recursive>
 800a84e:	bf00      	nop
 800a850:	2000d564 	.word	0x2000d564

0800a854 <__sfputc_r>:
 800a854:	6893      	ldr	r3, [r2, #8]
 800a856:	3b01      	subs	r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	b410      	push	{r4}
 800a85c:	6093      	str	r3, [r2, #8]
 800a85e:	da08      	bge.n	800a872 <__sfputc_r+0x1e>
 800a860:	6994      	ldr	r4, [r2, #24]
 800a862:	42a3      	cmp	r3, r4
 800a864:	db01      	blt.n	800a86a <__sfputc_r+0x16>
 800a866:	290a      	cmp	r1, #10
 800a868:	d103      	bne.n	800a872 <__sfputc_r+0x1e>
 800a86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a86e:	f000 bb73 	b.w	800af58 <__swbuf_r>
 800a872:	6813      	ldr	r3, [r2, #0]
 800a874:	1c58      	adds	r0, r3, #1
 800a876:	6010      	str	r0, [r2, #0]
 800a878:	7019      	strb	r1, [r3, #0]
 800a87a:	4608      	mov	r0, r1
 800a87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <__sfputs_r>:
 800a882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a884:	4606      	mov	r6, r0
 800a886:	460f      	mov	r7, r1
 800a888:	4614      	mov	r4, r2
 800a88a:	18d5      	adds	r5, r2, r3
 800a88c:	42ac      	cmp	r4, r5
 800a88e:	d101      	bne.n	800a894 <__sfputs_r+0x12>
 800a890:	2000      	movs	r0, #0
 800a892:	e007      	b.n	800a8a4 <__sfputs_r+0x22>
 800a894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a898:	463a      	mov	r2, r7
 800a89a:	4630      	mov	r0, r6
 800a89c:	f7ff ffda 	bl	800a854 <__sfputc_r>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	d1f3      	bne.n	800a88c <__sfputs_r+0xa>
 800a8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8a8 <_vfiprintf_r>:
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	460d      	mov	r5, r1
 800a8ae:	b09d      	sub	sp, #116	; 0x74
 800a8b0:	4614      	mov	r4, r2
 800a8b2:	4698      	mov	r8, r3
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	b118      	cbz	r0, 800a8c0 <_vfiprintf_r+0x18>
 800a8b8:	6a03      	ldr	r3, [r0, #32]
 800a8ba:	b90b      	cbnz	r3, 800a8c0 <_vfiprintf_r+0x18>
 800a8bc:	f7ff fd68 	bl	800a390 <__sinit>
 800a8c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c2:	07d9      	lsls	r1, r3, #31
 800a8c4:	d405      	bmi.n	800a8d2 <_vfiprintf_r+0x2a>
 800a8c6:	89ab      	ldrh	r3, [r5, #12]
 800a8c8:	059a      	lsls	r2, r3, #22
 800a8ca:	d402      	bmi.n	800a8d2 <_vfiprintf_r+0x2a>
 800a8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ce:	f7ff feb9 	bl	800a644 <__retarget_lock_acquire_recursive>
 800a8d2:	89ab      	ldrh	r3, [r5, #12]
 800a8d4:	071b      	lsls	r3, r3, #28
 800a8d6:	d501      	bpl.n	800a8dc <_vfiprintf_r+0x34>
 800a8d8:	692b      	ldr	r3, [r5, #16]
 800a8da:	b99b      	cbnz	r3, 800a904 <_vfiprintf_r+0x5c>
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f000 fb78 	bl	800afd4 <__swsetup_r>
 800a8e4:	b170      	cbz	r0, 800a904 <_vfiprintf_r+0x5c>
 800a8e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e8:	07dc      	lsls	r4, r3, #31
 800a8ea:	d504      	bpl.n	800a8f6 <_vfiprintf_r+0x4e>
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f0:	b01d      	add	sp, #116	; 0x74
 800a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f6:	89ab      	ldrh	r3, [r5, #12]
 800a8f8:	0598      	lsls	r0, r3, #22
 800a8fa:	d4f7      	bmi.n	800a8ec <_vfiprintf_r+0x44>
 800a8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8fe:	f7ff fea2 	bl	800a646 <__retarget_lock_release_recursive>
 800a902:	e7f3      	b.n	800a8ec <_vfiprintf_r+0x44>
 800a904:	2300      	movs	r3, #0
 800a906:	9309      	str	r3, [sp, #36]	; 0x24
 800a908:	2320      	movs	r3, #32
 800a90a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a90e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a912:	2330      	movs	r3, #48	; 0x30
 800a914:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aac8 <_vfiprintf_r+0x220>
 800a918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a91c:	f04f 0901 	mov.w	r9, #1
 800a920:	4623      	mov	r3, r4
 800a922:	469a      	mov	sl, r3
 800a924:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a928:	b10a      	cbz	r2, 800a92e <_vfiprintf_r+0x86>
 800a92a:	2a25      	cmp	r2, #37	; 0x25
 800a92c:	d1f9      	bne.n	800a922 <_vfiprintf_r+0x7a>
 800a92e:	ebba 0b04 	subs.w	fp, sl, r4
 800a932:	d00b      	beq.n	800a94c <_vfiprintf_r+0xa4>
 800a934:	465b      	mov	r3, fp
 800a936:	4622      	mov	r2, r4
 800a938:	4629      	mov	r1, r5
 800a93a:	4630      	mov	r0, r6
 800a93c:	f7ff ffa1 	bl	800a882 <__sfputs_r>
 800a940:	3001      	adds	r0, #1
 800a942:	f000 80a9 	beq.w	800aa98 <_vfiprintf_r+0x1f0>
 800a946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a948:	445a      	add	r2, fp
 800a94a:	9209      	str	r2, [sp, #36]	; 0x24
 800a94c:	f89a 3000 	ldrb.w	r3, [sl]
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 80a1 	beq.w	800aa98 <_vfiprintf_r+0x1f0>
 800a956:	2300      	movs	r3, #0
 800a958:	f04f 32ff 	mov.w	r2, #4294967295
 800a95c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a960:	f10a 0a01 	add.w	sl, sl, #1
 800a964:	9304      	str	r3, [sp, #16]
 800a966:	9307      	str	r3, [sp, #28]
 800a968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a96c:	931a      	str	r3, [sp, #104]	; 0x68
 800a96e:	4654      	mov	r4, sl
 800a970:	2205      	movs	r2, #5
 800a972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a976:	4854      	ldr	r0, [pc, #336]	; (800aac8 <_vfiprintf_r+0x220>)
 800a978:	f7f5 fc2a 	bl	80001d0 <memchr>
 800a97c:	9a04      	ldr	r2, [sp, #16]
 800a97e:	b9d8      	cbnz	r0, 800a9b8 <_vfiprintf_r+0x110>
 800a980:	06d1      	lsls	r1, r2, #27
 800a982:	bf44      	itt	mi
 800a984:	2320      	movmi	r3, #32
 800a986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a98a:	0713      	lsls	r3, r2, #28
 800a98c:	bf44      	itt	mi
 800a98e:	232b      	movmi	r3, #43	; 0x2b
 800a990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a994:	f89a 3000 	ldrb.w	r3, [sl]
 800a998:	2b2a      	cmp	r3, #42	; 0x2a
 800a99a:	d015      	beq.n	800a9c8 <_vfiprintf_r+0x120>
 800a99c:	9a07      	ldr	r2, [sp, #28]
 800a99e:	4654      	mov	r4, sl
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	f04f 0c0a 	mov.w	ip, #10
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ac:	3b30      	subs	r3, #48	; 0x30
 800a9ae:	2b09      	cmp	r3, #9
 800a9b0:	d94d      	bls.n	800aa4e <_vfiprintf_r+0x1a6>
 800a9b2:	b1b0      	cbz	r0, 800a9e2 <_vfiprintf_r+0x13a>
 800a9b4:	9207      	str	r2, [sp, #28]
 800a9b6:	e014      	b.n	800a9e2 <_vfiprintf_r+0x13a>
 800a9b8:	eba0 0308 	sub.w	r3, r0, r8
 800a9bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	9304      	str	r3, [sp, #16]
 800a9c4:	46a2      	mov	sl, r4
 800a9c6:	e7d2      	b.n	800a96e <_vfiprintf_r+0xc6>
 800a9c8:	9b03      	ldr	r3, [sp, #12]
 800a9ca:	1d19      	adds	r1, r3, #4
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	9103      	str	r1, [sp, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	bfbb      	ittet	lt
 800a9d4:	425b      	neglt	r3, r3
 800a9d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a9da:	9307      	strge	r3, [sp, #28]
 800a9dc:	9307      	strlt	r3, [sp, #28]
 800a9de:	bfb8      	it	lt
 800a9e0:	9204      	strlt	r2, [sp, #16]
 800a9e2:	7823      	ldrb	r3, [r4, #0]
 800a9e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e6:	d10c      	bne.n	800aa02 <_vfiprintf_r+0x15a>
 800a9e8:	7863      	ldrb	r3, [r4, #1]
 800a9ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ec:	d134      	bne.n	800aa58 <_vfiprintf_r+0x1b0>
 800a9ee:	9b03      	ldr	r3, [sp, #12]
 800a9f0:	1d1a      	adds	r2, r3, #4
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	9203      	str	r2, [sp, #12]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	bfb8      	it	lt
 800a9fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9fe:	3402      	adds	r4, #2
 800aa00:	9305      	str	r3, [sp, #20]
 800aa02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aad8 <_vfiprintf_r+0x230>
 800aa06:	7821      	ldrb	r1, [r4, #0]
 800aa08:	2203      	movs	r2, #3
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	f7f5 fbe0 	bl	80001d0 <memchr>
 800aa10:	b138      	cbz	r0, 800aa22 <_vfiprintf_r+0x17a>
 800aa12:	9b04      	ldr	r3, [sp, #16]
 800aa14:	eba0 000a 	sub.w	r0, r0, sl
 800aa18:	2240      	movs	r2, #64	; 0x40
 800aa1a:	4082      	lsls	r2, r0
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	3401      	adds	r4, #1
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa26:	4829      	ldr	r0, [pc, #164]	; (800aacc <_vfiprintf_r+0x224>)
 800aa28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa2c:	2206      	movs	r2, #6
 800aa2e:	f7f5 fbcf 	bl	80001d0 <memchr>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d03f      	beq.n	800aab6 <_vfiprintf_r+0x20e>
 800aa36:	4b26      	ldr	r3, [pc, #152]	; (800aad0 <_vfiprintf_r+0x228>)
 800aa38:	bb1b      	cbnz	r3, 800aa82 <_vfiprintf_r+0x1da>
 800aa3a:	9b03      	ldr	r3, [sp, #12]
 800aa3c:	3307      	adds	r3, #7
 800aa3e:	f023 0307 	bic.w	r3, r3, #7
 800aa42:	3308      	adds	r3, #8
 800aa44:	9303      	str	r3, [sp, #12]
 800aa46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa48:	443b      	add	r3, r7
 800aa4a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4c:	e768      	b.n	800a920 <_vfiprintf_r+0x78>
 800aa4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa52:	460c      	mov	r4, r1
 800aa54:	2001      	movs	r0, #1
 800aa56:	e7a6      	b.n	800a9a6 <_vfiprintf_r+0xfe>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	3401      	adds	r4, #1
 800aa5c:	9305      	str	r3, [sp, #20]
 800aa5e:	4619      	mov	r1, r3
 800aa60:	f04f 0c0a 	mov.w	ip, #10
 800aa64:	4620      	mov	r0, r4
 800aa66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa6a:	3a30      	subs	r2, #48	; 0x30
 800aa6c:	2a09      	cmp	r2, #9
 800aa6e:	d903      	bls.n	800aa78 <_vfiprintf_r+0x1d0>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0c6      	beq.n	800aa02 <_vfiprintf_r+0x15a>
 800aa74:	9105      	str	r1, [sp, #20]
 800aa76:	e7c4      	b.n	800aa02 <_vfiprintf_r+0x15a>
 800aa78:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e7f0      	b.n	800aa64 <_vfiprintf_r+0x1bc>
 800aa82:	ab03      	add	r3, sp, #12
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	462a      	mov	r2, r5
 800aa88:	4b12      	ldr	r3, [pc, #72]	; (800aad4 <_vfiprintf_r+0x22c>)
 800aa8a:	a904      	add	r1, sp, #16
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	f3af 8000 	nop.w
 800aa92:	4607      	mov	r7, r0
 800aa94:	1c78      	adds	r0, r7, #1
 800aa96:	d1d6      	bne.n	800aa46 <_vfiprintf_r+0x19e>
 800aa98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa9a:	07d9      	lsls	r1, r3, #31
 800aa9c:	d405      	bmi.n	800aaaa <_vfiprintf_r+0x202>
 800aa9e:	89ab      	ldrh	r3, [r5, #12]
 800aaa0:	059a      	lsls	r2, r3, #22
 800aaa2:	d402      	bmi.n	800aaaa <_vfiprintf_r+0x202>
 800aaa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaa6:	f7ff fdce 	bl	800a646 <__retarget_lock_release_recursive>
 800aaaa:	89ab      	ldrh	r3, [r5, #12]
 800aaac:	065b      	lsls	r3, r3, #25
 800aaae:	f53f af1d 	bmi.w	800a8ec <_vfiprintf_r+0x44>
 800aab2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab4:	e71c      	b.n	800a8f0 <_vfiprintf_r+0x48>
 800aab6:	ab03      	add	r3, sp, #12
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	462a      	mov	r2, r5
 800aabc:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <_vfiprintf_r+0x22c>)
 800aabe:	a904      	add	r1, sp, #16
 800aac0:	4630      	mov	r0, r6
 800aac2:	f000 f879 	bl	800abb8 <_printf_i>
 800aac6:	e7e4      	b.n	800aa92 <_vfiprintf_r+0x1ea>
 800aac8:	0800b3fc 	.word	0x0800b3fc
 800aacc:	0800b406 	.word	0x0800b406
 800aad0:	00000000 	.word	0x00000000
 800aad4:	0800a883 	.word	0x0800a883
 800aad8:	0800b402 	.word	0x0800b402

0800aadc <_printf_common>:
 800aadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae0:	4616      	mov	r6, r2
 800aae2:	4699      	mov	r9, r3
 800aae4:	688a      	ldr	r2, [r1, #8]
 800aae6:	690b      	ldr	r3, [r1, #16]
 800aae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaec:	4293      	cmp	r3, r2
 800aaee:	bfb8      	it	lt
 800aaf0:	4613      	movlt	r3, r2
 800aaf2:	6033      	str	r3, [r6, #0]
 800aaf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aaf8:	4607      	mov	r7, r0
 800aafa:	460c      	mov	r4, r1
 800aafc:	b10a      	cbz	r2, 800ab02 <_printf_common+0x26>
 800aafe:	3301      	adds	r3, #1
 800ab00:	6033      	str	r3, [r6, #0]
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	0699      	lsls	r1, r3, #26
 800ab06:	bf42      	ittt	mi
 800ab08:	6833      	ldrmi	r3, [r6, #0]
 800ab0a:	3302      	addmi	r3, #2
 800ab0c:	6033      	strmi	r3, [r6, #0]
 800ab0e:	6825      	ldr	r5, [r4, #0]
 800ab10:	f015 0506 	ands.w	r5, r5, #6
 800ab14:	d106      	bne.n	800ab24 <_printf_common+0x48>
 800ab16:	f104 0a19 	add.w	sl, r4, #25
 800ab1a:	68e3      	ldr	r3, [r4, #12]
 800ab1c:	6832      	ldr	r2, [r6, #0]
 800ab1e:	1a9b      	subs	r3, r3, r2
 800ab20:	42ab      	cmp	r3, r5
 800ab22:	dc26      	bgt.n	800ab72 <_printf_common+0x96>
 800ab24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab28:	1e13      	subs	r3, r2, #0
 800ab2a:	6822      	ldr	r2, [r4, #0]
 800ab2c:	bf18      	it	ne
 800ab2e:	2301      	movne	r3, #1
 800ab30:	0692      	lsls	r2, r2, #26
 800ab32:	d42b      	bmi.n	800ab8c <_printf_common+0xb0>
 800ab34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab38:	4649      	mov	r1, r9
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	47c0      	blx	r8
 800ab3e:	3001      	adds	r0, #1
 800ab40:	d01e      	beq.n	800ab80 <_printf_common+0xa4>
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	6922      	ldr	r2, [r4, #16]
 800ab46:	f003 0306 	and.w	r3, r3, #6
 800ab4a:	2b04      	cmp	r3, #4
 800ab4c:	bf02      	ittt	eq
 800ab4e:	68e5      	ldreq	r5, [r4, #12]
 800ab50:	6833      	ldreq	r3, [r6, #0]
 800ab52:	1aed      	subeq	r5, r5, r3
 800ab54:	68a3      	ldr	r3, [r4, #8]
 800ab56:	bf0c      	ite	eq
 800ab58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab5c:	2500      	movne	r5, #0
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	bfc4      	itt	gt
 800ab62:	1a9b      	subgt	r3, r3, r2
 800ab64:	18ed      	addgt	r5, r5, r3
 800ab66:	2600      	movs	r6, #0
 800ab68:	341a      	adds	r4, #26
 800ab6a:	42b5      	cmp	r5, r6
 800ab6c:	d11a      	bne.n	800aba4 <_printf_common+0xc8>
 800ab6e:	2000      	movs	r0, #0
 800ab70:	e008      	b.n	800ab84 <_printf_common+0xa8>
 800ab72:	2301      	movs	r3, #1
 800ab74:	4652      	mov	r2, sl
 800ab76:	4649      	mov	r1, r9
 800ab78:	4638      	mov	r0, r7
 800ab7a:	47c0      	blx	r8
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	d103      	bne.n	800ab88 <_printf_common+0xac>
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab88:	3501      	adds	r5, #1
 800ab8a:	e7c6      	b.n	800ab1a <_printf_common+0x3e>
 800ab8c:	18e1      	adds	r1, r4, r3
 800ab8e:	1c5a      	adds	r2, r3, #1
 800ab90:	2030      	movs	r0, #48	; 0x30
 800ab92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab96:	4422      	add	r2, r4
 800ab98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aba0:	3302      	adds	r3, #2
 800aba2:	e7c7      	b.n	800ab34 <_printf_common+0x58>
 800aba4:	2301      	movs	r3, #1
 800aba6:	4622      	mov	r2, r4
 800aba8:	4649      	mov	r1, r9
 800abaa:	4638      	mov	r0, r7
 800abac:	47c0      	blx	r8
 800abae:	3001      	adds	r0, #1
 800abb0:	d0e6      	beq.n	800ab80 <_printf_common+0xa4>
 800abb2:	3601      	adds	r6, #1
 800abb4:	e7d9      	b.n	800ab6a <_printf_common+0x8e>
	...

0800abb8 <_printf_i>:
 800abb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abbc:	7e0f      	ldrb	r7, [r1, #24]
 800abbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abc0:	2f78      	cmp	r7, #120	; 0x78
 800abc2:	4691      	mov	r9, r2
 800abc4:	4680      	mov	r8, r0
 800abc6:	460c      	mov	r4, r1
 800abc8:	469a      	mov	sl, r3
 800abca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abce:	d807      	bhi.n	800abe0 <_printf_i+0x28>
 800abd0:	2f62      	cmp	r7, #98	; 0x62
 800abd2:	d80a      	bhi.n	800abea <_printf_i+0x32>
 800abd4:	2f00      	cmp	r7, #0
 800abd6:	f000 80d4 	beq.w	800ad82 <_printf_i+0x1ca>
 800abda:	2f58      	cmp	r7, #88	; 0x58
 800abdc:	f000 80c0 	beq.w	800ad60 <_printf_i+0x1a8>
 800abe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abe8:	e03a      	b.n	800ac60 <_printf_i+0xa8>
 800abea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abee:	2b15      	cmp	r3, #21
 800abf0:	d8f6      	bhi.n	800abe0 <_printf_i+0x28>
 800abf2:	a101      	add	r1, pc, #4	; (adr r1, 800abf8 <_printf_i+0x40>)
 800abf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abf8:	0800ac51 	.word	0x0800ac51
 800abfc:	0800ac65 	.word	0x0800ac65
 800ac00:	0800abe1 	.word	0x0800abe1
 800ac04:	0800abe1 	.word	0x0800abe1
 800ac08:	0800abe1 	.word	0x0800abe1
 800ac0c:	0800abe1 	.word	0x0800abe1
 800ac10:	0800ac65 	.word	0x0800ac65
 800ac14:	0800abe1 	.word	0x0800abe1
 800ac18:	0800abe1 	.word	0x0800abe1
 800ac1c:	0800abe1 	.word	0x0800abe1
 800ac20:	0800abe1 	.word	0x0800abe1
 800ac24:	0800ad69 	.word	0x0800ad69
 800ac28:	0800ac91 	.word	0x0800ac91
 800ac2c:	0800ad23 	.word	0x0800ad23
 800ac30:	0800abe1 	.word	0x0800abe1
 800ac34:	0800abe1 	.word	0x0800abe1
 800ac38:	0800ad8b 	.word	0x0800ad8b
 800ac3c:	0800abe1 	.word	0x0800abe1
 800ac40:	0800ac91 	.word	0x0800ac91
 800ac44:	0800abe1 	.word	0x0800abe1
 800ac48:	0800abe1 	.word	0x0800abe1
 800ac4c:	0800ad2b 	.word	0x0800ad2b
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	1d1a      	adds	r2, r3, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	602a      	str	r2, [r5, #0]
 800ac58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac60:	2301      	movs	r3, #1
 800ac62:	e09f      	b.n	800ada4 <_printf_i+0x1ec>
 800ac64:	6820      	ldr	r0, [r4, #0]
 800ac66:	682b      	ldr	r3, [r5, #0]
 800ac68:	0607      	lsls	r7, r0, #24
 800ac6a:	f103 0104 	add.w	r1, r3, #4
 800ac6e:	6029      	str	r1, [r5, #0]
 800ac70:	d501      	bpl.n	800ac76 <_printf_i+0xbe>
 800ac72:	681e      	ldr	r6, [r3, #0]
 800ac74:	e003      	b.n	800ac7e <_printf_i+0xc6>
 800ac76:	0646      	lsls	r6, r0, #25
 800ac78:	d5fb      	bpl.n	800ac72 <_printf_i+0xba>
 800ac7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	da03      	bge.n	800ac8a <_printf_i+0xd2>
 800ac82:	232d      	movs	r3, #45	; 0x2d
 800ac84:	4276      	negs	r6, r6
 800ac86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac8a:	485a      	ldr	r0, [pc, #360]	; (800adf4 <_printf_i+0x23c>)
 800ac8c:	230a      	movs	r3, #10
 800ac8e:	e012      	b.n	800acb6 <_printf_i+0xfe>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	6820      	ldr	r0, [r4, #0]
 800ac94:	1d19      	adds	r1, r3, #4
 800ac96:	6029      	str	r1, [r5, #0]
 800ac98:	0605      	lsls	r5, r0, #24
 800ac9a:	d501      	bpl.n	800aca0 <_printf_i+0xe8>
 800ac9c:	681e      	ldr	r6, [r3, #0]
 800ac9e:	e002      	b.n	800aca6 <_printf_i+0xee>
 800aca0:	0641      	lsls	r1, r0, #25
 800aca2:	d5fb      	bpl.n	800ac9c <_printf_i+0xe4>
 800aca4:	881e      	ldrh	r6, [r3, #0]
 800aca6:	4853      	ldr	r0, [pc, #332]	; (800adf4 <_printf_i+0x23c>)
 800aca8:	2f6f      	cmp	r7, #111	; 0x6f
 800acaa:	bf0c      	ite	eq
 800acac:	2308      	moveq	r3, #8
 800acae:	230a      	movne	r3, #10
 800acb0:	2100      	movs	r1, #0
 800acb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acb6:	6865      	ldr	r5, [r4, #4]
 800acb8:	60a5      	str	r5, [r4, #8]
 800acba:	2d00      	cmp	r5, #0
 800acbc:	bfa2      	ittt	ge
 800acbe:	6821      	ldrge	r1, [r4, #0]
 800acc0:	f021 0104 	bicge.w	r1, r1, #4
 800acc4:	6021      	strge	r1, [r4, #0]
 800acc6:	b90e      	cbnz	r6, 800accc <_printf_i+0x114>
 800acc8:	2d00      	cmp	r5, #0
 800acca:	d04b      	beq.n	800ad64 <_printf_i+0x1ac>
 800accc:	4615      	mov	r5, r2
 800acce:	fbb6 f1f3 	udiv	r1, r6, r3
 800acd2:	fb03 6711 	mls	r7, r3, r1, r6
 800acd6:	5dc7      	ldrb	r7, [r0, r7]
 800acd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acdc:	4637      	mov	r7, r6
 800acde:	42bb      	cmp	r3, r7
 800ace0:	460e      	mov	r6, r1
 800ace2:	d9f4      	bls.n	800acce <_printf_i+0x116>
 800ace4:	2b08      	cmp	r3, #8
 800ace6:	d10b      	bne.n	800ad00 <_printf_i+0x148>
 800ace8:	6823      	ldr	r3, [r4, #0]
 800acea:	07de      	lsls	r6, r3, #31
 800acec:	d508      	bpl.n	800ad00 <_printf_i+0x148>
 800acee:	6923      	ldr	r3, [r4, #16]
 800acf0:	6861      	ldr	r1, [r4, #4]
 800acf2:	4299      	cmp	r1, r3
 800acf4:	bfde      	ittt	le
 800acf6:	2330      	movle	r3, #48	; 0x30
 800acf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad00:	1b52      	subs	r2, r2, r5
 800ad02:	6122      	str	r2, [r4, #16]
 800ad04:	f8cd a000 	str.w	sl, [sp]
 800ad08:	464b      	mov	r3, r9
 800ad0a:	aa03      	add	r2, sp, #12
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	4640      	mov	r0, r8
 800ad10:	f7ff fee4 	bl	800aadc <_printf_common>
 800ad14:	3001      	adds	r0, #1
 800ad16:	d14a      	bne.n	800adae <_printf_i+0x1f6>
 800ad18:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1c:	b004      	add	sp, #16
 800ad1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	f043 0320 	orr.w	r3, r3, #32
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	4833      	ldr	r0, [pc, #204]	; (800adf8 <_printf_i+0x240>)
 800ad2c:	2778      	movs	r7, #120	; 0x78
 800ad2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	6829      	ldr	r1, [r5, #0]
 800ad36:	061f      	lsls	r7, r3, #24
 800ad38:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad3c:	d402      	bmi.n	800ad44 <_printf_i+0x18c>
 800ad3e:	065f      	lsls	r7, r3, #25
 800ad40:	bf48      	it	mi
 800ad42:	b2b6      	uxthmi	r6, r6
 800ad44:	07df      	lsls	r7, r3, #31
 800ad46:	bf48      	it	mi
 800ad48:	f043 0320 	orrmi.w	r3, r3, #32
 800ad4c:	6029      	str	r1, [r5, #0]
 800ad4e:	bf48      	it	mi
 800ad50:	6023      	strmi	r3, [r4, #0]
 800ad52:	b91e      	cbnz	r6, 800ad5c <_printf_i+0x1a4>
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	f023 0320 	bic.w	r3, r3, #32
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	2310      	movs	r3, #16
 800ad5e:	e7a7      	b.n	800acb0 <_printf_i+0xf8>
 800ad60:	4824      	ldr	r0, [pc, #144]	; (800adf4 <_printf_i+0x23c>)
 800ad62:	e7e4      	b.n	800ad2e <_printf_i+0x176>
 800ad64:	4615      	mov	r5, r2
 800ad66:	e7bd      	b.n	800ace4 <_printf_i+0x12c>
 800ad68:	682b      	ldr	r3, [r5, #0]
 800ad6a:	6826      	ldr	r6, [r4, #0]
 800ad6c:	6961      	ldr	r1, [r4, #20]
 800ad6e:	1d18      	adds	r0, r3, #4
 800ad70:	6028      	str	r0, [r5, #0]
 800ad72:	0635      	lsls	r5, r6, #24
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	d501      	bpl.n	800ad7c <_printf_i+0x1c4>
 800ad78:	6019      	str	r1, [r3, #0]
 800ad7a:	e002      	b.n	800ad82 <_printf_i+0x1ca>
 800ad7c:	0670      	lsls	r0, r6, #25
 800ad7e:	d5fb      	bpl.n	800ad78 <_printf_i+0x1c0>
 800ad80:	8019      	strh	r1, [r3, #0]
 800ad82:	2300      	movs	r3, #0
 800ad84:	6123      	str	r3, [r4, #16]
 800ad86:	4615      	mov	r5, r2
 800ad88:	e7bc      	b.n	800ad04 <_printf_i+0x14c>
 800ad8a:	682b      	ldr	r3, [r5, #0]
 800ad8c:	1d1a      	adds	r2, r3, #4
 800ad8e:	602a      	str	r2, [r5, #0]
 800ad90:	681d      	ldr	r5, [r3, #0]
 800ad92:	6862      	ldr	r2, [r4, #4]
 800ad94:	2100      	movs	r1, #0
 800ad96:	4628      	mov	r0, r5
 800ad98:	f7f5 fa1a 	bl	80001d0 <memchr>
 800ad9c:	b108      	cbz	r0, 800ada2 <_printf_i+0x1ea>
 800ad9e:	1b40      	subs	r0, r0, r5
 800ada0:	6060      	str	r0, [r4, #4]
 800ada2:	6863      	ldr	r3, [r4, #4]
 800ada4:	6123      	str	r3, [r4, #16]
 800ada6:	2300      	movs	r3, #0
 800ada8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adac:	e7aa      	b.n	800ad04 <_printf_i+0x14c>
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	462a      	mov	r2, r5
 800adb2:	4649      	mov	r1, r9
 800adb4:	4640      	mov	r0, r8
 800adb6:	47d0      	blx	sl
 800adb8:	3001      	adds	r0, #1
 800adba:	d0ad      	beq.n	800ad18 <_printf_i+0x160>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	079b      	lsls	r3, r3, #30
 800adc0:	d413      	bmi.n	800adea <_printf_i+0x232>
 800adc2:	68e0      	ldr	r0, [r4, #12]
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	4298      	cmp	r0, r3
 800adc8:	bfb8      	it	lt
 800adca:	4618      	movlt	r0, r3
 800adcc:	e7a6      	b.n	800ad1c <_printf_i+0x164>
 800adce:	2301      	movs	r3, #1
 800add0:	4632      	mov	r2, r6
 800add2:	4649      	mov	r1, r9
 800add4:	4640      	mov	r0, r8
 800add6:	47d0      	blx	sl
 800add8:	3001      	adds	r0, #1
 800adda:	d09d      	beq.n	800ad18 <_printf_i+0x160>
 800addc:	3501      	adds	r5, #1
 800adde:	68e3      	ldr	r3, [r4, #12]
 800ade0:	9903      	ldr	r1, [sp, #12]
 800ade2:	1a5b      	subs	r3, r3, r1
 800ade4:	42ab      	cmp	r3, r5
 800ade6:	dcf2      	bgt.n	800adce <_printf_i+0x216>
 800ade8:	e7eb      	b.n	800adc2 <_printf_i+0x20a>
 800adea:	2500      	movs	r5, #0
 800adec:	f104 0619 	add.w	r6, r4, #25
 800adf0:	e7f5      	b.n	800adde <_printf_i+0x226>
 800adf2:	bf00      	nop
 800adf4:	0800b40d 	.word	0x0800b40d
 800adf8:	0800b41e 	.word	0x0800b41e

0800adfc <__sflush_r>:
 800adfc:	898a      	ldrh	r2, [r1, #12]
 800adfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae02:	4605      	mov	r5, r0
 800ae04:	0710      	lsls	r0, r2, #28
 800ae06:	460c      	mov	r4, r1
 800ae08:	d458      	bmi.n	800aebc <__sflush_r+0xc0>
 800ae0a:	684b      	ldr	r3, [r1, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dc05      	bgt.n	800ae1c <__sflush_r+0x20>
 800ae10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	dc02      	bgt.n	800ae1c <__sflush_r+0x20>
 800ae16:	2000      	movs	r0, #0
 800ae18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae1e:	2e00      	cmp	r6, #0
 800ae20:	d0f9      	beq.n	800ae16 <__sflush_r+0x1a>
 800ae22:	2300      	movs	r3, #0
 800ae24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae28:	682f      	ldr	r7, [r5, #0]
 800ae2a:	6a21      	ldr	r1, [r4, #32]
 800ae2c:	602b      	str	r3, [r5, #0]
 800ae2e:	d032      	beq.n	800ae96 <__sflush_r+0x9a>
 800ae30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	075a      	lsls	r2, r3, #29
 800ae36:	d505      	bpl.n	800ae44 <__sflush_r+0x48>
 800ae38:	6863      	ldr	r3, [r4, #4]
 800ae3a:	1ac0      	subs	r0, r0, r3
 800ae3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae3e:	b10b      	cbz	r3, 800ae44 <__sflush_r+0x48>
 800ae40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae42:	1ac0      	subs	r0, r0, r3
 800ae44:	2300      	movs	r3, #0
 800ae46:	4602      	mov	r2, r0
 800ae48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae4a:	6a21      	ldr	r1, [r4, #32]
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	47b0      	blx	r6
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	d106      	bne.n	800ae64 <__sflush_r+0x68>
 800ae56:	6829      	ldr	r1, [r5, #0]
 800ae58:	291d      	cmp	r1, #29
 800ae5a:	d82b      	bhi.n	800aeb4 <__sflush_r+0xb8>
 800ae5c:	4a29      	ldr	r2, [pc, #164]	; (800af04 <__sflush_r+0x108>)
 800ae5e:	410a      	asrs	r2, r1
 800ae60:	07d6      	lsls	r6, r2, #31
 800ae62:	d427      	bmi.n	800aeb4 <__sflush_r+0xb8>
 800ae64:	2200      	movs	r2, #0
 800ae66:	6062      	str	r2, [r4, #4]
 800ae68:	04d9      	lsls	r1, r3, #19
 800ae6a:	6922      	ldr	r2, [r4, #16]
 800ae6c:	6022      	str	r2, [r4, #0]
 800ae6e:	d504      	bpl.n	800ae7a <__sflush_r+0x7e>
 800ae70:	1c42      	adds	r2, r0, #1
 800ae72:	d101      	bne.n	800ae78 <__sflush_r+0x7c>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b903      	cbnz	r3, 800ae7a <__sflush_r+0x7e>
 800ae78:	6560      	str	r0, [r4, #84]	; 0x54
 800ae7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae7c:	602f      	str	r7, [r5, #0]
 800ae7e:	2900      	cmp	r1, #0
 800ae80:	d0c9      	beq.n	800ae16 <__sflush_r+0x1a>
 800ae82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae86:	4299      	cmp	r1, r3
 800ae88:	d002      	beq.n	800ae90 <__sflush_r+0x94>
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f7ff fbea 	bl	800a664 <_free_r>
 800ae90:	2000      	movs	r0, #0
 800ae92:	6360      	str	r0, [r4, #52]	; 0x34
 800ae94:	e7c0      	b.n	800ae18 <__sflush_r+0x1c>
 800ae96:	2301      	movs	r3, #1
 800ae98:	4628      	mov	r0, r5
 800ae9a:	47b0      	blx	r6
 800ae9c:	1c41      	adds	r1, r0, #1
 800ae9e:	d1c8      	bne.n	800ae32 <__sflush_r+0x36>
 800aea0:	682b      	ldr	r3, [r5, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0c5      	beq.n	800ae32 <__sflush_r+0x36>
 800aea6:	2b1d      	cmp	r3, #29
 800aea8:	d001      	beq.n	800aeae <__sflush_r+0xb2>
 800aeaa:	2b16      	cmp	r3, #22
 800aeac:	d101      	bne.n	800aeb2 <__sflush_r+0xb6>
 800aeae:	602f      	str	r7, [r5, #0]
 800aeb0:	e7b1      	b.n	800ae16 <__sflush_r+0x1a>
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeb8:	81a3      	strh	r3, [r4, #12]
 800aeba:	e7ad      	b.n	800ae18 <__sflush_r+0x1c>
 800aebc:	690f      	ldr	r7, [r1, #16]
 800aebe:	2f00      	cmp	r7, #0
 800aec0:	d0a9      	beq.n	800ae16 <__sflush_r+0x1a>
 800aec2:	0793      	lsls	r3, r2, #30
 800aec4:	680e      	ldr	r6, [r1, #0]
 800aec6:	bf08      	it	eq
 800aec8:	694b      	ldreq	r3, [r1, #20]
 800aeca:	600f      	str	r7, [r1, #0]
 800aecc:	bf18      	it	ne
 800aece:	2300      	movne	r3, #0
 800aed0:	eba6 0807 	sub.w	r8, r6, r7
 800aed4:	608b      	str	r3, [r1, #8]
 800aed6:	f1b8 0f00 	cmp.w	r8, #0
 800aeda:	dd9c      	ble.n	800ae16 <__sflush_r+0x1a>
 800aedc:	6a21      	ldr	r1, [r4, #32]
 800aede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aee0:	4643      	mov	r3, r8
 800aee2:	463a      	mov	r2, r7
 800aee4:	4628      	mov	r0, r5
 800aee6:	47b0      	blx	r6
 800aee8:	2800      	cmp	r0, #0
 800aeea:	dc06      	bgt.n	800aefa <__sflush_r+0xfe>
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aef2:	81a3      	strh	r3, [r4, #12]
 800aef4:	f04f 30ff 	mov.w	r0, #4294967295
 800aef8:	e78e      	b.n	800ae18 <__sflush_r+0x1c>
 800aefa:	4407      	add	r7, r0
 800aefc:	eba8 0800 	sub.w	r8, r8, r0
 800af00:	e7e9      	b.n	800aed6 <__sflush_r+0xda>
 800af02:	bf00      	nop
 800af04:	dfbffffe 	.word	0xdfbffffe

0800af08 <_fflush_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	690b      	ldr	r3, [r1, #16]
 800af0c:	4605      	mov	r5, r0
 800af0e:	460c      	mov	r4, r1
 800af10:	b913      	cbnz	r3, 800af18 <_fflush_r+0x10>
 800af12:	2500      	movs	r5, #0
 800af14:	4628      	mov	r0, r5
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	b118      	cbz	r0, 800af22 <_fflush_r+0x1a>
 800af1a:	6a03      	ldr	r3, [r0, #32]
 800af1c:	b90b      	cbnz	r3, 800af22 <_fflush_r+0x1a>
 800af1e:	f7ff fa37 	bl	800a390 <__sinit>
 800af22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0f3      	beq.n	800af12 <_fflush_r+0xa>
 800af2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af2c:	07d0      	lsls	r0, r2, #31
 800af2e:	d404      	bmi.n	800af3a <_fflush_r+0x32>
 800af30:	0599      	lsls	r1, r3, #22
 800af32:	d402      	bmi.n	800af3a <_fflush_r+0x32>
 800af34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af36:	f7ff fb85 	bl	800a644 <__retarget_lock_acquire_recursive>
 800af3a:	4628      	mov	r0, r5
 800af3c:	4621      	mov	r1, r4
 800af3e:	f7ff ff5d 	bl	800adfc <__sflush_r>
 800af42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af44:	07da      	lsls	r2, r3, #31
 800af46:	4605      	mov	r5, r0
 800af48:	d4e4      	bmi.n	800af14 <_fflush_r+0xc>
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	059b      	lsls	r3, r3, #22
 800af4e:	d4e1      	bmi.n	800af14 <_fflush_r+0xc>
 800af50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af52:	f7ff fb78 	bl	800a646 <__retarget_lock_release_recursive>
 800af56:	e7dd      	b.n	800af14 <_fflush_r+0xc>

0800af58 <__swbuf_r>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	460e      	mov	r6, r1
 800af5c:	4614      	mov	r4, r2
 800af5e:	4605      	mov	r5, r0
 800af60:	b118      	cbz	r0, 800af6a <__swbuf_r+0x12>
 800af62:	6a03      	ldr	r3, [r0, #32]
 800af64:	b90b      	cbnz	r3, 800af6a <__swbuf_r+0x12>
 800af66:	f7ff fa13 	bl	800a390 <__sinit>
 800af6a:	69a3      	ldr	r3, [r4, #24]
 800af6c:	60a3      	str	r3, [r4, #8]
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	071a      	lsls	r2, r3, #28
 800af72:	d525      	bpl.n	800afc0 <__swbuf_r+0x68>
 800af74:	6923      	ldr	r3, [r4, #16]
 800af76:	b31b      	cbz	r3, 800afc0 <__swbuf_r+0x68>
 800af78:	6823      	ldr	r3, [r4, #0]
 800af7a:	6922      	ldr	r2, [r4, #16]
 800af7c:	1a98      	subs	r0, r3, r2
 800af7e:	6963      	ldr	r3, [r4, #20]
 800af80:	b2f6      	uxtb	r6, r6
 800af82:	4283      	cmp	r3, r0
 800af84:	4637      	mov	r7, r6
 800af86:	dc04      	bgt.n	800af92 <__swbuf_r+0x3a>
 800af88:	4621      	mov	r1, r4
 800af8a:	4628      	mov	r0, r5
 800af8c:	f7ff ffbc 	bl	800af08 <_fflush_r>
 800af90:	b9e0      	cbnz	r0, 800afcc <__swbuf_r+0x74>
 800af92:	68a3      	ldr	r3, [r4, #8]
 800af94:	3b01      	subs	r3, #1
 800af96:	60a3      	str	r3, [r4, #8]
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	1c5a      	adds	r2, r3, #1
 800af9c:	6022      	str	r2, [r4, #0]
 800af9e:	701e      	strb	r6, [r3, #0]
 800afa0:	6962      	ldr	r2, [r4, #20]
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d004      	beq.n	800afb2 <__swbuf_r+0x5a>
 800afa8:	89a3      	ldrh	r3, [r4, #12]
 800afaa:	07db      	lsls	r3, r3, #31
 800afac:	d506      	bpl.n	800afbc <__swbuf_r+0x64>
 800afae:	2e0a      	cmp	r6, #10
 800afb0:	d104      	bne.n	800afbc <__swbuf_r+0x64>
 800afb2:	4621      	mov	r1, r4
 800afb4:	4628      	mov	r0, r5
 800afb6:	f7ff ffa7 	bl	800af08 <_fflush_r>
 800afba:	b938      	cbnz	r0, 800afcc <__swbuf_r+0x74>
 800afbc:	4638      	mov	r0, r7
 800afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc0:	4621      	mov	r1, r4
 800afc2:	4628      	mov	r0, r5
 800afc4:	f000 f806 	bl	800afd4 <__swsetup_r>
 800afc8:	2800      	cmp	r0, #0
 800afca:	d0d5      	beq.n	800af78 <__swbuf_r+0x20>
 800afcc:	f04f 37ff 	mov.w	r7, #4294967295
 800afd0:	e7f4      	b.n	800afbc <__swbuf_r+0x64>
	...

0800afd4 <__swsetup_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4b2a      	ldr	r3, [pc, #168]	; (800b080 <__swsetup_r+0xac>)
 800afd8:	4605      	mov	r5, r0
 800afda:	6818      	ldr	r0, [r3, #0]
 800afdc:	460c      	mov	r4, r1
 800afde:	b118      	cbz	r0, 800afe8 <__swsetup_r+0x14>
 800afe0:	6a03      	ldr	r3, [r0, #32]
 800afe2:	b90b      	cbnz	r3, 800afe8 <__swsetup_r+0x14>
 800afe4:	f7ff f9d4 	bl	800a390 <__sinit>
 800afe8:	89a3      	ldrh	r3, [r4, #12]
 800afea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afee:	0718      	lsls	r0, r3, #28
 800aff0:	d422      	bmi.n	800b038 <__swsetup_r+0x64>
 800aff2:	06d9      	lsls	r1, r3, #27
 800aff4:	d407      	bmi.n	800b006 <__swsetup_r+0x32>
 800aff6:	2309      	movs	r3, #9
 800aff8:	602b      	str	r3, [r5, #0]
 800affa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800affe:	81a3      	strh	r3, [r4, #12]
 800b000:	f04f 30ff 	mov.w	r0, #4294967295
 800b004:	e034      	b.n	800b070 <__swsetup_r+0x9c>
 800b006:	0758      	lsls	r0, r3, #29
 800b008:	d512      	bpl.n	800b030 <__swsetup_r+0x5c>
 800b00a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b00c:	b141      	cbz	r1, 800b020 <__swsetup_r+0x4c>
 800b00e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b012:	4299      	cmp	r1, r3
 800b014:	d002      	beq.n	800b01c <__swsetup_r+0x48>
 800b016:	4628      	mov	r0, r5
 800b018:	f7ff fb24 	bl	800a664 <_free_r>
 800b01c:	2300      	movs	r3, #0
 800b01e:	6363      	str	r3, [r4, #52]	; 0x34
 800b020:	89a3      	ldrh	r3, [r4, #12]
 800b022:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b026:	81a3      	strh	r3, [r4, #12]
 800b028:	2300      	movs	r3, #0
 800b02a:	6063      	str	r3, [r4, #4]
 800b02c:	6923      	ldr	r3, [r4, #16]
 800b02e:	6023      	str	r3, [r4, #0]
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	f043 0308 	orr.w	r3, r3, #8
 800b036:	81a3      	strh	r3, [r4, #12]
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	b94b      	cbnz	r3, 800b050 <__swsetup_r+0x7c>
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b046:	d003      	beq.n	800b050 <__swsetup_r+0x7c>
 800b048:	4621      	mov	r1, r4
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 f850 	bl	800b0f0 <__smakebuf_r>
 800b050:	89a0      	ldrh	r0, [r4, #12]
 800b052:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b056:	f010 0301 	ands.w	r3, r0, #1
 800b05a:	d00a      	beq.n	800b072 <__swsetup_r+0x9e>
 800b05c:	2300      	movs	r3, #0
 800b05e:	60a3      	str	r3, [r4, #8]
 800b060:	6963      	ldr	r3, [r4, #20]
 800b062:	425b      	negs	r3, r3
 800b064:	61a3      	str	r3, [r4, #24]
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	b943      	cbnz	r3, 800b07c <__swsetup_r+0xa8>
 800b06a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b06e:	d1c4      	bne.n	800affa <__swsetup_r+0x26>
 800b070:	bd38      	pop	{r3, r4, r5, pc}
 800b072:	0781      	lsls	r1, r0, #30
 800b074:	bf58      	it	pl
 800b076:	6963      	ldrpl	r3, [r4, #20]
 800b078:	60a3      	str	r3, [r4, #8]
 800b07a:	e7f4      	b.n	800b066 <__swsetup_r+0x92>
 800b07c:	2000      	movs	r0, #0
 800b07e:	e7f7      	b.n	800b070 <__swsetup_r+0x9c>
 800b080:	20000070 	.word	0x20000070

0800b084 <_sbrk_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4d06      	ldr	r5, [pc, #24]	; (800b0a0 <_sbrk_r+0x1c>)
 800b088:	2300      	movs	r3, #0
 800b08a:	4604      	mov	r4, r0
 800b08c:	4608      	mov	r0, r1
 800b08e:	602b      	str	r3, [r5, #0]
 800b090:	f7f7 f91a 	bl	80022c8 <_sbrk>
 800b094:	1c43      	adds	r3, r0, #1
 800b096:	d102      	bne.n	800b09e <_sbrk_r+0x1a>
 800b098:	682b      	ldr	r3, [r5, #0]
 800b09a:	b103      	cbz	r3, 800b09e <_sbrk_r+0x1a>
 800b09c:	6023      	str	r3, [r4, #0]
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	2000d560 	.word	0x2000d560

0800b0a4 <__swhatbuf_r>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	b096      	sub	sp, #88	; 0x58
 800b0b0:	4615      	mov	r5, r2
 800b0b2:	461e      	mov	r6, r3
 800b0b4:	da0d      	bge.n	800b0d2 <__swhatbuf_r+0x2e>
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b0bc:	f04f 0100 	mov.w	r1, #0
 800b0c0:	bf0c      	ite	eq
 800b0c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b0c6:	2340      	movne	r3, #64	; 0x40
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	6031      	str	r1, [r6, #0]
 800b0cc:	602b      	str	r3, [r5, #0]
 800b0ce:	b016      	add	sp, #88	; 0x58
 800b0d0:	bd70      	pop	{r4, r5, r6, pc}
 800b0d2:	466a      	mov	r2, sp
 800b0d4:	f000 f848 	bl	800b168 <_fstat_r>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	dbec      	blt.n	800b0b6 <__swhatbuf_r+0x12>
 800b0dc:	9901      	ldr	r1, [sp, #4]
 800b0de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0e6:	4259      	negs	r1, r3
 800b0e8:	4159      	adcs	r1, r3
 800b0ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ee:	e7eb      	b.n	800b0c8 <__swhatbuf_r+0x24>

0800b0f0 <__smakebuf_r>:
 800b0f0:	898b      	ldrh	r3, [r1, #12]
 800b0f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0f4:	079d      	lsls	r5, r3, #30
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	d507      	bpl.n	800b10c <__smakebuf_r+0x1c>
 800b0fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	6123      	str	r3, [r4, #16]
 800b104:	2301      	movs	r3, #1
 800b106:	6163      	str	r3, [r4, #20]
 800b108:	b002      	add	sp, #8
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
 800b10c:	ab01      	add	r3, sp, #4
 800b10e:	466a      	mov	r2, sp
 800b110:	f7ff ffc8 	bl	800b0a4 <__swhatbuf_r>
 800b114:	9900      	ldr	r1, [sp, #0]
 800b116:	4605      	mov	r5, r0
 800b118:	4630      	mov	r0, r6
 800b11a:	f7ff fb0f 	bl	800a73c <_malloc_r>
 800b11e:	b948      	cbnz	r0, 800b134 <__smakebuf_r+0x44>
 800b120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b124:	059a      	lsls	r2, r3, #22
 800b126:	d4ef      	bmi.n	800b108 <__smakebuf_r+0x18>
 800b128:	f023 0303 	bic.w	r3, r3, #3
 800b12c:	f043 0302 	orr.w	r3, r3, #2
 800b130:	81a3      	strh	r3, [r4, #12]
 800b132:	e7e3      	b.n	800b0fc <__smakebuf_r+0xc>
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	6020      	str	r0, [r4, #0]
 800b138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	9b00      	ldr	r3, [sp, #0]
 800b140:	6163      	str	r3, [r4, #20]
 800b142:	9b01      	ldr	r3, [sp, #4]
 800b144:	6120      	str	r0, [r4, #16]
 800b146:	b15b      	cbz	r3, 800b160 <__smakebuf_r+0x70>
 800b148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b14c:	4630      	mov	r0, r6
 800b14e:	f000 f81d 	bl	800b18c <_isatty_r>
 800b152:	b128      	cbz	r0, 800b160 <__smakebuf_r+0x70>
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	f023 0303 	bic.w	r3, r3, #3
 800b15a:	f043 0301 	orr.w	r3, r3, #1
 800b15e:	81a3      	strh	r3, [r4, #12]
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	431d      	orrs	r5, r3
 800b164:	81a5      	strh	r5, [r4, #12]
 800b166:	e7cf      	b.n	800b108 <__smakebuf_r+0x18>

0800b168 <_fstat_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4d07      	ldr	r5, [pc, #28]	; (800b188 <_fstat_r+0x20>)
 800b16c:	2300      	movs	r3, #0
 800b16e:	4604      	mov	r4, r0
 800b170:	4608      	mov	r0, r1
 800b172:	4611      	mov	r1, r2
 800b174:	602b      	str	r3, [r5, #0]
 800b176:	f7f7 f87e 	bl	8002276 <_fstat>
 800b17a:	1c43      	adds	r3, r0, #1
 800b17c:	d102      	bne.n	800b184 <_fstat_r+0x1c>
 800b17e:	682b      	ldr	r3, [r5, #0]
 800b180:	b103      	cbz	r3, 800b184 <_fstat_r+0x1c>
 800b182:	6023      	str	r3, [r4, #0]
 800b184:	bd38      	pop	{r3, r4, r5, pc}
 800b186:	bf00      	nop
 800b188:	2000d560 	.word	0x2000d560

0800b18c <_isatty_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4d06      	ldr	r5, [pc, #24]	; (800b1a8 <_isatty_r+0x1c>)
 800b190:	2300      	movs	r3, #0
 800b192:	4604      	mov	r4, r0
 800b194:	4608      	mov	r0, r1
 800b196:	602b      	str	r3, [r5, #0]
 800b198:	f7f7 f87d 	bl	8002296 <_isatty>
 800b19c:	1c43      	adds	r3, r0, #1
 800b19e:	d102      	bne.n	800b1a6 <_isatty_r+0x1a>
 800b1a0:	682b      	ldr	r3, [r5, #0]
 800b1a2:	b103      	cbz	r3, 800b1a6 <_isatty_r+0x1a>
 800b1a4:	6023      	str	r3, [r4, #0]
 800b1a6:	bd38      	pop	{r3, r4, r5, pc}
 800b1a8:	2000d560 	.word	0x2000d560

0800b1ac <trunc>:
 800b1ac:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800b1b0:	ec5c bb10 	vmov	fp, ip, d0
 800b1b4:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800b1b8:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800b1bc:	2913      	cmp	r1, #19
 800b1be:	4664      	mov	r4, ip
 800b1c0:	dc11      	bgt.n	800b1e6 <trunc+0x3a>
 800b1c2:	2900      	cmp	r1, #0
 800b1c4:	bfa7      	ittee	ge
 800b1c6:	4b15      	ldrge	r3, [pc, #84]	; (800b21c <trunc+0x70>)
 800b1c8:	fa43 f101 	asrge.w	r1, r3, r1
 800b1cc:	2200      	movlt	r2, #0
 800b1ce:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800b1d2:	bfa4      	itt	ge
 800b1d4:	2200      	movge	r2, #0
 800b1d6:	ea01 030c 	andge.w	r3, r1, ip
 800b1da:	4693      	mov	fp, r2
 800b1dc:	469c      	mov	ip, r3
 800b1de:	ec4c bb10 	vmov	d0, fp, ip
 800b1e2:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800b1e6:	2933      	cmp	r1, #51	; 0x33
 800b1e8:	dd0d      	ble.n	800b206 <trunc+0x5a>
 800b1ea:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b1ee:	d1f6      	bne.n	800b1de <trunc+0x32>
 800b1f0:	4663      	mov	r3, ip
 800b1f2:	ee10 2a10 	vmov	r2, s0
 800b1f6:	ee10 0a10 	vmov	r0, s0
 800b1fa:	4621      	mov	r1, r4
 800b1fc:	f7f5 f968 	bl	80004d0 <__adddf3>
 800b200:	4683      	mov	fp, r0
 800b202:	468c      	mov	ip, r1
 800b204:	e7eb      	b.n	800b1de <trunc+0x32>
 800b206:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800b20a:	f04f 33ff 	mov.w	r3, #4294967295
 800b20e:	40c3      	lsrs	r3, r0
 800b210:	ea2b 0603 	bic.w	r6, fp, r3
 800b214:	46b3      	mov	fp, r6
 800b216:	46a4      	mov	ip, r4
 800b218:	e7e1      	b.n	800b1de <trunc+0x32>
 800b21a:	bf00      	nop
 800b21c:	fff00000 	.word	0xfff00000

0800b220 <_init>:
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b222:	bf00      	nop
 800b224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b226:	bc08      	pop	{r3}
 800b228:	469e      	mov	lr, r3
 800b22a:	4770      	bx	lr

0800b22c <_fini>:
 800b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22e:	bf00      	nop
 800b230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b232:	bc08      	pop	{r3}
 800b234:	469e      	mov	lr, r3
 800b236:	4770      	bx	lr
